// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package operational

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryConfig is an auto generated low-level Go binding around an user-defined struct.
type RegistryConfig struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workflowOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workflowOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workflowOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"GatewaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Performance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WorkflowActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WorkflowCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WorkflowPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"WorkflowRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WorkflowResumed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"activateWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"performanceOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"performancePremiumThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"fundBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayStorage\",\"outputs\":[{\"internalType\":\"contractGatewayStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorkflow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorkflowOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMainChain\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_workflowStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatewayStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerGetterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"performanceOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"performancePremiumThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"internalType\":\"structRegistry.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pauseWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"workflowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"registerWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"resumeWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"performanceOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"performancePremiumThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"internalType\":\"structRegistry.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerGetter\",\"outputs\":[{\"internalType\":\"contractISignerAddress\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowStorage\",\"outputs\":[{\"internalType\":\"contractWorkflowStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061516e806100206000396000f3fe60806040526004361061012a5760003560e01c8063774c208a116100ab578063d0c81e981161006f578063d0c81e981461039b578063d692157b146103c4578063d6bb757b146103ed578063e3870a2414610416578063eec7b03c1461043f578063f8b2cb4f1461047c5761012a565b8063774c208a146102d657806379502c55146102ff578063af011ac71461032e578063b834f6fb14610359578063c7b8981c146103845761012a565b806359e13cd3116100f257806359e13cd3146102035780635c211f881461022e578063663d4503146102595780636b5d420614610282578063756af45f146102ad5761012a565b80630813ce961461012f5780630ad5a865146101585780632ad5d34014610174578063411b3d4b1461019d5780635902c15e146101da575b600080fd5b34801561013b57600080fd5b506101566004803603810190610151919061376a565b6104b9565b005b610172600480360381019061016d91906137f5565b61091a565b005b34801561018057600080fd5b5061019b60048036038101906101969190613846565b610a1c565b005b3480156101a957600080fd5b506101c460048036038101906101bf919061376a565b610b2f565b6040516101d19190613882565b60405180910390f35b3480156101e657600080fd5b5061020160048036038101906101fc919061376a565b610ca9565b005b34801561020f57600080fd5b5061021861105e565b60405161022591906138fc565b60405180910390f35b34801561023a57600080fd5b50610243611084565b6040516102509190613938565b60405180910390f35b34801561026557600080fd5b50610280600480360381019061027b91906139b8565b6110aa565b005b34801561028e57600080fd5b50610297611931565b6040516102a49190613882565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf91906137f5565b611937565b005b3480156102e257600080fd5b506102fd60048036038101906102f89190613a2c565b611afd565b005b34801561030b57600080fd5b50610314611c39565b604051610325959493929190613aa5565b60405180910390f35b34801561033a57600080fd5b50610343611c78565b6040516103509190613b19565b60405180910390f35b34801561036557600080fd5b5061036e611c9e565b60405161037b9190613b4f565b60405180910390f35b34801561039057600080fd5b50610399611cb1565b005b3480156103a757600080fd5b506103c260048036038101906103bd919061376a565b611f19565b005b3480156103d057600080fd5b506103eb60048036038101906103e6919061376a565b6125b8565b005b3480156103f957600080fd5b50610414600480360381019061040f9190613b6a565b612a19565b005b34801561042257600080fd5b5061043d60048036038101906104389190613c1e565b6132db565b005b34801561044b57600080fd5b506104666004803603810190610461919061376a565b613423565b6040516104739190613e57565b60405180910390f35b34801561048857600080fd5b506104a3600480360381019061049e91906137f5565b6134d3565b6040516104b09190613882565b60405180910390f35b600060169054906101000a900460ff16610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff90613efc565b60405180910390fd5b806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b81526004016105669190613882565b600060405180830381865afa158015610583573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105ac9190614167565b905060008160000151116105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90614222565b60405180910390fd5b826000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b81526004016106539190613882565b600060405180830381865afa158015610670573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106999190614167565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070490614222565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c876040518263ffffffff1660e01b815260040161076a9190613882565b600060405180830381865afa158015610787573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b09190614167565b9050600160038111156107c6576107c5613d48565b5b816060015160038111156107dd576107dc613d48565b5b1461081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610814906142b4565b60405180910390fd5b60028160600190600381111561083657610835613d48565b5b9081600381111561084a57610849613d48565b5b81525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663470f9c78826040518263ffffffff1660e01b81526004016108a99190613e57565b600060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050507fe0b00c447dcbf94bbc6376b9d59fc6d4df9cacab900106a33efaff616af9ccd88660405161090a9190613882565b60405180910390a1505050505050565b803373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610989576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098090613efc565b60405180910390fd5b34600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109d89190614303565b925050819055507fe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c48234604051610a10929190614346565b60405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac4919061436f565b73ffffffffffffffffffffffffffffffffffffffff1614610b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b11906143e8565b60405180910390fd5b8060038181610b2991906146a4565b90505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c846040518263ffffffff1660e01b8152600401610b8d9190613882565b600060405180830381865afa158015610baa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bd39190614167565b9050806080015115610be9576001915050610ca4565b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390614222565b60405180910390fd5b60086000826020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150505b919050565b600060169054906101000a900460ff16610cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cef90613efc565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90613efc565b60405180910390fd5b806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b8152600401610dc49190613882565b600060405180830381865afa158015610de1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e0a9190614167565b90506000816000015111610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90614222565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c856040518263ffffffff1660e01b8152600401610eb09190613882565b600060405180830381865afa158015610ecd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ef69190614167565b905060006003811115610f0c57610f0b613d48565b5b81606001516003811115610f2357610f22613d48565b5b14610f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5a90614724565b60405180910390fd5b600181606001906003811115610f7c57610f7b613d48565b5b90816003811115610f9057610f8f613d48565b5b81525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663470f9c78826040518263ffffffff1660e01b8152600401610fef9190613e57565b600060405180830381600087803b15801561100957600080fd5b505af115801561101d573d6000803e3d6000fd5b505050507f63c3eef58f270166e6342563b916ac7cff473140da1299c27e9a24353101f24e846040516110509190613882565b60405180910390a150505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82600060169054906101000a900460ff16156114f7573373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461112e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112590613efc565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bda009fe866040518263ffffffff1660e01b815260040161118b9190614744565b602060405180830381865afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc919061479d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361123d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123490614816565b60405180910390fd5b600060169054906101000a900460ff16801561127057506000600360040160009054906101000a900461ffff1661ffff16115b1561136a57600360040160009054906101000a900461ffff1661ffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f350ea26336040518263ffffffff1660e01b81526004016112e89190614744565b602060405180830381865afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190614836565b10611369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611360906148d5565b60405180910390fd5b5b600060019050600060169054906101000a900460ff161561138a57600090505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f033ba76040518060c001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184600381111561145257611451613d48565b5b815260200160001515815260200160008152506040518263ffffffff1660e01b81526004016114819190613e57565b600060405180830381600087803b15801561149b57600080fd5b505af11580156114af573d6000803e3d6000fd5b505050507f475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c338887876040516114e89493929190614942565b60405180910390a1505061192a565b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155c90613efc565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bda009fe866040518263ffffffff1660e01b81526004016115c29190614744565b602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611603919061479d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166b90614816565b60405180910390fd5b600060169054906101000a900460ff1680156116a757506000600360040160009054906101000a900461ffff1661ffff16115b156117a157600360040160009054906101000a900461ffff1661ffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f350ea26336040518263ffffffff1660e01b815260040161171f9190614744565b602060405180830381865afa15801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190614836565b106117a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611797906148d5565b60405180910390fd5b5b600060019050600060169054906101000a900460ff16156117c157600090505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f033ba76040518060c001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184600381111561188957611888613d48565b5b815260200160001515815260200160008152506040518263ffffffff1660e01b81526004016118b89190613e57565b600060405180830381600087803b1580156118d257600080fd5b505af11580156118e6573d6000803e3d6000fd5b505050507f475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c3388878760405161191f9493929190614942565b60405180910390a150505b5050505050565b60095481565b803373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146119a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199d90613efc565b60405180910390fd5b60003390506000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a29906149ce565b60405180910390fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611abd573d6000803e3d6000fd5b507fddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f18282604051611aef929190614a0f565b60405180910390a150505050565b813373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6390613efc565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7beb8c784846040518363ffffffff1660e01b8152600401611bc9929190614a38565b600060405180830381600087803b158015611be357600080fd5b505af1158015611bf7573d6000803e3d6000fd5b505050507f812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba3548383604051611c2c929190614a38565b60405180910390a1505050565b60038060000154908060010160009054906101000a900460ff16908060020154908060030154908060040160009054906101000a900461ffff16905085565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060169054906101000a900460ff1681565b600060095411611cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ced90614aad565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7e90614b3f565b60405180910390fd5b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e19919061436f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8190614bd1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6009549081150290604051600060405180830381858888f19350505050158015611ed2573d6000803e3d6000fd5b5060006009819055507f8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e50316181600954604051611f0e929190614a0f565b60405180910390a150565b806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b8152600401611f779190613882565b600060405180830381865afa158015611f94573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611fbd9190614167565b90506000816000015111612006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffd90614222565b60405180910390fd5b82600060169054906101000a900460ff161561233e576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b81526004016120799190613882565b600060405180830381865afa158015612096573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120bf9190614167565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614612133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212a90613efc565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c876040518263ffffffff1660e01b81526004016121909190613882565b600060405180830381865afa1580156121ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121d69190614167565b90506003808111156121eb576121ea613d48565b5b8160600151600381111561220257612201613d48565b5b03612242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223990614c63565b60405180910390fd5b60038160600190600381111561225b5761225a613d48565b5b9081600381111561226f5761226e613d48565b5b81525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663470f9c78826040518263ffffffff1660e01b81526004016122ce9190613e57565b600060405180830381600087803b1580156122e857600080fd5b505af11580156122fc573d6000803e3d6000fd5b505050507f5f576edaec67ed167152281963c0f265684ba9bf94b02241afbbccdd7c59e0998660405161232f9190613882565b60405180910390a150506125b2565b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146123ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a390613efc565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c866040518263ffffffff1660e01b81526004016124099190613882565b600060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061244f9190614167565b905060038081111561246457612463613d48565b5b8160600151600381111561247b5761247a613d48565b5b036124bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b290614c63565b60405180910390fd5b6003816060019060038111156124d4576124d3613d48565b5b908160038111156124e8576124e7613d48565b5b81525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663470f9c78826040518263ffffffff1660e01b81526004016125479190613e57565b600060405180830381600087803b15801561256157600080fd5b505af1158015612575573d6000803e3d6000fd5b505050507f5f576edaec67ed167152281963c0f265684ba9bf94b02241afbbccdd7c59e099856040516125a89190613882565b60405180910390a1505b50505050565b600060169054906101000a900460ff16612607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fe90613efc565b60405180910390fd5b806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b81526004016126659190613882565b600060405180830381865afa158015612682573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126ab9190614167565b905060008160000151116126f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126eb90614222565b60405180910390fd5b826000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b81526004016127529190613882565b600060405180830381865afa15801561276f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127989190614167565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461280c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280390614222565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c876040518263ffffffff1660e01b81526004016128699190613882565b600060405180830381865afa158015612886573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128af9190614167565b9050600260038111156128c5576128c4613d48565b5b816060015160038111156128dc576128db613d48565b5b1461291c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291390614cf5565b60405180910390fd5b60018160600190600381111561293557612934613d48565b5b9081600381111561294957612948613d48565b5b81525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663470f9c78826040518263ffffffff1660e01b81526004016129a89190613e57565b600060405180830381600087803b1580156129c257600080fd5b505af11580156129d6573d6000803e3d6000fd5b505050507ff9777a3853ed384d1ed462ecd8a0930375e3a4bbb8329a0a0af79a7ba6b5a2d986604051612a099190613882565b60405180910390a1505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac1919061436f565b73ffffffffffffffffffffffffffffffffffffffff1614612b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0e906143e8565b60405180910390fd5b846000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b8152600401612b759190613882565b600060405180830381865afa158015612b92573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612bbb9190614167565b90506000816000015111612c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bfb90614222565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c896040518263ffffffff1660e01b8152600401612c619190613882565b600060405180830381865afa158015612c7e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ca79190614167565b90506000816000015111612cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ce790614d61565b60405180910390fd5b60016003811115612d0457612d03613d48565b5b81606001516003811115612d1b57612d1a613d48565b5b14612d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5290614df3565b60405180910390fd5b8060800151612e5957600060086000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de190614e85565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603612e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4f90613efc565b60405180910390fd5b5b60005a905060008573ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603612ee957612ee289878a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061351c565b905061305a565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bda009fe85602001516040518263ffffffff1660e01b8152600401612f4a9190614744565b602060405180830381865afa158015612f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b919061479d565b90506130568a826040518060400160405280601e81526020017f706572666f726d2875696e743235362c616464726573732c62797465732900008152508e8b8e8e604051602401612fdf9493929190614ea5565b60405160208183030381529060405290604051612ffc9190614f2c565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061351c565b9150505b5a826130669190614f43565b915060008290506000600360000154111561308f576003600001548161308c9190614303565b90505b6000600360010160009054906101000a900460ff1660ff1611156130dc57600360010160009054906101000a900460ff1660ff16816130ce9190614fa6565b816130d99190614303565b90505b3a816130e89190614fd7565b905083608001516131ed578060086000866020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317090614e85565b60405180910390fd5b8060086000866020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131cc9190614f43565b9250508190555080600960008282546131e59190614303565b925050819055505b808460a0018181516131ff9190614303565b91508181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663470f9c78856040518263ffffffff1660e01b81526004016132619190613e57565b600060405180830381600087803b15801561327b57600080fd5b505af115801561328f573d6000803e3d6000fd5b505050507fc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e01058b82846040516132c693929190615019565b60405180910390a15050505050505050505050565b60006132e76001613569565b9050801561330b576001600060016101000a81548160ff0219169083151502179055505b85600060166101000a81548160ff02191690831515021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506133b083613659565b81600381816133bf91906146a4565b905050801561341b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051613412919061508b565b60405180910390a15b505050505050565b61342b6136c0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eec7b03c836040518263ffffffff1660e01b81526004016134869190613882565b600060405180830381865afa1580156134a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906134cc9190614167565b9050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60005a61138881101561352e57600080fd5b61138881039050846040820482031161354657600080fd5b833b61355157600080fd5b6000808451602086016000888af19150509392505050565b60008060019054906101000a900460ff16156135e05760018260ff1614801561359857506135963061369d565b155b6135d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ce90615118565b60405180910390fd5b60009050613654565b8160ff1660008054906101000a900460ff1660ff1610613635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161362c90615118565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000600381111561370a57613709613d48565b5b8152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61374781613734565b811461375257600080fd5b50565b6000813590506137648161373e565b92915050565b6000602082840312156137805761377f61372a565b5b600061378e84828501613755565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006137c282613797565b9050919050565b6137d2816137b7565b81146137dd57600080fd5b50565b6000813590506137ef816137c9565b92915050565b60006020828403121561380b5761380a61372a565b5b6000613819848285016137e0565b91505092915050565b600080fd5b600060a0828403121561383d5761383c613822565b5b81905092915050565b600060a0828403121561385c5761385b61372a565b5b600061386a84828501613827565b91505092915050565b61387c81613734565b82525050565b60006020820190506138976000830184613873565b92915050565b6000819050919050565b60006138c26138bd6138b884613797565b61389d565b613797565b9050919050565b60006138d4826138a7565b9050919050565b60006138e6826138c9565b9050919050565b6138f6816138db565b82525050565b600060208201905061391160008301846138ed565b92915050565b6000613922826138c9565b9050919050565b61393281613917565b82525050565b600060208201905061394d6000830184613929565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261397857613977613953565b5b8235905067ffffffffffffffff81111561399557613994613958565b5b6020830191508360018202830111156139b1576139b061395d565b5b9250929050565b600080600080606085870312156139d2576139d161372a565b5b60006139e087828801613755565b94505060206139f1878288016137e0565b935050604085013567ffffffffffffffff811115613a1257613a1161372f565b5b613a1e87828801613962565b925092505092959194509250565b60008060408385031215613a4357613a4261372a565b5b6000613a51858286016137e0565b9250506020613a62858286016137e0565b9150509250929050565b600060ff82169050919050565b613a8281613a6c565b82525050565b600061ffff82169050919050565b613a9f81613a88565b82525050565b600060a082019050613aba6000830188613873565b613ac76020830187613a79565b613ad46040830186613873565b613ae16060830185613873565b613aee6080830184613a96565b9695505050505050565b6000613b03826138c9565b9050919050565b613b1381613af8565b82525050565b6000602082019050613b2e6000830184613b0a565b92915050565b60008115159050919050565b613b4981613b34565b82525050565b6000602082019050613b646000830184613b40565b92915050565b600080600080600060808688031215613b8657613b8561372a565b5b6000613b9488828901613755565b9550506020613ba588828901613755565b945050604086013567ffffffffffffffff811115613bc657613bc561372f565b5b613bd288828901613962565b93509350506060613be5888289016137e0565b9150509295509295909350565b613bfb81613b34565b8114613c0657600080fd5b50565b600081359050613c1881613bf2565b92915050565b60008060008060006101208688031215613c3b57613c3a61372a565b5b6000613c4988828901613c09565b9550506020613c5a888289016137e0565b9450506040613c6b888289016137e0565b9350506060613c7c888289016137e0565b9250506080613c8d88828901613827565b9150509295509295909350565b613ca381613734565b82525050565b613cb2816137b7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cf2578082015181840152602081019050613cd7565b60008484015250505050565b6000601f19601f8301169050919050565b6000613d1a82613cb8565b613d248185613cc3565b9350613d34818560208601613cd4565b613d3d81613cfe565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613d8857613d87613d48565b5b50565b6000819050613d9982613d77565b919050565b6000613da982613d8b565b9050919050565b613db981613d9e565b82525050565b613dc881613b34565b82525050565b600060c083016000830151613de66000860182613c9a565b506020830151613df96020860182613ca9565b5060408301518482036040860152613e118282613d0f565b9150506060830151613e266060860182613db0565b506080830151613e396080860182613dbf565b5060a0830151613e4c60a0860182613c9a565b508091505092915050565b60006020820190508181036000830152613e718184613dce565b905092915050565b600082825260208201905092915050565b7f52656769737472793a206f7065726174696f6e206973206e6f74207065726d6960008201527f7474656400000000000000000000000000000000000000000000000000000000602082015250565b6000613ee6602483613e79565b9150613ef182613e8a565b604082019050919050565b60006020820190508181036000830152613f1581613ed9565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f5982613cfe565b810181811067ffffffffffffffff82111715613f7857613f77613f21565b5b80604052505050565b6000613f8b613720565b9050613f978282613f50565b919050565b600080fd5b600081519050613fb08161373e565b92915050565b600081519050613fc5816137c9565b92915050565b600080fd5b600067ffffffffffffffff821115613feb57613fea613f21565b5b613ff482613cfe565b9050602081019050919050565b600061401461400f84613fd0565b613f81565b9050828152602081018484840111156140305761402f613fcb565b5b61403b848285613cd4565b509392505050565b600082601f83011261405857614057613953565b5b8151614068848260208601614001565b91505092915050565b6004811061407e57600080fd5b50565b60008151905061409081614071565b92915050565b6000815190506140a581613bf2565b92915050565b600060c082840312156140c1576140c0613f1c565b5b6140cb60c0613f81565b905060006140db84828501613fa1565b60008301525060206140ef84828501613fb6565b602083015250604082015167ffffffffffffffff81111561411357614112613f9c565b5b61411f84828501614043565b604083015250606061413384828501614081565b606083015250608061414784828501614096565b60808301525060a061415b84828501613fa1565b60a08301525092915050565b60006020828403121561417d5761417c61372a565b5b600082015167ffffffffffffffff81111561419b5761419a61372f565b5b6141a7848285016140ab565b91505092915050565b7f52656769737472793a20776f726b666c6f7720646f6573206e6f74206578697360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061420c602183613e79565b9150614217826141b0565b604082019050919050565b6000602082019050818103600083015261423b816141ff565b9050919050565b7f52656769737472793a206f6e6c792061637469766520776f726b666c6f77732060008201527f636f756c64206265207061757365640000000000000000000000000000000000602082015250565b600061429e602f83613e79565b91506142a982614242565b604082019050919050565b600060208201905081810360008301526142cd81614291565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061430e82613734565b915061431983613734565b9250828201905080821115614331576143306142d4565b5b92915050565b614340816137b7565b82525050565b600060408201905061435b6000830185614337565b6143686020830184613873565b9392505050565b6000602082840312156143855761438461372a565b5b600061439384828501613fb6565b91505092915050565b7f5369676e65724f776e61626c653a206f6e6c79207369676e6572000000000000600082015250565b60006143d2601a83613e79565b91506143dd8261439c565b602082019050919050565b60006020820190508181036000830152614401816143c5565b9050919050565b600081356144158161373e565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6144578461441e565b9350801983169250808416831791505092915050565b600061448861448361447e84613734565b61389d565b613734565b9050919050565b6000819050919050565b6144a28261446d565b6144b56144ae8261448f565b835461442b565b8255505050565b6144c581613a6c565b81146144d057600080fd5b50565b600081356144e0816144bc565b80915050919050565b600060ff6144f68461441e565b9350801983169250808416831791505092915050565b600061452761452261451d84613a6c565b61389d565b613a6c565b9050919050565b6000819050919050565b6145418261450c565b61455461454d8261452e565b83546144e9565b8255505050565b61456481613a88565b811461456f57600080fd5b50565b6000813561457f8161455b565b80915050919050565b600061ffff6145968461441e565b9350801983169250808416831791505092915050565b60006145c76145c26145bd84613a88565b61389d565b613a88565b9050919050565b6000819050919050565b6145e1826145ac565b6145f46145ed826145ce565b8354614588565b8255505050565b60008101600083018061460d81614408565b90506146198184614499565b50505060018101602083018061462e816144d3565b905061463a8184614538565b50505060028101604083018061464f81614408565b905061465b8184614499565b50505060038101606083018061467081614408565b905061467c8184614499565b50505060048101608083018061469181614572565b905061469d81846145d8565b5050505050565b6146ae82826145fb565b5050565b7f52656769737472793a20776f726b666c6f77206d7573742062652070656e646960008201527f6e67000000000000000000000000000000000000000000000000000000000000602082015250565b600061470e602283613e79565b9150614719826146b2565b604082019050919050565b6000602082019050818103600083015261473d81614701565b9050919050565b60006020820190506147596000830184614337565b92915050565b600061476a826137b7565b9050919050565b61477a8161475f565b811461478557600080fd5b50565b60008151905061479781614771565b92915050565b6000602082840312156147b3576147b261372a565b5b60006147c184828501614788565b91505092915050565b7f52656769737472793a2067617465776179206e6f7420666f756e640000000000600082015250565b6000614800601b83613e79565b915061480b826147ca565b602082019050919050565b6000602082019050818103600083015261482f816147f3565b9050919050565b60006020828403121561484c5761484b61372a565b5b600061485a84828501613fa1565b91505092915050565b7f52656769737472793a2072656163686564206d617820776f726b666c6f77732060008201527f6361706163697479000000000000000000000000000000000000000000000000602082015250565b60006148bf602883613e79565b91506148ca82614863565b604082019050919050565b600060208201905081810360008301526148ee816148b2565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b600061492183856148f5565b935061492e838584614906565b61493783613cfe565b840190509392505050565b60006060820190506149576000830187614337565b6149646020830186613873565b8181036040830152614977818486614915565b905095945050505050565b7f52656769737472793a206e6f2062616c616e636520746f207769746864726177600082015250565b60006149b8602083613e79565b91506149c382614982565b602082019050919050565b600060208201905081810360008301526149e7816149ab565b9050919050565b60006149f9826138c9565b9050919050565b614a09816149ee565b82525050565b6000604082019050614a246000830185614a00565b614a316020830184613873565b9392505050565b6000604082019050614a4d6000830185614337565b614a5a6020830184614337565b9392505050565b7f52656769737472793a206e6f7468696e6720746f207769746864726177000000600082015250565b6000614a97601d83613e79565b9150614aa282614a61565b602082019050919050565b60006020820190508181036000830152614ac681614a8a565b9050919050565b7f52656769737472793a207369676e65722073746f72616765206164647265737360008201527f206973206e6f7420737065636966696564000000000000000000000000000000602082015250565b6000614b29603183613e79565b9150614b3482614acd565b604082019050919050565b60006020820190508181036000830152614b5881614b1c565b9050919050565b7f52656769737472793a207769746864726177616c20616464726573732069732060008201527f6e6f742073706563696669656400000000000000000000000000000000000000602082015250565b6000614bbb602d83613e79565b9150614bc682614b5f565b604082019050919050565b60006020820190508181036000830152614bea81614bae565b9050919050565b7f52656769737472793a20776f726b666c6f7720697320616c726561647920636160008201527f6e63656c6c656400000000000000000000000000000000000000000000000000602082015250565b6000614c4d602783613e79565b9150614c5882614bf1565b604082019050919050565b60006020820190508181036000830152614c7c81614c40565b9050919050565b7f52656769737472793a206f6e6c792070617573656420776f726b666c6f77732060008201527f636f756c6420626520726573756d656400000000000000000000000000000000602082015250565b6000614cdf603083613e79565b9150614cea82614c83565b604082019050919050565b60006020820190508181036000830152614d0e81614cd2565b9050919050565b7f52656769737472793a20776f726b666c6f77206e6f7420666f756e6400000000600082015250565b6000614d4b601c83613e79565b9150614d5682614d15565b602082019050919050565b60006020820190508181036000830152614d7a81614d3e565b9050919050565b7f52656769737472793a20776f726b666c6f77206d75737420626520616374697660008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000614ddd602183613e79565b9150614de882614d81565b604082019050919050565b60006020820190508181036000830152614e0c81614dd0565b9050919050565b7f52656769737472793a206e6f7420656e6f7567682066756e6473206f6e20626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b6000614e6f602583613e79565b9150614e7a82614e13565b604082019050919050565b60006020820190508181036000830152614e9e81614e62565b9050919050565b6000606082019050614eba6000830187613873565b614ec76020830186614337565b8181036040830152614eda818486614915565b905095945050505050565b600081519050919050565b600081905092915050565b6000614f0682614ee5565b614f108185614ef0565b9350614f20818560208601613cd4565b80840191505092915050565b6000614f388284614efb565b915081905092915050565b6000614f4e82613734565b9150614f5983613734565b9250828203905081811115614f7157614f706142d4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614fb182613734565b9150614fbc83613734565b925082614fcc57614fcb614f77565b5b828204905092915050565b6000614fe282613734565b9150614fed83613734565b9250828202614ffb81613734565b91508282048414831517615012576150116142d4565b5b5092915050565b600060608201905061502e6000830186613873565b61503b6020830185613873565b6150486040830184613b40565b949350505050565b6000819050919050565b600061507561507061506b84615050565b61389d565b613a6c565b9050919050565b6150858161505a565b82525050565b60006020820190506150a0600083018461507c565b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615102602e83613e79565b915061510d826150a6565b604082019050919050565b60006020820190508181036000830152615131816150f5565b905091905056fea264697066735822122091820468da2b70c96cd86021e0136e26b74432cfa33968308cdc3190f17b4d3964736f6c63430008120033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 performanceOverhead, uint8 performancePremiumThreshold, uint256 registrationOverhead, uint256 cancellationOverhead, uint16 maxWorkflowsPerAccount)
func (_Registry *RegistryCaller) Config(opts *bind.CallOpts) (struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		PerformanceOverhead         *big.Int
		PerformancePremiumThreshold uint8
		RegistrationOverhead        *big.Int
		CancellationOverhead        *big.Int
		MaxWorkflowsPerAccount      uint16
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PerformanceOverhead = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PerformancePremiumThreshold = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.RegistrationOverhead = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CancellationOverhead = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.MaxWorkflowsPerAccount = *abi.ConvertType(out[4], new(uint16)).(*uint16)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 performanceOverhead, uint8 performancePremiumThreshold, uint256 registrationOverhead, uint256 cancellationOverhead, uint16 maxWorkflowsPerAccount)
func (_Registry *RegistrySession) Config() (struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}, error) {
	return _Registry.Contract.Config(&_Registry.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 performanceOverhead, uint8 performancePremiumThreshold, uint256 registrationOverhead, uint256 cancellationOverhead, uint16 maxWorkflowsPerAccount)
func (_Registry *RegistryCallerSession) Config() (struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}, error) {
	return _Registry.Contract.Config(&_Registry.CallOpts)
}

// GatewayStorage is a free data retrieval call binding the contract method 0xaf011ac7.
//
// Solidity: function gatewayStorage() view returns(address)
func (_Registry *RegistryCaller) GatewayStorage(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "gatewayStorage")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GatewayStorage is a free data retrieval call binding the contract method 0xaf011ac7.
//
// Solidity: function gatewayStorage() view returns(address)
func (_Registry *RegistrySession) GatewayStorage() (common.Address, error) {
	return _Registry.Contract.GatewayStorage(&_Registry.CallOpts)
}

// GatewayStorage is a free data retrieval call binding the contract method 0xaf011ac7.
//
// Solidity: function gatewayStorage() view returns(address)
func (_Registry *RegistryCallerSession) GatewayStorage() (common.Address, error) {
	return _Registry.Contract.GatewayStorage(&_Registry.CallOpts)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address addr) view returns(uint256 balance)
func (_Registry *RegistryCaller) GetBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getBalance", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address addr) view returns(uint256 balance)
func (_Registry *RegistrySession) GetBalance(addr common.Address) (*big.Int, error) {
	return _Registry.Contract.GetBalance(&_Registry.CallOpts, addr)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address addr) view returns(uint256 balance)
func (_Registry *RegistryCallerSession) GetBalance(addr common.Address) (*big.Int, error) {
	return _Registry.Contract.GetBalance(&_Registry.CallOpts, addr)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256) workflow)
func (_Registry *RegistryCaller) GetWorkflow(opts *bind.CallOpts, id *big.Int) (Workflow, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflow", id)

	if err != nil {
		return *new(Workflow), err
	}

	out0 := *abi.ConvertType(out[0], new(Workflow)).(*Workflow)

	return out0, err

}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256) workflow)
func (_Registry *RegistrySession) GetWorkflow(id *big.Int) (Workflow, error) {
	return _Registry.Contract.GetWorkflow(&_Registry.CallOpts, id)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256) workflow)
func (_Registry *RegistryCallerSession) GetWorkflow(id *big.Int) (Workflow, error) {
	return _Registry.Contract.GetWorkflow(&_Registry.CallOpts, id)
}

// GetWorkflowOwnerBalance is a free data retrieval call binding the contract method 0x411b3d4b.
//
// Solidity: function getWorkflowOwnerBalance(uint256 id) view returns(uint256)
func (_Registry *RegistryCaller) GetWorkflowOwnerBalance(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowOwnerBalance", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWorkflowOwnerBalance is a free data retrieval call binding the contract method 0x411b3d4b.
//
// Solidity: function getWorkflowOwnerBalance(uint256 id) view returns(uint256)
func (_Registry *RegistrySession) GetWorkflowOwnerBalance(id *big.Int) (*big.Int, error) {
	return _Registry.Contract.GetWorkflowOwnerBalance(&_Registry.CallOpts, id)
}

// GetWorkflowOwnerBalance is a free data retrieval call binding the contract method 0x411b3d4b.
//
// Solidity: function getWorkflowOwnerBalance(uint256 id) view returns(uint256)
func (_Registry *RegistryCallerSession) GetWorkflowOwnerBalance(id *big.Int) (*big.Int, error) {
	return _Registry.Contract.GetWorkflowOwnerBalance(&_Registry.CallOpts, id)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistryCaller) IsMainChain(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isMainChain")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistrySession) IsMainChain() (bool, error) {
	return _Registry.Contract.IsMainChain(&_Registry.CallOpts)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistryCallerSession) IsMainChain() (bool, error) {
	return _Registry.Contract.IsMainChain(&_Registry.CallOpts)
}

// NetworkRewards is a free data retrieval call binding the contract method 0x6b5d4206.
//
// Solidity: function networkRewards() view returns(uint256)
func (_Registry *RegistryCaller) NetworkRewards(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "networkRewards")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NetworkRewards is a free data retrieval call binding the contract method 0x6b5d4206.
//
// Solidity: function networkRewards() view returns(uint256)
func (_Registry *RegistrySession) NetworkRewards() (*big.Int, error) {
	return _Registry.Contract.NetworkRewards(&_Registry.CallOpts)
}

// NetworkRewards is a free data retrieval call binding the contract method 0x6b5d4206.
//
// Solidity: function networkRewards() view returns(uint256)
func (_Registry *RegistryCallerSession) NetworkRewards() (*big.Int, error) {
	return _Registry.Contract.NetworkRewards(&_Registry.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistryCaller) SignerGetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "signerGetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistrySession) SignerGetter() (common.Address, error) {
	return _Registry.Contract.SignerGetter(&_Registry.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistryCallerSession) SignerGetter() (common.Address, error) {
	return _Registry.Contract.SignerGetter(&_Registry.CallOpts)
}

// WorkflowStorage is a free data retrieval call binding the contract method 0x59e13cd3.
//
// Solidity: function workflowStorage() view returns(address)
func (_Registry *RegistryCaller) WorkflowStorage(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "workflowStorage")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WorkflowStorage is a free data retrieval call binding the contract method 0x59e13cd3.
//
// Solidity: function workflowStorage() view returns(address)
func (_Registry *RegistrySession) WorkflowStorage() (common.Address, error) {
	return _Registry.Contract.WorkflowStorage(&_Registry.CallOpts)
}

// WorkflowStorage is a free data retrieval call binding the contract method 0x59e13cd3.
//
// Solidity: function workflowStorage() view returns(address)
func (_Registry *RegistryCallerSession) WorkflowStorage() (common.Address, error) {
	return _Registry.Contract.WorkflowStorage(&_Registry.CallOpts)
}

// ActivateWorkflow is a paid mutator transaction binding the contract method 0x5902c15e.
//
// Solidity: function activateWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) ActivateWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "activateWorkflow", id)
}

// ActivateWorkflow is a paid mutator transaction binding the contract method 0x5902c15e.
//
// Solidity: function activateWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) ActivateWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflow(&_Registry.TransactOpts, id)
}

// ActivateWorkflow is a paid mutator transaction binding the contract method 0x5902c15e.
//
// Solidity: function activateWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) ActivateWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflow(&_Registry.TransactOpts, id)
}

// CancelWorkflow is a paid mutator transaction binding the contract method 0xd0c81e98.
//
// Solidity: function cancelWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) CancelWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "cancelWorkflow", id)
}

// CancelWorkflow is a paid mutator transaction binding the contract method 0xd0c81e98.
//
// Solidity: function cancelWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) CancelWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflow(&_Registry.TransactOpts, id)
}

// CancelWorkflow is a paid mutator transaction binding the contract method 0xd0c81e98.
//
// Solidity: function cancelWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) CancelWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflow(&_Registry.TransactOpts, id)
}

// FundBalance is a paid mutator transaction binding the contract method 0x0ad5a865.
//
// Solidity: function fundBalance(address addr) payable returns()
func (_Registry *RegistryTransactor) FundBalance(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "fundBalance", addr)
}

// FundBalance is a paid mutator transaction binding the contract method 0x0ad5a865.
//
// Solidity: function fundBalance(address addr) payable returns()
func (_Registry *RegistrySession) FundBalance(addr common.Address) (*types.Transaction, error) {
	return _Registry.Contract.FundBalance(&_Registry.TransactOpts, addr)
}

// FundBalance is a paid mutator transaction binding the contract method 0x0ad5a865.
//
// Solidity: function fundBalance(address addr) payable returns()
func (_Registry *RegistryTransactorSession) FundBalance(addr common.Address) (*types.Transaction, error) {
	return _Registry.Contract.FundBalance(&_Registry.TransactOpts, addr)
}

// Initialize is a paid mutator transaction binding the contract method 0xe3870a24.
//
// Solidity: function initialize(bool _isMainChain, address _workflowStorage, address _gatewayStorage, address _signerGetterAddress, (uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _isMainChain bool, _workflowStorage common.Address, _gatewayStorage common.Address, _signerGetterAddress common.Address, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _isMainChain, _workflowStorage, _gatewayStorage, _signerGetterAddress, _config)
}

// Initialize is a paid mutator transaction binding the contract method 0xe3870a24.
//
// Solidity: function initialize(bool _isMainChain, address _workflowStorage, address _gatewayStorage, address _signerGetterAddress, (uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistrySession) Initialize(_isMainChain bool, _workflowStorage common.Address, _gatewayStorage common.Address, _signerGetterAddress common.Address, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _isMainChain, _workflowStorage, _gatewayStorage, _signerGetterAddress, _config)
}

// Initialize is a paid mutator transaction binding the contract method 0xe3870a24.
//
// Solidity: function initialize(bool _isMainChain, address _workflowStorage, address _gatewayStorage, address _signerGetterAddress, (uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactorSession) Initialize(_isMainChain bool, _workflowStorage common.Address, _gatewayStorage common.Address, _signerGetterAddress common.Address, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _isMainChain, _workflowStorage, _gatewayStorage, _signerGetterAddress, _config)
}

// PauseWorkflow is a paid mutator transaction binding the contract method 0x0813ce96.
//
// Solidity: function pauseWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) PauseWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "pauseWorkflow", id)
}

// PauseWorkflow is a paid mutator transaction binding the contract method 0x0813ce96.
//
// Solidity: function pauseWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) PauseWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflow(&_Registry.TransactOpts, id)
}

// PauseWorkflow is a paid mutator transaction binding the contract method 0x0813ce96.
//
// Solidity: function pauseWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) PauseWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflow(&_Registry.TransactOpts, id)
}

// Perform is a paid mutator transaction binding the contract method 0xd6bb757b.
//
// Solidity: function perform(uint256 workflowId, uint256 gasAmount, bytes data, address target) returns()
func (_Registry *RegistryTransactor) Perform(opts *bind.TransactOpts, workflowId *big.Int, gasAmount *big.Int, data []byte, target common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "perform", workflowId, gasAmount, data, target)
}

// Perform is a paid mutator transaction binding the contract method 0xd6bb757b.
//
// Solidity: function perform(uint256 workflowId, uint256 gasAmount, bytes data, address target) returns()
func (_Registry *RegistrySession) Perform(workflowId *big.Int, gasAmount *big.Int, data []byte, target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, workflowId, gasAmount, data, target)
}

// Perform is a paid mutator transaction binding the contract method 0xd6bb757b.
//
// Solidity: function perform(uint256 workflowId, uint256 gasAmount, bytes data, address target) returns()
func (_Registry *RegistryTransactorSession) Perform(workflowId *big.Int, gasAmount *big.Int, data []byte, target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, workflowId, gasAmount, data, target)
}

// RegisterWorkflow is a paid mutator transaction binding the contract method 0x663d4503.
//
// Solidity: function registerWorkflow(uint256 id, address owner, bytes hash) returns()
func (_Registry *RegistryTransactor) RegisterWorkflow(opts *bind.TransactOpts, id *big.Int, owner common.Address, hash []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerWorkflow", id, owner, hash)
}

// RegisterWorkflow is a paid mutator transaction binding the contract method 0x663d4503.
//
// Solidity: function registerWorkflow(uint256 id, address owner, bytes hash) returns()
func (_Registry *RegistrySession) RegisterWorkflow(id *big.Int, owner common.Address, hash []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflow(&_Registry.TransactOpts, id, owner, hash)
}

// RegisterWorkflow is a paid mutator transaction binding the contract method 0x663d4503.
//
// Solidity: function registerWorkflow(uint256 id, address owner, bytes hash) returns()
func (_Registry *RegistryTransactorSession) RegisterWorkflow(id *big.Int, owner common.Address, hash []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflow(&_Registry.TransactOpts, id, owner, hash)
}

// ResumeWorkflow is a paid mutator transaction binding the contract method 0xd692157b.
//
// Solidity: function resumeWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) ResumeWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "resumeWorkflow", id)
}

// ResumeWorkflow is a paid mutator transaction binding the contract method 0xd692157b.
//
// Solidity: function resumeWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) ResumeWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflow(&_Registry.TransactOpts, id)
}

// ResumeWorkflow is a paid mutator transaction binding the contract method 0xd692157b.
//
// Solidity: function resumeWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) ResumeWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflow(&_Registry.TransactOpts, id)
}

// SetConfig is a paid mutator transaction binding the contract method 0x2ad5d340.
//
// Solidity: function setConfig((uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactor) SetConfig(opts *bind.TransactOpts, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfig", _config)
}

// SetConfig is a paid mutator transaction binding the contract method 0x2ad5d340.
//
// Solidity: function setConfig((uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistrySession) SetConfig(_config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.SetConfig(&_Registry.TransactOpts, _config)
}

// SetConfig is a paid mutator transaction binding the contract method 0x2ad5d340.
//
// Solidity: function setConfig((uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactorSession) SetConfig(_config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.SetConfig(&_Registry.TransactOpts, _config)
}

// SetGateway is a paid mutator transaction binding the contract method 0x774c208a.
//
// Solidity: function setGateway(address owner, address gateway) returns()
func (_Registry *RegistryTransactor) SetGateway(opts *bind.TransactOpts, owner common.Address, gateway common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setGateway", owner, gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x774c208a.
//
// Solidity: function setGateway(address owner, address gateway) returns()
func (_Registry *RegistrySession) SetGateway(owner common.Address, gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, owner, gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x774c208a.
//
// Solidity: function setGateway(address owner, address gateway) returns()
func (_Registry *RegistryTransactorSession) SetGateway(owner common.Address, gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, owner, gateway)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x756af45f.
//
// Solidity: function withdrawBalance(address addr) returns()
func (_Registry *RegistryTransactor) WithdrawBalance(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "withdrawBalance", addr)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x756af45f.
//
// Solidity: function withdrawBalance(address addr) returns()
func (_Registry *RegistrySession) WithdrawBalance(addr common.Address) (*types.Transaction, error) {
	return _Registry.Contract.WithdrawBalance(&_Registry.TransactOpts, addr)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x756af45f.
//
// Solidity: function withdrawBalance(address addr) returns()
func (_Registry *RegistryTransactorSession) WithdrawBalance(addr common.Address) (*types.Transaction, error) {
	return _Registry.Contract.WithdrawBalance(&_Registry.TransactOpts, addr)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xc7b8981c.
//
// Solidity: function withdrawRewards() returns()
func (_Registry *RegistryTransactor) WithdrawRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "withdrawRewards")
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xc7b8981c.
//
// Solidity: function withdrawRewards() returns()
func (_Registry *RegistrySession) WithdrawRewards() (*types.Transaction, error) {
	return _Registry.Contract.WithdrawRewards(&_Registry.TransactOpts)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xc7b8981c.
//
// Solidity: function withdrawRewards() returns()
func (_Registry *RegistryTransactorSession) WithdrawRewards() (*types.Transaction, error) {
	return _Registry.Contract.WithdrawRewards(&_Registry.TransactOpts)
}

// RegistryBalanceFundedIterator is returned from FilterBalanceFunded and is used to iterate over the raw logs and unpacked data for BalanceFunded events raised by the Registry contract.
type RegistryBalanceFundedIterator struct {
	Event *RegistryBalanceFunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBalanceFundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBalanceFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBalanceFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBalanceFundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBalanceFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBalanceFunded represents a BalanceFunded event raised by the Registry contract.
type RegistryBalanceFunded struct {
	WorkflowOwner common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBalanceFunded is a free log retrieval operation binding the contract event 0xe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4.
//
// Solidity: event BalanceFunded(address workflowOwner, uint256 amount)
func (_Registry *RegistryFilterer) FilterBalanceFunded(opts *bind.FilterOpts) (*RegistryBalanceFundedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BalanceFunded")
	if err != nil {
		return nil, err
	}
	return &RegistryBalanceFundedIterator{contract: _Registry.contract, event: "BalanceFunded", logs: logs, sub: sub}, nil
}

// WatchBalanceFunded is a free log subscription operation binding the contract event 0xe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4.
//
// Solidity: event BalanceFunded(address workflowOwner, uint256 amount)
func (_Registry *RegistryFilterer) WatchBalanceFunded(opts *bind.WatchOpts, sink chan<- *RegistryBalanceFunded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BalanceFunded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBalanceFunded)
				if err := _Registry.contract.UnpackLog(event, "BalanceFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceFunded is a log parse operation binding the contract event 0xe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4.
//
// Solidity: event BalanceFunded(address workflowOwner, uint256 amount)
func (_Registry *RegistryFilterer) ParseBalanceFunded(log types.Log) (*RegistryBalanceFunded, error) {
	event := new(RegistryBalanceFunded)
	if err := _Registry.contract.UnpackLog(event, "BalanceFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryBalanceWithdrawnIterator is returned from FilterBalanceWithdrawn and is used to iterate over the raw logs and unpacked data for BalanceWithdrawn events raised by the Registry contract.
type RegistryBalanceWithdrawnIterator struct {
	Event *RegistryBalanceWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBalanceWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBalanceWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBalanceWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBalanceWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBalanceWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBalanceWithdrawn represents a BalanceWithdrawn event raised by the Registry contract.
type RegistryBalanceWithdrawn struct {
	WorkflowOwner common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBalanceWithdrawn is a free log retrieval operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address workflowOwner, uint256 amount)
func (_Registry *RegistryFilterer) FilterBalanceWithdrawn(opts *bind.FilterOpts) (*RegistryBalanceWithdrawnIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BalanceWithdrawn")
	if err != nil {
		return nil, err
	}
	return &RegistryBalanceWithdrawnIterator{contract: _Registry.contract, event: "BalanceWithdrawn", logs: logs, sub: sub}, nil
}

// WatchBalanceWithdrawn is a free log subscription operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address workflowOwner, uint256 amount)
func (_Registry *RegistryFilterer) WatchBalanceWithdrawn(opts *bind.WatchOpts, sink chan<- *RegistryBalanceWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BalanceWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBalanceWithdrawn)
				if err := _Registry.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceWithdrawn is a log parse operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address workflowOwner, uint256 amount)
func (_Registry *RegistryFilterer) ParseBalanceWithdrawn(log types.Log) (*RegistryBalanceWithdrawn, error) {
	event := new(RegistryBalanceWithdrawn)
	if err := _Registry.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryGatewaySetIterator is returned from FilterGatewaySet and is used to iterate over the raw logs and unpacked data for GatewaySet events raised by the Registry contract.
type RegistryGatewaySetIterator struct {
	Event *RegistryGatewaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryGatewaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryGatewaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryGatewaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryGatewaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryGatewaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryGatewaySet represents a GatewaySet event raised by the Registry contract.
type RegistryGatewaySet struct {
	WorkflowOwner common.Address
	Gateway       common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGatewaySet is a free log retrieval operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address workflowOwner, address gateway)
func (_Registry *RegistryFilterer) FilterGatewaySet(opts *bind.FilterOpts) (*RegistryGatewaySetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return &RegistryGatewaySetIterator{contract: _Registry.contract, event: "GatewaySet", logs: logs, sub: sub}, nil
}

// WatchGatewaySet is a free log subscription operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address workflowOwner, address gateway)
func (_Registry *RegistryFilterer) WatchGatewaySet(opts *bind.WatchOpts, sink chan<- *RegistryGatewaySet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryGatewaySet)
				if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGatewaySet is a log parse operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address workflowOwner, address gateway)
func (_Registry *RegistryFilterer) ParseGatewaySet(log types.Log) (*RegistryGatewaySet, error) {
	event := new(RegistryGatewaySet)
	if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Registry contract.
type RegistryInitializedIterator struct {
	Event *RegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInitialized represents a Initialized event raised by the Registry contract.
type RegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*RegistryInitializedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RegistryInitializedIterator{contract: _Registry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInitialized)
				if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) ParseInitialized(log types.Log) (*RegistryInitialized, error) {
	event := new(RegistryInitialized)
	if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPerformanceIterator is returned from FilterPerformance and is used to iterate over the raw logs and unpacked data for Performance events raised by the Registry contract.
type RegistryPerformanceIterator struct {
	Event *RegistryPerformance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPerformanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPerformance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPerformance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPerformanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPerformanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPerformance represents a Performance event raised by the Registry contract.
type RegistryPerformance struct {
	Id      *big.Int
	GasUsed *big.Int
	Success bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPerformance is a free log retrieval operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 id, uint256 gasUsed, bool success)
func (_Registry *RegistryFilterer) FilterPerformance(opts *bind.FilterOpts) (*RegistryPerformanceIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return &RegistryPerformanceIterator{contract: _Registry.contract, event: "Performance", logs: logs, sub: sub}, nil
}

// WatchPerformance is a free log subscription operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 id, uint256 gasUsed, bool success)
func (_Registry *RegistryFilterer) WatchPerformance(opts *bind.WatchOpts, sink chan<- *RegistryPerformance) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPerformance)
				if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePerformance is a log parse operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 id, uint256 gasUsed, bool success)
func (_Registry *RegistryFilterer) ParsePerformance(log types.Log) (*RegistryPerformance, error) {
	event := new(RegistryPerformance)
	if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRewardsWithdrawnIterator is returned from FilterRewardsWithdrawn and is used to iterate over the raw logs and unpacked data for RewardsWithdrawn events raised by the Registry contract.
type RegistryRewardsWithdrawnIterator struct {
	Event *RegistryRewardsWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRewardsWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRewardsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRewardsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRewardsWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRewardsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRewardsWithdrawn represents a RewardsWithdrawn event raised by the Registry contract.
type RegistryRewardsWithdrawn struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRewardsWithdrawn is a free log retrieval operation binding the contract event 0x8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e503161.
//
// Solidity: event RewardsWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) FilterRewardsWithdrawn(opts *bind.FilterOpts) (*RegistryRewardsWithdrawnIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RewardsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &RegistryRewardsWithdrawnIterator{contract: _Registry.contract, event: "RewardsWithdrawn", logs: logs, sub: sub}, nil
}

// WatchRewardsWithdrawn is a free log subscription operation binding the contract event 0x8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e503161.
//
// Solidity: event RewardsWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) WatchRewardsWithdrawn(opts *bind.WatchOpts, sink chan<- *RegistryRewardsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RewardsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRewardsWithdrawn)
				if err := _Registry.contract.UnpackLog(event, "RewardsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsWithdrawn is a log parse operation binding the contract event 0x8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e503161.
//
// Solidity: event RewardsWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) ParseRewardsWithdrawn(log types.Log) (*RegistryRewardsWithdrawn, error) {
	event := new(RegistryRewardsWithdrawn)
	if err := _Registry.contract.UnpackLog(event, "RewardsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowActivatedIterator is returned from FilterWorkflowActivated and is used to iterate over the raw logs and unpacked data for WorkflowActivated events raised by the Registry contract.
type RegistryWorkflowActivatedIterator struct {
	Event *RegistryWorkflowActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowActivated represents a WorkflowActivated event raised by the Registry contract.
type RegistryWorkflowActivated struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWorkflowActivated is a free log retrieval operation binding the contract event 0x63c3eef58f270166e6342563b916ac7cff473140da1299c27e9a24353101f24e.
//
// Solidity: event WorkflowActivated(uint256 id)
func (_Registry *RegistryFilterer) FilterWorkflowActivated(opts *bind.FilterOpts) (*RegistryWorkflowActivatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowActivated")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowActivatedIterator{contract: _Registry.contract, event: "WorkflowActivated", logs: logs, sub: sub}, nil
}

// WatchWorkflowActivated is a free log subscription operation binding the contract event 0x63c3eef58f270166e6342563b916ac7cff473140da1299c27e9a24353101f24e.
//
// Solidity: event WorkflowActivated(uint256 id)
func (_Registry *RegistryFilterer) WatchWorkflowActivated(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowActivated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowActivated)
				if err := _Registry.contract.UnpackLog(event, "WorkflowActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowActivated is a log parse operation binding the contract event 0x63c3eef58f270166e6342563b916ac7cff473140da1299c27e9a24353101f24e.
//
// Solidity: event WorkflowActivated(uint256 id)
func (_Registry *RegistryFilterer) ParseWorkflowActivated(log types.Log) (*RegistryWorkflowActivated, error) {
	event := new(RegistryWorkflowActivated)
	if err := _Registry.contract.UnpackLog(event, "WorkflowActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowCancelledIterator is returned from FilterWorkflowCancelled and is used to iterate over the raw logs and unpacked data for WorkflowCancelled events raised by the Registry contract.
type RegistryWorkflowCancelledIterator struct {
	Event *RegistryWorkflowCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowCancelled represents a WorkflowCancelled event raised by the Registry contract.
type RegistryWorkflowCancelled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWorkflowCancelled is a free log retrieval operation binding the contract event 0x5f576edaec67ed167152281963c0f265684ba9bf94b02241afbbccdd7c59e099.
//
// Solidity: event WorkflowCancelled(uint256 id)
func (_Registry *RegistryFilterer) FilterWorkflowCancelled(opts *bind.FilterOpts) (*RegistryWorkflowCancelledIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowCancelled")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowCancelledIterator{contract: _Registry.contract, event: "WorkflowCancelled", logs: logs, sub: sub}, nil
}

// WatchWorkflowCancelled is a free log subscription operation binding the contract event 0x5f576edaec67ed167152281963c0f265684ba9bf94b02241afbbccdd7c59e099.
//
// Solidity: event WorkflowCancelled(uint256 id)
func (_Registry *RegistryFilterer) WatchWorkflowCancelled(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowCancelled) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowCancelled)
				if err := _Registry.contract.UnpackLog(event, "WorkflowCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowCancelled is a log parse operation binding the contract event 0x5f576edaec67ed167152281963c0f265684ba9bf94b02241afbbccdd7c59e099.
//
// Solidity: event WorkflowCancelled(uint256 id)
func (_Registry *RegistryFilterer) ParseWorkflowCancelled(log types.Log) (*RegistryWorkflowCancelled, error) {
	event := new(RegistryWorkflowCancelled)
	if err := _Registry.contract.UnpackLog(event, "WorkflowCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowPausedIterator is returned from FilterWorkflowPaused and is used to iterate over the raw logs and unpacked data for WorkflowPaused events raised by the Registry contract.
type RegistryWorkflowPausedIterator struct {
	Event *RegistryWorkflowPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowPaused represents a WorkflowPaused event raised by the Registry contract.
type RegistryWorkflowPaused struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWorkflowPaused is a free log retrieval operation binding the contract event 0xe0b00c447dcbf94bbc6376b9d59fc6d4df9cacab900106a33efaff616af9ccd8.
//
// Solidity: event WorkflowPaused(uint256 id)
func (_Registry *RegistryFilterer) FilterWorkflowPaused(opts *bind.FilterOpts) (*RegistryWorkflowPausedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowPaused")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowPausedIterator{contract: _Registry.contract, event: "WorkflowPaused", logs: logs, sub: sub}, nil
}

// WatchWorkflowPaused is a free log subscription operation binding the contract event 0xe0b00c447dcbf94bbc6376b9d59fc6d4df9cacab900106a33efaff616af9ccd8.
//
// Solidity: event WorkflowPaused(uint256 id)
func (_Registry *RegistryFilterer) WatchWorkflowPaused(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowPaused) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowPaused)
				if err := _Registry.contract.UnpackLog(event, "WorkflowPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowPaused is a log parse operation binding the contract event 0xe0b00c447dcbf94bbc6376b9d59fc6d4df9cacab900106a33efaff616af9ccd8.
//
// Solidity: event WorkflowPaused(uint256 id)
func (_Registry *RegistryFilterer) ParseWorkflowPaused(log types.Log) (*RegistryWorkflowPaused, error) {
	event := new(RegistryWorkflowPaused)
	if err := _Registry.contract.UnpackLog(event, "WorkflowPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowRegisteredIterator is returned from FilterWorkflowRegistered and is used to iterate over the raw logs and unpacked data for WorkflowRegistered events raised by the Registry contract.
type RegistryWorkflowRegisteredIterator struct {
	Event *RegistryWorkflowRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowRegistered represents a WorkflowRegistered event raised by the Registry contract.
type RegistryWorkflowRegistered struct {
	Owner common.Address
	Id    *big.Int
	Hash  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWorkflowRegistered is a free log retrieval operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) FilterWorkflowRegistered(opts *bind.FilterOpts) (*RegistryWorkflowRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowRegisteredIterator{contract: _Registry.contract, event: "WorkflowRegistered", logs: logs, sub: sub}, nil
}

// WatchWorkflowRegistered is a free log subscription operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) WatchWorkflowRegistered(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowRegistered)
				if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowRegistered is a log parse operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) ParseWorkflowRegistered(log types.Log) (*RegistryWorkflowRegistered, error) {
	event := new(RegistryWorkflowRegistered)
	if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowResumedIterator is returned from FilterWorkflowResumed and is used to iterate over the raw logs and unpacked data for WorkflowResumed events raised by the Registry contract.
type RegistryWorkflowResumedIterator struct {
	Event *RegistryWorkflowResumed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowResumedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowResumed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowResumed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowResumedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowResumedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowResumed represents a WorkflowResumed event raised by the Registry contract.
type RegistryWorkflowResumed struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWorkflowResumed is a free log retrieval operation binding the contract event 0xf9777a3853ed384d1ed462ecd8a0930375e3a4bbb8329a0a0af79a7ba6b5a2d9.
//
// Solidity: event WorkflowResumed(uint256 id)
func (_Registry *RegistryFilterer) FilterWorkflowResumed(opts *bind.FilterOpts) (*RegistryWorkflowResumedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowResumed")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowResumedIterator{contract: _Registry.contract, event: "WorkflowResumed", logs: logs, sub: sub}, nil
}

// WatchWorkflowResumed is a free log subscription operation binding the contract event 0xf9777a3853ed384d1ed462ecd8a0930375e3a4bbb8329a0a0af79a7ba6b5a2d9.
//
// Solidity: event WorkflowResumed(uint256 id)
func (_Registry *RegistryFilterer) WatchWorkflowResumed(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowResumed) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowResumed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowResumed)
				if err := _Registry.contract.UnpackLog(event, "WorkflowResumed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowResumed is a log parse operation binding the contract event 0xf9777a3853ed384d1ed462ecd8a0930375e3a4bbb8329a0a0af79a7ba6b5a2d9.
//
// Solidity: event WorkflowResumed(uint256 id)
func (_Registry *RegistryFilterer) ParseWorkflowResumed(log types.Log) (*RegistryWorkflowResumed, error) {
	event := new(RegistryWorkflowResumed)
	if err := _Registry.contract.UnpackLog(event, "WorkflowResumed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
