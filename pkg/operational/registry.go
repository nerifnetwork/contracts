// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package operational

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryBalanceBalance is an auto generated low-level Go binding around an user-defined struct.
type RegistryBalanceBalance struct {
	User    common.Address
	Balance *big.Int
}

// RegistryConfig is an auto generated low-level Go binding around an user-defined struct.
type RegistryConfig struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}

// RegistryGatewayGateway is an auto generated low-level Go binding around an user-defined struct.
type RegistryGatewayGateway struct {
	Gateway common.Address
	Owner   common.Address
}

// Workflow is an auto generated low-level Go binding around an user-defined struct.
type Workflow struct {
	Id         *big.Int
	Owner      common.Address
	Hash       []byte
	Status     uint8
	IsInternal bool
	TotalSpent *big.Int
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"GatewaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Performance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"WorkflowRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"activateWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"performanceOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"performancePremiumThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"structRegistryBalance.Balance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"contractIGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGateways\",\"outputs\":[{\"components\":[{\"internalType\":\"contractIGateway\",\"name\":\"gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"structRegistryGateway.Gateway[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorkflow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorkflowOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorkflows\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMainChain\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_signerGetterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow[]\",\"name\":\"_internalWorkflows\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"performanceOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"performancePremiumThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"internalType\":\"structRegistry.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pauseWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"workflowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"registerWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"resumeWorkflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"performanceOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"performancePremiumThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"internalType\":\"structRegistry.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerGetter\",\"outputs\":[{\"internalType\":\"contractISignerAddress\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061571a80620000216000396000f3fe60806040526004361061013f5760003560e01c806379502c55116100b6578063d0c81e981161006f578063d0c81e98146103f2578063d692157b1461041b578063d6bb757b14610444578063d82778ce1461046d578063eec7b03c14610498578063f8b2cb4f146104d55761013f565b806379502c55146102f257806390646b4a1461032157806392141be81461034a578063b834f6fb14610373578063bda009fe1461039e578063c7b8981c146103db5761013f565b80635902c15e116101085780635902c15e146102085780635c211f88146102315780635fd8c7101461025c578063663d4503146102735780636b5d42061461029c5780637099588f146102c75761013f565b8062113e08146101445780630813ce961461016f5780632ad5d340146101985780633c067945146101c1578063411b3d4b146101cb575b600080fd5b34801561015057600080fd5b50610159610512565b60405161016691906136bf565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190613721565b6105d1565b005b3480156101a457600080fd5b506101bf60048036038101906101ba9190613772565b610828565b005b6101c961093b565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190613721565b610999565b6040516101ff91906137ae565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190613721565b610a44565b005b34801561023d57600080fd5b50610246610c87565b6040516102539190613828565b60405180910390f35b34801561026857600080fd5b50610271610cad565b005b34801561027f57600080fd5b5061029a600480360381019061029591906138d4565b610d91565b005b3480156102a857600080fd5b506102b1611342565b6040516102be91906137ae565b60405180910390f35b3480156102d357600080fd5b506102dc611348565b6040516102e99190613bb5565b60405180910390f35b3480156102fe57600080fd5b506103076114f9565b604051610318959493929190613c10565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190613c63565b611538565b005b34801561035657600080fd5b50610371600480360381019061036c9190613d12565b61157e565b005b34801561037f57600080fd5b5061038861169d565b6040516103959190613daa565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c09190613c63565b6116b0565b6040516103d29190613de6565b60405180910390f35b3480156103e757600080fd5b506103f0611760565b005b3480156103fe57600080fd5b5061041960048036038101906104149190613721565b6119c8565b005b34801561042757600080fd5b50610442600480360381019061043d9190613721565b611d83565b005b34801561045057600080fd5b5061046b60048036038101906104669190613e01565b611fda565b005b34801561047957600080fd5b506104826125dc565b60405161048f9190613f76565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba9190613721565b6126e7565b6040516104cc9190614021565b60405180910390f35b3480156104e157600080fd5b506104fc60048036038101906104f79190613c63565b612894565b60405161050991906137ae565b60405180910390f35b60606007805480602002602001604051908101604052809291908181526020016000905b828210156105c857838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190610536565b50505050905090565b600860009054906101000a900460ff16610620576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610617906140c6565b60405180910390fd5b80600061062c826126e7565b90506000816000015111610675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066c90614158565b60405180910390fd5b826000610681826126e7565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec90614158565b60405180910390fd5b6000610700866126e7565b90506001600381111561071657610715613a04565b5b8160600151600381111561072d5761072c613a04565b5b1461076d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610764906141ea565b60405180910390fd5b60028160600190600381111561078657610785613a04565b5b9081600381111561079a57610799613a04565b5b815250506107a781612925565b6107e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dd9061427c565b60405180910390fd5b7f873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa8660026040516108189291906142ab565b60405180910390a1505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d091906142e9565b73ffffffffffffffffffffffffffffffffffffffff1614610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90614362565b60405180910390fd5b8060098181610935919061461e565b90505050565b600061094633612894565b905061095d333483610958919061465b565b612a62565b7fe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4333460405161098e92919061469e565b60405180910390a150565b6000806109a5836126e7565b90508060800151156109bb576001915050610a3f565b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2590614158565b60405180910390fd5b610a3b8160200151612894565b9150505b919050565b600860009054906101000a900460ff16610a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8a906140c6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af8906140c6565b60405180910390fd5b806000610b0d826126e7565b90506000816000015111610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d90614158565b60405180910390fd5b6000610b61846126e7565b905060006003811115610b7757610b76613a04565b5b81606001516003811115610b8e57610b8d613a04565b5b14610bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc590614739565b60405180910390fd5b600181606001906003811115610be757610be6613a04565b5b90816003811115610bfb57610bfa613a04565b5b81525050610c0881612925565b610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e9061427c565b60405180910390fd5b7f873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa846001604051610c799291906142ab565b60405180910390a150505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390506000610cbd82612894565b905060008111610d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf9906147a5565b60405180910390fd5b610d0d826000612a62565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d53573d6000803e3d6000fd5b507fddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f18282604051610d859291906147e6565b60405180910390a15050565b82600860009054906101000a900460ff1615611073573373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c906140c6565b60405180910390fd5b6000610e20856116b0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e889061485b565b60405180910390fd5b600860009054906101000a900460ff168015610ec457506000600960040160009054906101000a900461ffff1661ffff16115b15610f2b57600960040160009054906101000a900461ffff1661ffff16610eea33612c61565b10610f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f21906148ed565b60405180910390fd5b5b600060019050600860009054906101000a900460ff1615610f4b57600090505b610ff06040518060c001604052808981526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001836003811115610fd857610fd7613a04565b5b81526020016000151581526020016000815250612cc8565b61102f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102690614959565b60405180910390fd5b7f475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c3388878760405161106494939291906149c6565b60405180910390a1505061133b565b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146110e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d8906140c6565b60405180910390fd5b60006110ec856116b0565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361115d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111549061485b565b60405180910390fd5b600860009054906101000a900460ff16801561119057506000600960040160009054906101000a900461ffff1661ffff16115b156111f757600960040160009054906101000a900461ffff1661ffff166111b633612c61565b106111f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ed906148ed565b60405180910390fd5b5b600060019050600860009054906101000a900460ff161561121757600090505b6112bc6040518060c001604052808981526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018360038111156112a4576112a3613a04565b5b81526020016000151581526020016000815250612cc8565b6112fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f290614959565b60405180910390fd5b7f475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c3388878760405161133094939291906149c6565b60405180910390a150505b5050505050565b600e5481565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156114f057838290600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546113ff90614a35565b80601f016020809104026020016040519081016040528092919081815260200182805461142b90614a35565b80156114785780601f1061144d57610100808354040283529160200191611478565b820191906000526020600020905b81548152906001019060200180831161145b57829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660038111156114a6576114a5613a04565b5b60038111156114b8576114b7613a04565b5b81526020016003820160019054906101000a900460ff161515151581526020016004820154815250508152602001906001019061136c565b50505050905090565b60098060000154908060010160009054906101000a900460ff16908060020154908060030154908060040160009054906101000a900461ffff16905085565b6115423382612e9a565b7f812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba3543382604051611573929190614a66565b60405180910390a150565b600061158a600161313e565b905080156115ae576001600060016101000a81548160ff0219169083151502179055505b85600860006101000a81548160ff0219169083151502179055506115d18561322e565b60005b84849050811015611629576116158585838181106115f5576115f4614a8f565b5b90506020028101906116079190614ac3565b61161090614cf7565b612cc8565b50808061162190614d0a565b9150506115d4565b508160098181611639919061461e565b90505080156116955760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161168c9190614d8d565b60405180910390a15b505050505050565b600860009054906101000a900460ff1681565b60006116bb82613272565b6116c8576000905061175b565b600260018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117159190614da8565b8154811061172657611725614a8f565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000600e54116117a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179c90614e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182d90614eba565b60405180910390fd5b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c891906142e9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193090614f4c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f19350505050158015611981573d6000803e3d6000fd5b506000600e819055507f8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e50316181600e546040516119bd9291906147e6565b60405180910390a150565b8060006119d4826126e7565b90506000816000015111611a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1490614158565b60405180910390fd5b82600860009054906101000a900460ff1615611be3576000611a3e826126e7565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa9906140c6565b60405180910390fd5b6000611abd866126e7565b9050600380811115611ad257611ad1613a04565b5b81606001516003811115611ae957611ae8613a04565b5b03611b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2090614fde565b60405180910390fd5b600381606001906003811115611b4257611b41613a04565b5b90816003811115611b5657611b55613a04565b5b81525050611b6381612925565b611ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b999061427c565b60405180910390fd5b7f873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa866003604051611bd49291906142ab565b60405180910390a15050611d7d565b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c48906140c6565b60405180910390fd5b6000611c5c856126e7565b9050600380811115611c7157611c70613a04565b5b81606001516003811115611c8857611c87613a04565b5b03611cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbf90614fde565b60405180910390fd5b600381606001906003811115611ce157611ce0613a04565b5b90816003811115611cf557611cf4613a04565b5b81525050611d0281612925565b611d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d389061427c565b60405180910390fd5b7f873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa856003604051611d739291906142ab565b60405180910390a1505b50505050565b600860009054906101000a900460ff16611dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc9906140c6565b60405180910390fd5b806000611dde826126e7565b90506000816000015111611e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1e90614158565b60405180910390fd5b826000611e33826126e7565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9e90614158565b60405180910390fd5b6000611eb2866126e7565b905060026003811115611ec857611ec7613a04565b5b81606001516003811115611edf57611ede613a04565b5b14611f1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1690615070565b60405180910390fd5b600181606001906003811115611f3857611f37613a04565b5b90816003811115611f4c57611f4b613a04565b5b81525050611f5981612925565b611f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8f9061427c565b60405180910390fd5b7f873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa866001604051611fca9291906142ab565b60405180910390a1505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa15801561205e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208291906142e9565b73ffffffffffffffffffffffffffffffffffffffff16146120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90614362565b60405180910390fd5b8460006120e4826126e7565b9050600081600001511161212d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212490614158565b60405180910390fd5b6000612138886126e7565b90506000816000015111612181576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612178906150dc565b60405180910390fd5b6001600381111561219557612194613a04565b5b816060015160038111156121ac576121ab613a04565b5b146121ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e39061516e565b60405180910390fd5b60006121fb8260200151612894565b905081608001516122b85760008111612249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224090615200565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036122b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ae906140c6565b60405180910390fd5b5b60005a905060008673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603612348576123418a888b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506132bd565b9050612426565b600061235785602001516116b0565b90506124228b826040518060400160405280601e81526020017f706572666f726d2875696e743235362c616464726573732c62797465732900008152508f8c8f8f6040516024016123ab9493929190615220565b604051602081830303815290604052906040516123c891906152a7565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132bd565b9150505b5a826124329190614da8565b9150600060096000015411156124565760096000015482612453919061465b565b91505b6000600960010160009054906101000a900460ff1660ff1611156124a357600960010160009054906101000a900460ff1660ff168261249591906152ed565b826124a0919061465b565b91505b60003a836124b1919061531e565b9050846080015161253257808410156124ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f690615200565b60405180910390fd5b612518856020015182866125139190614da8565b612a62565b80600e600082825461252a919061465b565b925050819055505b808560a001818151612544919061465b565b9150818152505061255485612925565b612593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258a9061427c565b60405180910390fd5b7fc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e01058c84846040516125c693929190615360565b60405180910390a1505050505050505050505050565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156126de57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190612600565b50505050905090565b6126ef613527565b6004600160036000858152602001908152602001600020546127119190614da8565b8154811061272257612721614a8f565b5b90600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546127ab90614a35565b80601f01602080910402602001604051908101604052809291908181526020018280546127d790614a35565b80156128245780601f106127f957610100808354040283529160200191612824565b820191906000526020600020905b81548152906001019060200180831161280757829003601f168201915b505050505081526020016003820160009054906101000a900460ff16600381111561285257612851613a04565b5b600381111561286457612863613a04565b5b81526020016003820160019054906101000a900460ff161515151581526020016004820154815250509050919050565b600061289f8261330a565b6128ac5760009050612920565b60076001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128fa9190614da8565b8154811061290b5761290a614a8f565b5b90600052602060002090600202016001015490505b919050565b60006129348260000151613355565b6129415760009050612a5d565b81600460016003600086600001518152602001908152602001600020546129689190614da8565b8154811061297957612978614a8f565b5b90600052602060002090600502016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190816129ed919061550d565b5060608201518160030160006101000a81548160ff02191690836003811115612a1957612a18613a04565b5b021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160040155905050612a588260000151613374565b600190505b919050565b612a6b8261330a565b15612b615760405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018281525060076001600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ae99190614da8565b81548110612afa57612af9614a8f565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050612c54565b600760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600780549050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b612c5d826133dc565b5050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b6000612cd78260000151613355565b15612ce55760009050612e95565b60048290806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081612d77919061550d565b5060608201518160030160006101000a81548160ff02191690836003811115612da357612da2613a04565b5b021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160040155505060048054905060036000846000015181526020019081526020016000208190555060056000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1680929190612e5c906155f3565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050612e908260000151613374565b600190505b919050565b612ea382613272565b15612feb5760405180604001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250600260018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f369190614da8565b81548110612f4757612f46614a8f565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050613131565b600260405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050600280549050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61313a82613470565b5050565b60008060019054906101000a900460ff16156131b55760018260ff1614801561316d575061316b30613504565b155b6131ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131a390615695565b60405180910390fd5b60009050613229565b8160ff1660008054906101000a900460ff1660ff161061320a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320190615695565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b60005a6113888110156132cf57600080fd5b6113888103905084604082048203116132e757600080fd5b833b6132f257600080fd5b6000808451602086016000888af19150509392505050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b6000806003600084815260200190815260200160002054119050919050565b6000600360008381526020019081526020016000205490506004805490508111156133a2576133a16156b5565b5b6133ab82613355565b156133c657600081116133c1576133c06156b5565b5b6133d8565b600081146133d7576133d66156b5565b5b5b5050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600780549050811115613436576134356156b5565b5b61343f8261330a565b1561345a5760008111613455576134546156b5565b5b61346c565b6000811461346b5761346a6156b5565b5b5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506002805490508111156134ca576134c96156b5565b5b6134d382613272565b156134ee57600081116134e9576134e86156b5565b5b613500565b600081146134ff576134fe6156b5565b5b5b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000600381111561357157613570613a04565b5b8152602001600015158152602001600081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135de826135b3565b9050919050565b6135ee816135d3565b82525050565b6000819050919050565b613607816135f4565b82525050565b60408201600082015161362360008501826135e5565b50602082015161363660208501826135fe565b50505050565b6000613648838361360d565b60408301905092915050565b6000602082019050919050565b600061366c82613587565b6136768185613592565b9350613681836135a3565b8060005b838110156136b2578151613699888261363c565b97506136a483613654565b925050600181019050613685565b5085935050505092915050565b600060208201905081810360008301526136d98184613661565b905092915050565b6000604051905090565b600080fd5b600080fd5b6136fe816135f4565b811461370957600080fd5b50565b60008135905061371b816136f5565b92915050565b600060208284031215613737576137366136eb565b5b60006137458482850161370c565b91505092915050565b600080fd5b600060a082840312156137695761376861374e565b5b81905092915050565b600060a08284031215613788576137876136eb565b5b600061379684828501613753565b91505092915050565b6137a8816135f4565b82525050565b60006020820190506137c3600083018461379f565b92915050565b6000819050919050565b60006137ee6137e96137e4846135b3565b6137c9565b6135b3565b9050919050565b6000613800826137d3565b9050919050565b6000613812826137f5565b9050919050565b61382281613807565b82525050565b600060208201905061383d6000830184613819565b92915050565b61384c816135d3565b811461385757600080fd5b50565b60008135905061386981613843565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126138945761389361386f565b5b8235905067ffffffffffffffff8111156138b1576138b0613874565b5b6020830191508360018202830111156138cd576138cc613879565b5b9250929050565b600080600080606085870312156138ee576138ed6136eb565b5b60006138fc8782880161370c565b945050602061390d8782880161385a565b935050604085013567ffffffffffffffff81111561392e5761392d6136f0565b5b61393a8782880161387e565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139ae578082015181840152602081019050613993565b60008484015250505050565b6000601f19601f8301169050919050565b60006139d682613974565b6139e0818561397f565b93506139f0818560208601613990565b6139f9816139ba565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613a4457613a43613a04565b5b50565b6000819050613a5582613a33565b919050565b6000613a6582613a47565b9050919050565b613a7581613a5a565b82525050565b60008115159050919050565b613a9081613a7b565b82525050565b600060c083016000830151613aae60008601826135fe565b506020830151613ac160208601826135e5565b5060408301518482036040860152613ad982826139cb565b9150506060830151613aee6060860182613a6c565b506080830151613b016080860182613a87565b5060a0830151613b1460a08601826135fe565b508091505092915050565b6000613b2b8383613a96565b905092915050565b6000602082019050919050565b6000613b4b82613948565b613b558185613953565b935083602082028501613b6785613964565b8060005b85811015613ba35784840389528151613b848582613b1f565b9450613b8f83613b33565b925060208a01995050600181019050613b6b565b50829750879550505050505092915050565b60006020820190508181036000830152613bcf8184613b40565b905092915050565b600060ff82169050919050565b613bed81613bd7565b82525050565b600061ffff82169050919050565b613c0a81613bf3565b82525050565b600060a082019050613c25600083018861379f565b613c326020830187613be4565b613c3f604083018661379f565b613c4c606083018561379f565b613c596080830184613c01565b9695505050505050565b600060208284031215613c7957613c786136eb565b5b6000613c878482850161385a565b91505092915050565b613c9981613a7b565b8114613ca457600080fd5b50565b600081359050613cb681613c90565b92915050565b60008083601f840112613cd257613cd161386f565b5b8235905067ffffffffffffffff811115613cef57613cee613874565b5b602083019150836020820283011115613d0b57613d0a613879565b5b9250929050565b60008060008060006101008688031215613d2f57613d2e6136eb565b5b6000613d3d88828901613ca7565b9550506020613d4e8882890161385a565b945050604086013567ffffffffffffffff811115613d6f57613d6e6136f0565b5b613d7b88828901613cbc565b93509350506060613d8e88828901613753565b9150509295509295909350565b613da481613a7b565b82525050565b6000602082019050613dbf6000830184613d9b565b92915050565b6000613dd0826137f5565b9050919050565b613de081613dc5565b82525050565b6000602082019050613dfb6000830184613dd7565b92915050565b600080600080600060808688031215613e1d57613e1c6136eb565b5b6000613e2b8882890161370c565b9550506020613e3c8882890161370c565b945050604086013567ffffffffffffffff811115613e5d57613e5c6136f0565b5b613e698882890161387e565b93509350506060613e7c8882890161385a565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ebe81613dc5565b82525050565b604082016000820151613eda6000850182613eb5565b506020820151613eed60208501826135e5565b50505050565b6000613eff8383613ec4565b60408301905092915050565b6000602082019050919050565b6000613f2382613e89565b613f2d8185613e94565b9350613f3883613ea5565b8060005b83811015613f69578151613f508882613ef3565b9750613f5b83613f0b565b925050600181019050613f3c565b5085935050505092915050565b60006020820190508181036000830152613f908184613f18565b905092915050565b600060c083016000830151613fb060008601826135fe565b506020830151613fc360208601826135e5565b5060408301518482036040860152613fdb82826139cb565b9150506060830151613ff06060860182613a6c565b5060808301516140036080860182613a87565b5060a083015161401660a08601826135fe565b508091505092915050565b6000602082019050818103600083015261403b8184613f98565b905092915050565b600082825260208201905092915050565b7f52656769737472793a206f7065726174696f6e206973206e6f74207065726d6960008201527f7474656400000000000000000000000000000000000000000000000000000000602082015250565b60006140b0602483614043565b91506140bb82614054565b604082019050919050565b600060208201905081810360008301526140df816140a3565b9050919050565b7f52656769737472793a20776f726b666c6f7720646f6573206e6f74206578697360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000614142602183614043565b915061414d826140e6565b604082019050919050565b6000602082019050818103600083015261417181614135565b9050919050565b7f52656769737472793a206f6e6c792061637469766520776f726b666c6f77732060008201527f636f756c64206265207061757365640000000000000000000000000000000000602082015250565b60006141d4602f83614043565b91506141df82614178565b604082019050919050565b60006020820190508181036000830152614203816141c7565b9050919050565b7f52656769737472793a206661696c656420746f2075706461746520776f726b6660008201527f6c6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000614266602383614043565b91506142718261420a565b604082019050919050565b6000602082019050818103600083015261429581614259565b9050919050565b6142a581613a5a565b82525050565b60006040820190506142c0600083018561379f565b6142cd602083018461429c565b9392505050565b6000815190506142e381613843565b92915050565b6000602082840312156142ff576142fe6136eb565b5b600061430d848285016142d4565b91505092915050565b7f5369676e65724f776e61626c653a206f6e6c79207369676e6572000000000000600082015250565b600061434c601a83614043565b915061435782614316565b602082019050919050565b6000602082019050818103600083015261437b8161433f565b9050919050565b6000813561438f816136f5565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6143d184614398565b9350801983169250808416831791505092915050565b60006144026143fd6143f8846135f4565b6137c9565b6135f4565b9050919050565b6000819050919050565b61441c826143e7565b61442f61442882614409565b83546143a5565b8255505050565b61443f81613bd7565b811461444a57600080fd5b50565b6000813561445a81614436565b80915050919050565b600060ff61447084614398565b9350801983169250808416831791505092915050565b60006144a161449c61449784613bd7565b6137c9565b613bd7565b9050919050565b6000819050919050565b6144bb82614486565b6144ce6144c7826144a8565b8354614463565b8255505050565b6144de81613bf3565b81146144e957600080fd5b50565b600081356144f9816144d5565b80915050919050565b600061ffff61451084614398565b9350801983169250808416831791505092915050565b600061454161453c61453784613bf3565b6137c9565b613bf3565b9050919050565b6000819050919050565b61455b82614526565b61456e61456782614548565b8354614502565b8255505050565b60008101600083018061458781614382565b90506145938184614413565b5050506001810160208301806145a88161444d565b90506145b481846144b2565b5050506002810160408301806145c981614382565b90506145d58184614413565b5050506003810160608301806145ea81614382565b90506145f68184614413565b50505060048101608083018061460b816144ec565b90506146178184614552565b5050505050565b6146288282614575565b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614666826135f4565b9150614671836135f4565b92508282019050808211156146895761468861462c565b5b92915050565b614698816135d3565b82525050565b60006040820190506146b3600083018561468f565b6146c0602083018461379f565b9392505050565b7f52656769737472793a20776f726b666c6f77206d7573742062652070656e646960008201527f6e67000000000000000000000000000000000000000000000000000000000000602082015250565b6000614723602283614043565b915061472e826146c7565b604082019050919050565b6000602082019050818103600083015261475281614716565b9050919050565b7f52656769737472793a206e6f2062616c616e636520746f207769746864726177600082015250565b600061478f602083614043565b915061479a82614759565b602082019050919050565b600060208201905081810360008301526147be81614782565b9050919050565b60006147d0826137f5565b9050919050565b6147e0816147c5565b82525050565b60006040820190506147fb60008301856147d7565b614808602083018461379f565b9392505050565b7f52656769737472793a2067617465776179206e6f7420666f756e640000000000600082015250565b6000614845601b83614043565b91506148508261480f565b602082019050919050565b6000602082019050818103600083015261487481614838565b9050919050565b7f52656769737472793a2072656163686564206d617820776f726b666c6f77732060008201527f6361706163697479000000000000000000000000000000000000000000000000602082015250565b60006148d7602883614043565b91506148e28261487b565b604082019050919050565b60006020820190508181036000830152614906816148ca565b9050919050565b7f52656769737472793a206661696c656420746f2061646420776f726b666c6f77600082015250565b6000614943602083614043565b915061494e8261490d565b602082019050919050565b6000602082019050818103600083015261497281614936565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b60006149a58385614979565b93506149b283858461498a565b6149bb836139ba565b840190509392505050565b60006060820190506149db600083018761468f565b6149e8602083018661379f565b81810360408301526149fb818486614999565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614a4d57607f821691505b602082108103614a6057614a5f614a06565b5b50919050565b6000604082019050614a7b600083018561468f565b614a88602083018461468f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60008235600160c003833603038112614adf57614ade614abe565b5b80830191505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614b28826139ba565b810181811067ffffffffffffffff82111715614b4757614b46614af0565b5b80604052505050565b6000614b5a6136e1565b9050614b668282614b1f565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115614b9057614b8f614af0565b5b614b99826139ba565b9050602081019050919050565b6000614bb9614bb484614b75565b614b50565b905082815260208101848484011115614bd557614bd4614b70565b5b614be084828561498a565b509392505050565b600082601f830112614bfd57614bfc61386f565b5b8135614c0d848260208601614ba6565b91505092915050565b60048110614c2357600080fd5b50565b600081359050614c3581614c16565b92915050565b600060c08284031215614c5157614c50614aeb565b5b614c5b60c0614b50565b90506000614c6b8482850161370c565b6000830152506020614c7f8482850161385a565b602083015250604082013567ffffffffffffffff811115614ca357614ca2614b6b565b5b614caf84828501614be8565b6040830152506060614cc384828501614c26565b6060830152506080614cd784828501613ca7565b60808301525060a0614ceb8482850161370c565b60a08301525092915050565b6000614d033683614c3b565b9050919050565b6000614d15826135f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614d4757614d4661462c565b5b600182019050919050565b6000819050919050565b6000614d77614d72614d6d84614d52565b6137c9565b613bd7565b9050919050565b614d8781614d5c565b82525050565b6000602082019050614da26000830184614d7e565b92915050565b6000614db3826135f4565b9150614dbe836135f4565b9250828203905081811115614dd657614dd561462c565b5b92915050565b7f52656769737472793a206e6f7468696e6720746f207769746864726177000000600082015250565b6000614e12601d83614043565b9150614e1d82614ddc565b602082019050919050565b60006020820190508181036000830152614e4181614e05565b9050919050565b7f52656769737472793a207369676e65722073746f72616765206164647265737360008201527f206973206e6f7420737065636966696564000000000000000000000000000000602082015250565b6000614ea4603183614043565b9150614eaf82614e48565b604082019050919050565b60006020820190508181036000830152614ed381614e97565b9050919050565b7f52656769737472793a207769746864726177616c20616464726573732069732060008201527f6e6f742073706563696669656400000000000000000000000000000000000000602082015250565b6000614f36602d83614043565b9150614f4182614eda565b604082019050919050565b60006020820190508181036000830152614f6581614f29565b9050919050565b7f52656769737472793a20776f726b666c6f7720697320616c726561647920636160008201527f6e63656c6c656400000000000000000000000000000000000000000000000000602082015250565b6000614fc8602783614043565b9150614fd382614f6c565b604082019050919050565b60006020820190508181036000830152614ff781614fbb565b9050919050565b7f52656769737472793a206f6e6c792070617573656420776f726b666c6f77732060008201527f636f756c6420626520726573756d656400000000000000000000000000000000602082015250565b600061505a603083614043565b915061506582614ffe565b604082019050919050565b600060208201905081810360008301526150898161504d565b9050919050565b7f52656769737472793a20776f726b666c6f77206e6f7420666f756e6400000000600082015250565b60006150c6601c83614043565b91506150d182615090565b602082019050919050565b600060208201905081810360008301526150f5816150b9565b9050919050565b7f52656769737472793a20776f726b666c6f77206d75737420626520616374697660008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000615158602183614043565b9150615163826150fc565b604082019050919050565b600060208201905081810360008301526151878161514b565b9050919050565b7f52656769737472793a206e6f7420656e6f7567682066756e6473206f6e20626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006151ea602583614043565b91506151f58261518e565b604082019050919050565b60006020820190508181036000830152615219816151dd565b9050919050565b6000606082019050615235600083018761379f565b615242602083018661468f565b8181036040830152615255818486614999565b905095945050505050565b600081519050919050565b600081905092915050565b600061528182615260565b61528b818561526b565b935061529b818560208601613990565b80840191505092915050565b60006152b38284615276565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006152f8826135f4565b9150615303836135f4565b925082615313576153126152be565b5b828204905092915050565b6000615329826135f4565b9150615334836135f4565b9250828202615342816135f4565b915082820484148315176153595761535861462c565b5b5092915050565b6000606082019050615375600083018661379f565b615382602083018561379f565b61538f6040830184613d9b565b949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026153f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826153bc565b61540386836153bc565b95508019841693508086168417925050509392505050565b615424836143e7565b61543861543082614409565b8484546153c9565b825550505050565b600090565b61544d615440565b61545881848461541b565b505050565b5b8181101561547c57615471600082615445565b60018101905061545e565b5050565b601f8211156154c15761549281615397565b61549b846153ac565b810160208510156154aa578190505b6154be6154b6856153ac565b83018261545d565b50505b505050565b600082821c905092915050565b60006154e4600019846008026154c6565b1980831691505092915050565b60006154fd83836154d3565b9150826002028217905092915050565b61551682613974565b67ffffffffffffffff81111561552f5761552e614af0565b5b6155398254614a35565b615544828285615480565b600060209050601f8311600181146155775760008415615565578287015190505b61556f85826154f1565b8655506155d7565b601f19841661558586615397565b60005b828110156155ad57848901518255600182019150602085019450602081019050615588565b868310156155ca57848901516155c6601f8916826154d3565b8355505b6001600288020188555050505b505050505050565b600067ffffffffffffffff82169050919050565b60006155fe826155df565b915067ffffffffffffffff82036156185761561761462c565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061567f602e83614043565b915061568a82615623565b604082019050919050565b600060208201905081810360008301526156ae81615672565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212201fe57999e3c5d6a61680edff7f5137f872d8e006617129231e6dc4f35e3f4dc364736f6c63430008120033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 performanceOverhead, uint8 performancePremiumThreshold, uint256 registrationOverhead, uint256 cancellationOverhead, uint16 maxWorkflowsPerAccount)
func (_Registry *RegistryCaller) Config(opts *bind.CallOpts) (struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		PerformanceOverhead         *big.Int
		PerformancePremiumThreshold uint8
		RegistrationOverhead        *big.Int
		CancellationOverhead        *big.Int
		MaxWorkflowsPerAccount      uint16
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PerformanceOverhead = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PerformancePremiumThreshold = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.RegistrationOverhead = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CancellationOverhead = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.MaxWorkflowsPerAccount = *abi.ConvertType(out[4], new(uint16)).(*uint16)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 performanceOverhead, uint8 performancePremiumThreshold, uint256 registrationOverhead, uint256 cancellationOverhead, uint16 maxWorkflowsPerAccount)
func (_Registry *RegistrySession) Config() (struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}, error) {
	return _Registry.Contract.Config(&_Registry.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 performanceOverhead, uint8 performancePremiumThreshold, uint256 registrationOverhead, uint256 cancellationOverhead, uint16 maxWorkflowsPerAccount)
func (_Registry *RegistryCallerSession) Config() (struct {
	PerformanceOverhead         *big.Int
	PerformancePremiumThreshold uint8
	RegistrationOverhead        *big.Int
	CancellationOverhead        *big.Int
	MaxWorkflowsPerAccount      uint16
}, error) {
	return _Registry.Contract.Config(&_Registry.CallOpts)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address user) view returns(uint256)
func (_Registry *RegistryCaller) GetBalance(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getBalance", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address user) view returns(uint256)
func (_Registry *RegistrySession) GetBalance(user common.Address) (*big.Int, error) {
	return _Registry.Contract.GetBalance(&_Registry.CallOpts, user)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address user) view returns(uint256)
func (_Registry *RegistryCallerSession) GetBalance(user common.Address) (*big.Int, error) {
	return _Registry.Contract.GetBalance(&_Registry.CallOpts, user)
}

// GetBalances is a free data retrieval call binding the contract method 0x00113e08.
//
// Solidity: function getBalances() view returns((address,uint256)[])
func (_Registry *RegistryCaller) GetBalances(opts *bind.CallOpts) ([]RegistryBalanceBalance, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getBalances")

	if err != nil {
		return *new([]RegistryBalanceBalance), err
	}

	out0 := *abi.ConvertType(out[0], new([]RegistryBalanceBalance)).(*[]RegistryBalanceBalance)

	return out0, err

}

// GetBalances is a free data retrieval call binding the contract method 0x00113e08.
//
// Solidity: function getBalances() view returns((address,uint256)[])
func (_Registry *RegistrySession) GetBalances() ([]RegistryBalanceBalance, error) {
	return _Registry.Contract.GetBalances(&_Registry.CallOpts)
}

// GetBalances is a free data retrieval call binding the contract method 0x00113e08.
//
// Solidity: function getBalances() view returns((address,uint256)[])
func (_Registry *RegistryCallerSession) GetBalances() ([]RegistryBalanceBalance, error) {
	return _Registry.Contract.GetBalances(&_Registry.CallOpts)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address owner) view returns(address)
func (_Registry *RegistryCaller) GetGateway(opts *bind.CallOpts, owner common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getGateway", owner)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address owner) view returns(address)
func (_Registry *RegistrySession) GetGateway(owner common.Address) (common.Address, error) {
	return _Registry.Contract.GetGateway(&_Registry.CallOpts, owner)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address owner) view returns(address)
func (_Registry *RegistryCallerSession) GetGateway(owner common.Address) (common.Address, error) {
	return _Registry.Contract.GetGateway(&_Registry.CallOpts, owner)
}

// GetGateways is a free data retrieval call binding the contract method 0xd82778ce.
//
// Solidity: function getGateways() view returns((address,address)[])
func (_Registry *RegistryCaller) GetGateways(opts *bind.CallOpts) ([]RegistryGatewayGateway, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getGateways")

	if err != nil {
		return *new([]RegistryGatewayGateway), err
	}

	out0 := *abi.ConvertType(out[0], new([]RegistryGatewayGateway)).(*[]RegistryGatewayGateway)

	return out0, err

}

// GetGateways is a free data retrieval call binding the contract method 0xd82778ce.
//
// Solidity: function getGateways() view returns((address,address)[])
func (_Registry *RegistrySession) GetGateways() ([]RegistryGatewayGateway, error) {
	return _Registry.Contract.GetGateways(&_Registry.CallOpts)
}

// GetGateways is a free data retrieval call binding the contract method 0xd82778ce.
//
// Solidity: function getGateways() view returns((address,address)[])
func (_Registry *RegistryCallerSession) GetGateways() ([]RegistryGatewayGateway, error) {
	return _Registry.Contract.GetGateways(&_Registry.CallOpts)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256))
func (_Registry *RegistryCaller) GetWorkflow(opts *bind.CallOpts, id *big.Int) (Workflow, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflow", id)

	if err != nil {
		return *new(Workflow), err
	}

	out0 := *abi.ConvertType(out[0], new(Workflow)).(*Workflow)

	return out0, err

}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256))
func (_Registry *RegistrySession) GetWorkflow(id *big.Int) (Workflow, error) {
	return _Registry.Contract.GetWorkflow(&_Registry.CallOpts, id)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256))
func (_Registry *RegistryCallerSession) GetWorkflow(id *big.Int) (Workflow, error) {
	return _Registry.Contract.GetWorkflow(&_Registry.CallOpts, id)
}

// GetWorkflowOwnerBalance is a free data retrieval call binding the contract method 0x411b3d4b.
//
// Solidity: function getWorkflowOwnerBalance(uint256 id) view returns(uint256)
func (_Registry *RegistryCaller) GetWorkflowOwnerBalance(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowOwnerBalance", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWorkflowOwnerBalance is a free data retrieval call binding the contract method 0x411b3d4b.
//
// Solidity: function getWorkflowOwnerBalance(uint256 id) view returns(uint256)
func (_Registry *RegistrySession) GetWorkflowOwnerBalance(id *big.Int) (*big.Int, error) {
	return _Registry.Contract.GetWorkflowOwnerBalance(&_Registry.CallOpts, id)
}

// GetWorkflowOwnerBalance is a free data retrieval call binding the contract method 0x411b3d4b.
//
// Solidity: function getWorkflowOwnerBalance(uint256 id) view returns(uint256)
func (_Registry *RegistryCallerSession) GetWorkflowOwnerBalance(id *big.Int) (*big.Int, error) {
	return _Registry.Contract.GetWorkflowOwnerBalance(&_Registry.CallOpts, id)
}

// GetWorkflows is a free data retrieval call binding the contract method 0x7099588f.
//
// Solidity: function getWorkflows() view returns((uint256,address,bytes,uint8,bool,uint256)[])
func (_Registry *RegistryCaller) GetWorkflows(opts *bind.CallOpts) ([]Workflow, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflows")

	if err != nil {
		return *new([]Workflow), err
	}

	out0 := *abi.ConvertType(out[0], new([]Workflow)).(*[]Workflow)

	return out0, err

}

// GetWorkflows is a free data retrieval call binding the contract method 0x7099588f.
//
// Solidity: function getWorkflows() view returns((uint256,address,bytes,uint8,bool,uint256)[])
func (_Registry *RegistrySession) GetWorkflows() ([]Workflow, error) {
	return _Registry.Contract.GetWorkflows(&_Registry.CallOpts)
}

// GetWorkflows is a free data retrieval call binding the contract method 0x7099588f.
//
// Solidity: function getWorkflows() view returns((uint256,address,bytes,uint8,bool,uint256)[])
func (_Registry *RegistryCallerSession) GetWorkflows() ([]Workflow, error) {
	return _Registry.Contract.GetWorkflows(&_Registry.CallOpts)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistryCaller) IsMainChain(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isMainChain")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistrySession) IsMainChain() (bool, error) {
	return _Registry.Contract.IsMainChain(&_Registry.CallOpts)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistryCallerSession) IsMainChain() (bool, error) {
	return _Registry.Contract.IsMainChain(&_Registry.CallOpts)
}

// NetworkRewards is a free data retrieval call binding the contract method 0x6b5d4206.
//
// Solidity: function networkRewards() view returns(uint256)
func (_Registry *RegistryCaller) NetworkRewards(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "networkRewards")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NetworkRewards is a free data retrieval call binding the contract method 0x6b5d4206.
//
// Solidity: function networkRewards() view returns(uint256)
func (_Registry *RegistrySession) NetworkRewards() (*big.Int, error) {
	return _Registry.Contract.NetworkRewards(&_Registry.CallOpts)
}

// NetworkRewards is a free data retrieval call binding the contract method 0x6b5d4206.
//
// Solidity: function networkRewards() view returns(uint256)
func (_Registry *RegistryCallerSession) NetworkRewards() (*big.Int, error) {
	return _Registry.Contract.NetworkRewards(&_Registry.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistryCaller) SignerGetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "signerGetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistrySession) SignerGetter() (common.Address, error) {
	return _Registry.Contract.SignerGetter(&_Registry.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistryCallerSession) SignerGetter() (common.Address, error) {
	return _Registry.Contract.SignerGetter(&_Registry.CallOpts)
}

// ActivateWorkflow is a paid mutator transaction binding the contract method 0x5902c15e.
//
// Solidity: function activateWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) ActivateWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "activateWorkflow", id)
}

// ActivateWorkflow is a paid mutator transaction binding the contract method 0x5902c15e.
//
// Solidity: function activateWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) ActivateWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflow(&_Registry.TransactOpts, id)
}

// ActivateWorkflow is a paid mutator transaction binding the contract method 0x5902c15e.
//
// Solidity: function activateWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) ActivateWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflow(&_Registry.TransactOpts, id)
}

// CancelWorkflow is a paid mutator transaction binding the contract method 0xd0c81e98.
//
// Solidity: function cancelWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) CancelWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "cancelWorkflow", id)
}

// CancelWorkflow is a paid mutator transaction binding the contract method 0xd0c81e98.
//
// Solidity: function cancelWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) CancelWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflow(&_Registry.TransactOpts, id)
}

// CancelWorkflow is a paid mutator transaction binding the contract method 0xd0c81e98.
//
// Solidity: function cancelWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) CancelWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflow(&_Registry.TransactOpts, id)
}

// FundBalance is a paid mutator transaction binding the contract method 0x3c067945.
//
// Solidity: function fundBalance() payable returns()
func (_Registry *RegistryTransactor) FundBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "fundBalance")
}

// FundBalance is a paid mutator transaction binding the contract method 0x3c067945.
//
// Solidity: function fundBalance() payable returns()
func (_Registry *RegistrySession) FundBalance() (*types.Transaction, error) {
	return _Registry.Contract.FundBalance(&_Registry.TransactOpts)
}

// FundBalance is a paid mutator transaction binding the contract method 0x3c067945.
//
// Solidity: function fundBalance() payable returns()
func (_Registry *RegistryTransactorSession) FundBalance() (*types.Transaction, error) {
	return _Registry.Contract.FundBalance(&_Registry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x92141be8.
//
// Solidity: function initialize(bool _isMainChain, address _signerGetterAddress, (uint256,address,bytes,uint8,bool,uint256)[] _internalWorkflows, (uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _isMainChain bool, _signerGetterAddress common.Address, _internalWorkflows []Workflow, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _isMainChain, _signerGetterAddress, _internalWorkflows, _config)
}

// Initialize is a paid mutator transaction binding the contract method 0x92141be8.
//
// Solidity: function initialize(bool _isMainChain, address _signerGetterAddress, (uint256,address,bytes,uint8,bool,uint256)[] _internalWorkflows, (uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistrySession) Initialize(_isMainChain bool, _signerGetterAddress common.Address, _internalWorkflows []Workflow, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _isMainChain, _signerGetterAddress, _internalWorkflows, _config)
}

// Initialize is a paid mutator transaction binding the contract method 0x92141be8.
//
// Solidity: function initialize(bool _isMainChain, address _signerGetterAddress, (uint256,address,bytes,uint8,bool,uint256)[] _internalWorkflows, (uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactorSession) Initialize(_isMainChain bool, _signerGetterAddress common.Address, _internalWorkflows []Workflow, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _isMainChain, _signerGetterAddress, _internalWorkflows, _config)
}

// PauseWorkflow is a paid mutator transaction binding the contract method 0x0813ce96.
//
// Solidity: function pauseWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) PauseWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "pauseWorkflow", id)
}

// PauseWorkflow is a paid mutator transaction binding the contract method 0x0813ce96.
//
// Solidity: function pauseWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) PauseWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflow(&_Registry.TransactOpts, id)
}

// PauseWorkflow is a paid mutator transaction binding the contract method 0x0813ce96.
//
// Solidity: function pauseWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) PauseWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflow(&_Registry.TransactOpts, id)
}

// Perform is a paid mutator transaction binding the contract method 0xd6bb757b.
//
// Solidity: function perform(uint256 workflowId, uint256 gasAmount, bytes data, address target) returns()
func (_Registry *RegistryTransactor) Perform(opts *bind.TransactOpts, workflowId *big.Int, gasAmount *big.Int, data []byte, target common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "perform", workflowId, gasAmount, data, target)
}

// Perform is a paid mutator transaction binding the contract method 0xd6bb757b.
//
// Solidity: function perform(uint256 workflowId, uint256 gasAmount, bytes data, address target) returns()
func (_Registry *RegistrySession) Perform(workflowId *big.Int, gasAmount *big.Int, data []byte, target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, workflowId, gasAmount, data, target)
}

// Perform is a paid mutator transaction binding the contract method 0xd6bb757b.
//
// Solidity: function perform(uint256 workflowId, uint256 gasAmount, bytes data, address target) returns()
func (_Registry *RegistryTransactorSession) Perform(workflowId *big.Int, gasAmount *big.Int, data []byte, target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, workflowId, gasAmount, data, target)
}

// RegisterWorkflow is a paid mutator transaction binding the contract method 0x663d4503.
//
// Solidity: function registerWorkflow(uint256 id, address owner, bytes hash) returns()
func (_Registry *RegistryTransactor) RegisterWorkflow(opts *bind.TransactOpts, id *big.Int, owner common.Address, hash []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerWorkflow", id, owner, hash)
}

// RegisterWorkflow is a paid mutator transaction binding the contract method 0x663d4503.
//
// Solidity: function registerWorkflow(uint256 id, address owner, bytes hash) returns()
func (_Registry *RegistrySession) RegisterWorkflow(id *big.Int, owner common.Address, hash []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflow(&_Registry.TransactOpts, id, owner, hash)
}

// RegisterWorkflow is a paid mutator transaction binding the contract method 0x663d4503.
//
// Solidity: function registerWorkflow(uint256 id, address owner, bytes hash) returns()
func (_Registry *RegistryTransactorSession) RegisterWorkflow(id *big.Int, owner common.Address, hash []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflow(&_Registry.TransactOpts, id, owner, hash)
}

// ResumeWorkflow is a paid mutator transaction binding the contract method 0xd692157b.
//
// Solidity: function resumeWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactor) ResumeWorkflow(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "resumeWorkflow", id)
}

// ResumeWorkflow is a paid mutator transaction binding the contract method 0xd692157b.
//
// Solidity: function resumeWorkflow(uint256 id) returns()
func (_Registry *RegistrySession) ResumeWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflow(&_Registry.TransactOpts, id)
}

// ResumeWorkflow is a paid mutator transaction binding the contract method 0xd692157b.
//
// Solidity: function resumeWorkflow(uint256 id) returns()
func (_Registry *RegistryTransactorSession) ResumeWorkflow(id *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflow(&_Registry.TransactOpts, id)
}

// SetConfig is a paid mutator transaction binding the contract method 0x2ad5d340.
//
// Solidity: function setConfig((uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactor) SetConfig(opts *bind.TransactOpts, _config RegistryConfig) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setConfig", _config)
}

// SetConfig is a paid mutator transaction binding the contract method 0x2ad5d340.
//
// Solidity: function setConfig((uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistrySession) SetConfig(_config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.SetConfig(&_Registry.TransactOpts, _config)
}

// SetConfig is a paid mutator transaction binding the contract method 0x2ad5d340.
//
// Solidity: function setConfig((uint256,uint8,uint256,uint256,uint16) _config) returns()
func (_Registry *RegistryTransactorSession) SetConfig(_config RegistryConfig) (*types.Transaction, error) {
	return _Registry.Contract.SetConfig(&_Registry.TransactOpts, _config)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address gateway) returns()
func (_Registry *RegistryTransactor) SetGateway(opts *bind.TransactOpts, gateway common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setGateway", gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address gateway) returns()
func (_Registry *RegistrySession) SetGateway(gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address gateway) returns()
func (_Registry *RegistryTransactorSession) SetGateway(gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, gateway)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x5fd8c710.
//
// Solidity: function withdrawBalance() returns()
func (_Registry *RegistryTransactor) WithdrawBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "withdrawBalance")
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x5fd8c710.
//
// Solidity: function withdrawBalance() returns()
func (_Registry *RegistrySession) WithdrawBalance() (*types.Transaction, error) {
	return _Registry.Contract.WithdrawBalance(&_Registry.TransactOpts)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x5fd8c710.
//
// Solidity: function withdrawBalance() returns()
func (_Registry *RegistryTransactorSession) WithdrawBalance() (*types.Transaction, error) {
	return _Registry.Contract.WithdrawBalance(&_Registry.TransactOpts)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xc7b8981c.
//
// Solidity: function withdrawRewards() returns()
func (_Registry *RegistryTransactor) WithdrawRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "withdrawRewards")
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xc7b8981c.
//
// Solidity: function withdrawRewards() returns()
func (_Registry *RegistrySession) WithdrawRewards() (*types.Transaction, error) {
	return _Registry.Contract.WithdrawRewards(&_Registry.TransactOpts)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xc7b8981c.
//
// Solidity: function withdrawRewards() returns()
func (_Registry *RegistryTransactorSession) WithdrawRewards() (*types.Transaction, error) {
	return _Registry.Contract.WithdrawRewards(&_Registry.TransactOpts)
}

// RegistryBalanceFundedIterator is returned from FilterBalanceFunded and is used to iterate over the raw logs and unpacked data for BalanceFunded events raised by the Registry contract.
type RegistryBalanceFundedIterator struct {
	Event *RegistryBalanceFunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBalanceFundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBalanceFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBalanceFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBalanceFundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBalanceFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBalanceFunded represents a BalanceFunded event raised by the Registry contract.
type RegistryBalanceFunded struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBalanceFunded is a free log retrieval operation binding the contract event 0xe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4.
//
// Solidity: event BalanceFunded(address addr, uint256 amount)
func (_Registry *RegistryFilterer) FilterBalanceFunded(opts *bind.FilterOpts) (*RegistryBalanceFundedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BalanceFunded")
	if err != nil {
		return nil, err
	}
	return &RegistryBalanceFundedIterator{contract: _Registry.contract, event: "BalanceFunded", logs: logs, sub: sub}, nil
}

// WatchBalanceFunded is a free log subscription operation binding the contract event 0xe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4.
//
// Solidity: event BalanceFunded(address addr, uint256 amount)
func (_Registry *RegistryFilterer) WatchBalanceFunded(opts *bind.WatchOpts, sink chan<- *RegistryBalanceFunded) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BalanceFunded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBalanceFunded)
				if err := _Registry.contract.UnpackLog(event, "BalanceFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceFunded is a log parse operation binding the contract event 0xe7765cbdc1b48b4b15642a6dadba14a2bfff6298f44152508a14f634fead42c4.
//
// Solidity: event BalanceFunded(address addr, uint256 amount)
func (_Registry *RegistryFilterer) ParseBalanceFunded(log types.Log) (*RegistryBalanceFunded, error) {
	event := new(RegistryBalanceFunded)
	if err := _Registry.contract.UnpackLog(event, "BalanceFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryBalanceWithdrawnIterator is returned from FilterBalanceWithdrawn and is used to iterate over the raw logs and unpacked data for BalanceWithdrawn events raised by the Registry contract.
type RegistryBalanceWithdrawnIterator struct {
	Event *RegistryBalanceWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBalanceWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBalanceWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBalanceWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBalanceWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBalanceWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBalanceWithdrawn represents a BalanceWithdrawn event raised by the Registry contract.
type RegistryBalanceWithdrawn struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBalanceWithdrawn is a free log retrieval operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) FilterBalanceWithdrawn(opts *bind.FilterOpts) (*RegistryBalanceWithdrawnIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BalanceWithdrawn")
	if err != nil {
		return nil, err
	}
	return &RegistryBalanceWithdrawnIterator{contract: _Registry.contract, event: "BalanceWithdrawn", logs: logs, sub: sub}, nil
}

// WatchBalanceWithdrawn is a free log subscription operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) WatchBalanceWithdrawn(opts *bind.WatchOpts, sink chan<- *RegistryBalanceWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BalanceWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBalanceWithdrawn)
				if err := _Registry.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceWithdrawn is a log parse operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) ParseBalanceWithdrawn(log types.Log) (*RegistryBalanceWithdrawn, error) {
	event := new(RegistryBalanceWithdrawn)
	if err := _Registry.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryGatewaySetIterator is returned from FilterGatewaySet and is used to iterate over the raw logs and unpacked data for GatewaySet events raised by the Registry contract.
type RegistryGatewaySetIterator struct {
	Event *RegistryGatewaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryGatewaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryGatewaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryGatewaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryGatewaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryGatewaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryGatewaySet represents a GatewaySet event raised by the Registry contract.
type RegistryGatewaySet struct {
	Owner   common.Address
	Gateway common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGatewaySet is a free log retrieval operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) FilterGatewaySet(opts *bind.FilterOpts) (*RegistryGatewaySetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return &RegistryGatewaySetIterator{contract: _Registry.contract, event: "GatewaySet", logs: logs, sub: sub}, nil
}

// WatchGatewaySet is a free log subscription operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) WatchGatewaySet(opts *bind.WatchOpts, sink chan<- *RegistryGatewaySet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryGatewaySet)
				if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGatewaySet is a log parse operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) ParseGatewaySet(log types.Log) (*RegistryGatewaySet, error) {
	event := new(RegistryGatewaySet)
	if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Registry contract.
type RegistryInitializedIterator struct {
	Event *RegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInitialized represents a Initialized event raised by the Registry contract.
type RegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*RegistryInitializedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RegistryInitializedIterator{contract: _Registry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInitialized)
				if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) ParseInitialized(log types.Log) (*RegistryInitialized, error) {
	event := new(RegistryInitialized)
	if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPerformanceIterator is returned from FilterPerformance and is used to iterate over the raw logs and unpacked data for Performance events raised by the Registry contract.
type RegistryPerformanceIterator struct {
	Event *RegistryPerformance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPerformanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPerformance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPerformance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPerformanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPerformanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPerformance represents a Performance event raised by the Registry contract.
type RegistryPerformance struct {
	Id      *big.Int
	GasUsed *big.Int
	Success bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPerformance is a free log retrieval operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 id, uint256 gasUsed, bool success)
func (_Registry *RegistryFilterer) FilterPerformance(opts *bind.FilterOpts) (*RegistryPerformanceIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return &RegistryPerformanceIterator{contract: _Registry.contract, event: "Performance", logs: logs, sub: sub}, nil
}

// WatchPerformance is a free log subscription operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 id, uint256 gasUsed, bool success)
func (_Registry *RegistryFilterer) WatchPerformance(opts *bind.WatchOpts, sink chan<- *RegistryPerformance) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPerformance)
				if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePerformance is a log parse operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 id, uint256 gasUsed, bool success)
func (_Registry *RegistryFilterer) ParsePerformance(log types.Log) (*RegistryPerformance, error) {
	event := new(RegistryPerformance)
	if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRewardsWithdrawnIterator is returned from FilterRewardsWithdrawn and is used to iterate over the raw logs and unpacked data for RewardsWithdrawn events raised by the Registry contract.
type RegistryRewardsWithdrawnIterator struct {
	Event *RegistryRewardsWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRewardsWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRewardsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRewardsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRewardsWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRewardsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRewardsWithdrawn represents a RewardsWithdrawn event raised by the Registry contract.
type RegistryRewardsWithdrawn struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRewardsWithdrawn is a free log retrieval operation binding the contract event 0x8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e503161.
//
// Solidity: event RewardsWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) FilterRewardsWithdrawn(opts *bind.FilterOpts) (*RegistryRewardsWithdrawnIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RewardsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &RegistryRewardsWithdrawnIterator{contract: _Registry.contract, event: "RewardsWithdrawn", logs: logs, sub: sub}, nil
}

// WatchRewardsWithdrawn is a free log subscription operation binding the contract event 0x8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e503161.
//
// Solidity: event RewardsWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) WatchRewardsWithdrawn(opts *bind.WatchOpts, sink chan<- *RegistryRewardsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RewardsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRewardsWithdrawn)
				if err := _Registry.contract.UnpackLog(event, "RewardsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsWithdrawn is a log parse operation binding the contract event 0x8a43c4352486ec339f487f64af78ca5cbf06cd47833f073d3baf3a193e503161.
//
// Solidity: event RewardsWithdrawn(address addr, uint256 amount)
func (_Registry *RegistryFilterer) ParseRewardsWithdrawn(log types.Log) (*RegistryRewardsWithdrawn, error) {
	event := new(RegistryRewardsWithdrawn)
	if err := _Registry.contract.UnpackLog(event, "RewardsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowRegisteredIterator is returned from FilterWorkflowRegistered and is used to iterate over the raw logs and unpacked data for WorkflowRegistered events raised by the Registry contract.
type RegistryWorkflowRegisteredIterator struct {
	Event *RegistryWorkflowRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowRegistered represents a WorkflowRegistered event raised by the Registry contract.
type RegistryWorkflowRegistered struct {
	Owner common.Address
	Id    *big.Int
	Hash  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWorkflowRegistered is a free log retrieval operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) FilterWorkflowRegistered(opts *bind.FilterOpts) (*RegistryWorkflowRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowRegisteredIterator{contract: _Registry.contract, event: "WorkflowRegistered", logs: logs, sub: sub}, nil
}

// WatchWorkflowRegistered is a free log subscription operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) WatchWorkflowRegistered(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowRegistered)
				if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowRegistered is a log parse operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) ParseWorkflowRegistered(log types.Log) (*RegistryWorkflowRegistered, error) {
	event := new(RegistryWorkflowRegistered)
	if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowStatusChangedIterator is returned from FilterWorkflowStatusChanged and is used to iterate over the raw logs and unpacked data for WorkflowStatusChanged events raised by the Registry contract.
type RegistryWorkflowStatusChangedIterator struct {
	Event *RegistryWorkflowStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowStatusChanged represents a WorkflowStatusChanged event raised by the Registry contract.
type RegistryWorkflowStatusChanged struct {
	Id     *big.Int
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkflowStatusChanged is a free log retrieval operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) FilterWorkflowStatusChanged(opts *bind.FilterOpts) (*RegistryWorkflowStatusChangedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowStatusChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowStatusChangedIterator{contract: _Registry.contract, event: "WorkflowStatusChanged", logs: logs, sub: sub}, nil
}

// WatchWorkflowStatusChanged is a free log subscription operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) WatchWorkflowStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowStatusChanged) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowStatusChanged)
				if err := _Registry.contract.UnpackLog(event, "WorkflowStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowStatusChanged is a log parse operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) ParseWorkflowStatusChanged(log types.Log) (*RegistryWorkflowStatusChanged, error) {
	event := new(RegistryWorkflowStatusChanged)
	if err := _Registry.contract.UnpackLog(event, "WorkflowStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
