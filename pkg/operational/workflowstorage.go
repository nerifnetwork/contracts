// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package operational

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Workflow is an auto generated low-level Go binding around an user-defined struct.
type Workflow struct {
	Id         *big.Int
	Owner      common.Address
	Hash       []byte
	Status     uint8
	IsInternal bool
	TotalSpent *big.Int
}

// WorkflowStorageMetaData contains all meta data concerning the WorkflowStorage contract.
var WorkflowStorageMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorkflow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorkflows\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getWorkflowsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow[]\",\"name\":\"_workflows\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"name\":\"mustAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mustRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumWorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInternal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structWorkflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"name\":\"mustUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612f1680620001146000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638ef9352411610097578063eec7b03c11610066578063eec7b03c1461023a578063f2fde38b1461026a578063f350ea2614610286578063fe14018e146102b6576100f5565b80638ef93524146101b4578063949d225d146101d0578063a91ee0dc146101ee578063c34052e01461020a576100f5565b80637099588f116100d35780637099588f14610150578063715018a61461016e5780637b103999146101785780638da5cb5b14610196576100f5565b8063470f9c78146100fa5780634f033ba71461011657806352efea6e14610132575b600080fd5b610114600480360381019061010f9190612073565b6102d2565b005b610130600480360381019061012b9190612073565b6103ad565b005b61013a610488565b60405161014791906120cb565b60405180910390f35b61015861057b565b6040516101659190612354565b60405180910390f35b61017661072c565b005b6101806107b4565b60405161018d9190612385565b60405180910390f35b61019e6107da565b6040516101ab9190612385565b60405180910390f35b6101ce60048036038101906101c99190612486565b610803565b005b6101d8610a36565b6040516101e591906124f1565b60405180910390f35b6102086004803603810190610203919061250c565b610a43565b005b610224600480360381019061021f9190612539565b610b03565b60405161023191906120cb565b60405180910390f35b610254600480360381019061024f9190612539565b610b22565b60405161026191906125ef565b60405180910390f35b610284600480360381019061027f919061250c565b610ccf565b005b6102a0600480360381019061029b919061250c565b610dc6565b6040516102ad91906124f1565b60405180910390f35b6102d060048036038101906102cb9190612539565b610e2d565b005b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035990612694565b60405180910390fd5b61036b81610f08565b6103aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a190612726565b60405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043490612694565b60405180910390fd5b610446816110d5565b610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c906127b8565b60405180910390fd5b50565b6000610492611337565b73ffffffffffffffffffffffffffffffffffffffff166104b06107da565b73ffffffffffffffffffffffffffffffffffffffff1614610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90612824565b60405180910390fd5b60005b60048054905081101561056557600260006004838154811061052e5761052d612844565b5b906000526020600020906005020160000154815260200190815260200160002060009055808061055d906128a2565b915050610509565b50600460006105749190611bfb565b6001905090565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101561072357838290600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461063290612919565b80601f016020809104026020016040519081016040528092919081815260200182805461065e90612919565b80156106ab5780601f10610680576101008083540402835291602001916106ab565b820191906000526020600020905b81548152906001019060200180831161068e57829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660038111156106d9576106d86121af565b5b60038111156106eb576106ea6121af565b5b81526020016003820160019054906101000a900460ff161515151581526020016004820154815250508152602001906001019061059f565b50505050905090565b610734611337565b73ffffffffffffffffffffffffffffffffffffffff166107526107da565b73ffffffffffffffffffffffffffffffffffffffff16146107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f90612824565b60405180910390fd5b6107b2600061133f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061080f6001611403565b90508015610833576001600060156101000a81548160ff0219169083151502179055505b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b82518110156109d757600483828151811061089557610894612844565b5b602002602001015190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908161092c9190612af6565b5060608201518160030160006101000a81548160ff02191690836003811115610958576109576121af565b5b021790555060808201518160030160016101000a81548160ff02191690831515021790555060a082015181600401555050600480549050600260008584815181106109a6576109a5612844565b5b60200260200101516000015181526020019081526020016000208190555080806109cf906128a2565b915050610877565b508015610a315760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610a289190612c10565b60405180910390a15b505050565b6000600480549050905090565b610a4b611337565b73ffffffffffffffffffffffffffffffffffffffff16610a696107da565b73ffffffffffffffffffffffffffffffffffffffff1614610abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab690612824565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806002600084815260200190815260200160002054119050919050565b610b2a611c1f565b600460016002600085815260200190815260200160002054610b4c9190612c2b565b81548110610b5d57610b5c612844565b5b90600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610be690612919565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1290612919565b8015610c5f5780601f10610c3457610100808354040283529160200191610c5f565b820191906000526020600020905b815481529060010190602001808311610c4257829003601f168201915b505050505081526020016003820160009054906101000a900460ff166003811115610c8d57610c8c6121af565b5b6003811115610c9f57610c9e6121af565b5b81526020016003820160019054906101000a900460ff161515151581526020016004820154815250509050919050565b610cd7611337565b73ffffffffffffffffffffffffffffffffffffffff16610cf56107da565b73ffffffffffffffffffffffffffffffffffffffff1614610d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4290612824565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db190612cd1565b60405180910390fd5b610dc38161133f565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb490612694565b60405180910390fd5b610ec6816114f6565b610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc90612d63565b60405180910390fd5b50565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9190612694565b60405180910390fd5b610fa78260000151610b03565b610fb457600090506110d0565b8160046001600260008660000151815260200190815260200160002054610fdb9190612c2b565b81548110610fec57610feb612844565b5b90600052602060002090600502016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190816110609190612af6565b5060608201518160030160006101000a81548160ff0219169083600381111561108c5761108b6121af565b5b021790555060808201518160030160016101000a81548160ff02191690831515021790555060a082015181600401559050506110cb8260000151611b70565b600190505b919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90612694565b60405180910390fd5b6111748260000151610b03565b156111825760009050611332565b60048290806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190816112149190612af6565b5060608201518160030160006101000a81548160ff021916908360038111156112405761123f6121af565b5b021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160040155505060048054905060026000846000015181526020019081526020016000208190555060036000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff16809291906112f990612d97565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505061132d8260000151611b70565b600190505b919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060159054906101000a900460ff161561147a5760018260ff16148015611432575061143030611bd8565b155b611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146890612e39565b60405180910390fd5b600090506114f1565b8160ff16600060149054906101000a900460ff1660ff16106114d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c890612e39565b60405180910390fd5b81600060146101000a81548160ff021916908360ff160217905550600190505b919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157f90612694565b60405180910390fd5b61159182610b03565b61159e5760009050611b6b565b600060026000848152602001908152602001600020549050600060046001836115c79190612c2b565b815481106115d8576115d7612844565b5b90600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461166190612919565b80601f016020809104026020016040519081016040528092919081815260200182805461168d90612919565b80156116da5780601f106116af576101008083540402835291602001916116da565b820191906000526020600020905b8154815290600101906020018083116116bd57829003601f168201915b505050505081526020016003820160009054906101000a900460ff166003811115611708576117076121af565b5b600381111561171a576117196121af565b5b81526020016003820160019054906101000a900460ff161515151581526020016004820154815250509050600060016004805490506117599190612c2b565b905060006004828154811061177157611770612844565b5b90600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546117fa90612919565b80601f016020809104026020016040519081016040528092919081815260200182805461182690612919565b80156118735780601f1061184857610100808354040283529160200191611873565b820191906000526020600020905b81548152906001019060200180831161185657829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660038111156118a1576118a06121af565b5b60038111156118b3576118b26121af565b5b81526020016003820160019054906101000a900460ff1615151515815260200160048201548152505090506001846118eb9190612c2b565b8214611a01578360026000836000015181526020019081526020016000208190555080600460018661191d9190612c2b565b8154811061192e5761192d612844565b5b90600052602060002090600502016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190816119a29190612af6565b5060608201518160030160006101000a81548160ff021916908360038111156119ce576119cd6121af565b5b021790555060808201518160030160016101000a81548160ff02191690831515021790555060a082015181600401559050505b6004805480611a1357611a12612e59565b5b60019003818190600052602060002090600502016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000611a679190611c7f565b6003820160006101000a81549060ff02191690556003820160016101000a81549060ff0219169055600482016000905550509055600260008781526020019081526020016000206000905560036000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1680929190611b1990612e88565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050611b4986611b70565b85816000015114611b6257611b618160000151611b70565b5b60019450505050505b919050565b600060026000838152602001908152602001600020549050600480549050811115611b9e57611b9d612eb1565b5b611ba782610b03565b15611bc25760008111611bbd57611bbc612eb1565b5b611bd4565b60008114611bd357611bd2612eb1565b5b5b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5080546000825560050290600052602060002090810190611c1c9190611cbf565b50565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160006003811115611c6957611c686121af565b5b8152602001600015158152602001600081525090565b508054611c8b90612919565b6000825580601f10611c9d5750611cbc565b601f016020900490600052602060002090810190611cbb9190611d45565b5b50565b5b80821115611d41576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000611d089190611c7f565b6003820160006101000a81549060ff02191690556003820160016101000a81549060ff0219169055600482016000905550600501611cc0565b5090565b5b80821115611d5e576000816000905550600101611d46565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dc482611d7b565b810181811067ffffffffffffffff82111715611de357611de2611d8c565b5b80604052505050565b6000611df6611d62565b9050611e028282611dbb565b919050565b600080fd5b6000819050919050565b611e1f81611e0c565b8114611e2a57600080fd5b50565b600081359050611e3c81611e16565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e6d82611e42565b9050919050565b611e7d81611e62565b8114611e8857600080fd5b50565b600081359050611e9a81611e74565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611ec557611ec4611d8c565b5b611ece82611d7b565b9050602081019050919050565b82818337600083830152505050565b6000611efd611ef884611eaa565b611dec565b905082815260208101848484011115611f1957611f18611ea5565b5b611f24848285611edb565b509392505050565b600082601f830112611f4157611f40611ea0565b5b8135611f51848260208601611eea565b91505092915050565b60048110611f6757600080fd5b50565b600081359050611f7981611f5a565b92915050565b60008115159050919050565b611f9481611f7f565b8114611f9f57600080fd5b50565b600081359050611fb181611f8b565b92915050565b600060c08284031215611fcd57611fcc611d76565b5b611fd760c0611dec565b90506000611fe784828501611e2d565b6000830152506020611ffb84828501611e8b565b602083015250604082013567ffffffffffffffff81111561201f5761201e611e07565b5b61202b84828501611f2c565b604083015250606061203f84828501611f6a565b606083015250608061205384828501611fa2565b60808301525060a061206784828501611e2d565b60a08301525092915050565b60006020828403121561208957612088611d6c565b5b600082013567ffffffffffffffff8111156120a7576120a6611d71565b5b6120b384828501611fb7565b91505092915050565b6120c581611f7f565b82525050565b60006020820190506120e060008301846120bc565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61211b81611e0c565b82525050565b61212a81611e62565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561216a57808201518184015260208101905061214f565b60008484015250505050565b600061218182612130565b61218b818561213b565b935061219b81856020860161214c565b6121a481611d7b565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106121ef576121ee6121af565b5b50565b6000819050612200826121de565b919050565b6000612210826121f2565b9050919050565b61222081612205565b82525050565b61222f81611f7f565b82525050565b600060c08301600083015161224d6000860182612112565b5060208301516122606020860182612121565b50604083015184820360408601526122788282612176565b915050606083015161228d6060860182612217565b5060808301516122a06080860182612226565b5060a08301516122b360a0860182612112565b508091505092915050565b60006122ca8383612235565b905092915050565b6000602082019050919050565b60006122ea826120e6565b6122f481856120f1565b93508360208202850161230685612102565b8060005b85811015612342578484038952815161232385826122be565b945061232e836122d2565b925060208a0199505060018101905061230a565b50829750879550505050505092915050565b6000602082019050818103600083015261236e81846122df565b905092915050565b61237f81611e62565b82525050565b600060208201905061239a6000830184612376565b92915050565b600067ffffffffffffffff8211156123bb576123ba611d8c565b5b602082029050602081019050919050565b600080fd5b60006123e46123df846123a0565b611dec565b90508083825260208201905060208402830185811115612407576124066123cc565b5b835b8181101561244e57803567ffffffffffffffff81111561242c5761242b611ea0565b5b8086016124398982611fb7565b85526020850194505050602081019050612409565b5050509392505050565b600082601f83011261246d5761246c611ea0565b5b813561247d8482602086016123d1565b91505092915050565b6000806040838503121561249d5761249c611d6c565b5b60006124ab85828601611e8b565b925050602083013567ffffffffffffffff8111156124cc576124cb611d71565b5b6124d885828601612458565b9150509250929050565b6124eb81611e0c565b82525050565b600060208201905061250660008301846124e2565b92915050565b60006020828403121561252257612521611d6c565b5b600061253084828501611e8b565b91505092915050565b60006020828403121561254f5761254e611d6c565b5b600061255d84828501611e2d565b91505092915050565b600060c08301600083015161257e6000860182612112565b5060208301516125916020860182612121565b50604083015184820360408601526125a98282612176565b91505060608301516125be6060860182612217565b5060808301516125d16080860182612226565b5060a08301516125e460a0860182612112565b508091505092915050565b600060208201905081810360008301526126098184612566565b905092915050565b600082825260208201905092915050565b7f576f726b666c6f7753746f726167653a206f7065726174696f6e206973206e6f60008201527f74207065726d6974746564000000000000000000000000000000000000000000602082015250565b600061267e602b83612611565b915061268982612622565b604082019050919050565b600060208201905081810360008301526126ad81612671565b9050919050565b7f576f726b666c6f7753746f726167653a206661696c656420746f20757064617460008201527f6520776f726b666c6f7700000000000000000000000000000000000000000000602082015250565b6000612710602a83612611565b915061271b826126b4565b604082019050919050565b6000602082019050818103600083015261273f81612703565b9050919050565b7f576f726b666c6f7753746f726167653a206661696c656420746f20616464207760008201527f6f726b666c6f7700000000000000000000000000000000000000000000000000602082015250565b60006127a2602783612611565b91506127ad82612746565b604082019050919050565b600060208201905081810360008301526127d181612795565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061280e602083612611565b9150612819826127d8565b602082019050919050565b6000602082019050818103600083015261283d81612801565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128ad82611e0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128df576128de612873565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061293157607f821691505b602082108103612944576129436128ea565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261296f565b6129b6868361296f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006129f36129ee6129e984611e0c565b6129ce565b611e0c565b9050919050565b6000819050919050565b612a0d836129d8565b612a21612a19826129fa565b84845461297c565b825550505050565b600090565b612a36612a29565b612a41818484612a04565b505050565b5b81811015612a6557612a5a600082612a2e565b600181019050612a47565b5050565b601f821115612aaa57612a7b8161294a565b612a848461295f565b81016020851015612a93578190505b612aa7612a9f8561295f565b830182612a46565b50505b505050565b600082821c905092915050565b6000612acd60001984600802612aaf565b1980831691505092915050565b6000612ae68383612abc565b9150826002028217905092915050565b612aff82612130565b67ffffffffffffffff811115612b1857612b17611d8c565b5b612b228254612919565b612b2d828285612a69565b600060209050601f831160018114612b605760008415612b4e578287015190505b612b588582612ada565b865550612bc0565b601f198416612b6e8661294a565b60005b82811015612b9657848901518255600182019150602085019450602081019050612b71565b86831015612bb35784890151612baf601f891682612abc565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b600060ff82169050919050565b6000612bfa612bf5612bf084612bc8565b6129ce565b612bd2565b9050919050565b612c0a81612bdf565b82525050565b6000602082019050612c256000830184612c01565b92915050565b6000612c3682611e0c565b9150612c4183611e0c565b9250828203905081811115612c5957612c58612873565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612cbb602683612611565b9150612cc682612c5f565b604082019050919050565b60006020820190508181036000830152612cea81612cae565b9050919050565b7f576f726b666c6f7753746f726167653a206661696c656420746f2072656d6f7660008201527f6520776f726b666c6f7700000000000000000000000000000000000000000000602082015250565b6000612d4d602a83612611565b9150612d5882612cf1565b604082019050919050565b60006020820190508181036000830152612d7c81612d40565b9050919050565b600067ffffffffffffffff82169050919050565b6000612da282612d83565b915067ffffffffffffffff8203612dbc57612dbb612873565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612e23602e83612611565b9150612e2e82612dc7565b604082019050919050565b60006020820190508181036000830152612e5281612e16565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000612e9382612d83565b915060008203612ea657612ea5612873565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212202c37e917cd3927860c62790869d2ada4ab53f48d2f414605d695847ad9e2d3ef64736f6c63430008120033",
}

// WorkflowStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use WorkflowStorageMetaData.ABI instead.
var WorkflowStorageABI = WorkflowStorageMetaData.ABI

// WorkflowStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WorkflowStorageMetaData.Bin instead.
var WorkflowStorageBin = WorkflowStorageMetaData.Bin

// DeployWorkflowStorage deploys a new Ethereum contract, binding an instance of WorkflowStorage to it.
func DeployWorkflowStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WorkflowStorage, error) {
	parsed, err := WorkflowStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WorkflowStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WorkflowStorage{WorkflowStorageCaller: WorkflowStorageCaller{contract: contract}, WorkflowStorageTransactor: WorkflowStorageTransactor{contract: contract}, WorkflowStorageFilterer: WorkflowStorageFilterer{contract: contract}}, nil
}

// WorkflowStorage is an auto generated Go binding around an Ethereum contract.
type WorkflowStorage struct {
	WorkflowStorageCaller     // Read-only binding to the contract
	WorkflowStorageTransactor // Write-only binding to the contract
	WorkflowStorageFilterer   // Log filterer for contract events
}

// WorkflowStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type WorkflowStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WorkflowStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WorkflowStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WorkflowStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WorkflowStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WorkflowStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WorkflowStorageSession struct {
	Contract     *WorkflowStorage  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WorkflowStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WorkflowStorageCallerSession struct {
	Contract *WorkflowStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// WorkflowStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WorkflowStorageTransactorSession struct {
	Contract     *WorkflowStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// WorkflowStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type WorkflowStorageRaw struct {
	Contract *WorkflowStorage // Generic contract binding to access the raw methods on
}

// WorkflowStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WorkflowStorageCallerRaw struct {
	Contract *WorkflowStorageCaller // Generic read-only contract binding to access the raw methods on
}

// WorkflowStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WorkflowStorageTransactorRaw struct {
	Contract *WorkflowStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWorkflowStorage creates a new instance of WorkflowStorage, bound to a specific deployed contract.
func NewWorkflowStorage(address common.Address, backend bind.ContractBackend) (*WorkflowStorage, error) {
	contract, err := bindWorkflowStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WorkflowStorage{WorkflowStorageCaller: WorkflowStorageCaller{contract: contract}, WorkflowStorageTransactor: WorkflowStorageTransactor{contract: contract}, WorkflowStorageFilterer: WorkflowStorageFilterer{contract: contract}}, nil
}

// NewWorkflowStorageCaller creates a new read-only instance of WorkflowStorage, bound to a specific deployed contract.
func NewWorkflowStorageCaller(address common.Address, caller bind.ContractCaller) (*WorkflowStorageCaller, error) {
	contract, err := bindWorkflowStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WorkflowStorageCaller{contract: contract}, nil
}

// NewWorkflowStorageTransactor creates a new write-only instance of WorkflowStorage, bound to a specific deployed contract.
func NewWorkflowStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*WorkflowStorageTransactor, error) {
	contract, err := bindWorkflowStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WorkflowStorageTransactor{contract: contract}, nil
}

// NewWorkflowStorageFilterer creates a new log filterer instance of WorkflowStorage, bound to a specific deployed contract.
func NewWorkflowStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*WorkflowStorageFilterer, error) {
	contract, err := bindWorkflowStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WorkflowStorageFilterer{contract: contract}, nil
}

// bindWorkflowStorage binds a generic wrapper to an already deployed contract.
func bindWorkflowStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WorkflowStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WorkflowStorage *WorkflowStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WorkflowStorage.Contract.WorkflowStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WorkflowStorage *WorkflowStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.WorkflowStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WorkflowStorage *WorkflowStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.WorkflowStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WorkflowStorage *WorkflowStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WorkflowStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WorkflowStorage *WorkflowStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WorkflowStorage *WorkflowStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.contract.Transact(opts, method, params...)
}

// Contains is a free data retrieval call binding the contract method 0xc34052e0.
//
// Solidity: function contains(uint256 id) view returns(bool)
func (_WorkflowStorage *WorkflowStorageCaller) Contains(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "contains", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contains is a free data retrieval call binding the contract method 0xc34052e0.
//
// Solidity: function contains(uint256 id) view returns(bool)
func (_WorkflowStorage *WorkflowStorageSession) Contains(id *big.Int) (bool, error) {
	return _WorkflowStorage.Contract.Contains(&_WorkflowStorage.CallOpts, id)
}

// Contains is a free data retrieval call binding the contract method 0xc34052e0.
//
// Solidity: function contains(uint256 id) view returns(bool)
func (_WorkflowStorage *WorkflowStorageCallerSession) Contains(id *big.Int) (bool, error) {
	return _WorkflowStorage.Contract.Contains(&_WorkflowStorage.CallOpts, id)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256))
func (_WorkflowStorage *WorkflowStorageCaller) GetWorkflow(opts *bind.CallOpts, id *big.Int) (Workflow, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "getWorkflow", id)

	if err != nil {
		return *new(Workflow), err
	}

	out0 := *abi.ConvertType(out[0], new(Workflow)).(*Workflow)

	return out0, err

}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256))
func (_WorkflowStorage *WorkflowStorageSession) GetWorkflow(id *big.Int) (Workflow, error) {
	return _WorkflowStorage.Contract.GetWorkflow(&_WorkflowStorage.CallOpts, id)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 id) view returns((uint256,address,bytes,uint8,bool,uint256))
func (_WorkflowStorage *WorkflowStorageCallerSession) GetWorkflow(id *big.Int) (Workflow, error) {
	return _WorkflowStorage.Contract.GetWorkflow(&_WorkflowStorage.CallOpts, id)
}

// GetWorkflows is a free data retrieval call binding the contract method 0x7099588f.
//
// Solidity: function getWorkflows() view returns((uint256,address,bytes,uint8,bool,uint256)[])
func (_WorkflowStorage *WorkflowStorageCaller) GetWorkflows(opts *bind.CallOpts) ([]Workflow, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "getWorkflows")

	if err != nil {
		return *new([]Workflow), err
	}

	out0 := *abi.ConvertType(out[0], new([]Workflow)).(*[]Workflow)

	return out0, err

}

// GetWorkflows is a free data retrieval call binding the contract method 0x7099588f.
//
// Solidity: function getWorkflows() view returns((uint256,address,bytes,uint8,bool,uint256)[])
func (_WorkflowStorage *WorkflowStorageSession) GetWorkflows() ([]Workflow, error) {
	return _WorkflowStorage.Contract.GetWorkflows(&_WorkflowStorage.CallOpts)
}

// GetWorkflows is a free data retrieval call binding the contract method 0x7099588f.
//
// Solidity: function getWorkflows() view returns((uint256,address,bytes,uint8,bool,uint256)[])
func (_WorkflowStorage *WorkflowStorageCallerSession) GetWorkflows() ([]Workflow, error) {
	return _WorkflowStorage.Contract.GetWorkflows(&_WorkflowStorage.CallOpts)
}

// GetWorkflowsPerAddress is a free data retrieval call binding the contract method 0xf350ea26.
//
// Solidity: function getWorkflowsPerAddress(address owner) view returns(uint256)
func (_WorkflowStorage *WorkflowStorageCaller) GetWorkflowsPerAddress(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "getWorkflowsPerAddress", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWorkflowsPerAddress is a free data retrieval call binding the contract method 0xf350ea26.
//
// Solidity: function getWorkflowsPerAddress(address owner) view returns(uint256)
func (_WorkflowStorage *WorkflowStorageSession) GetWorkflowsPerAddress(owner common.Address) (*big.Int, error) {
	return _WorkflowStorage.Contract.GetWorkflowsPerAddress(&_WorkflowStorage.CallOpts, owner)
}

// GetWorkflowsPerAddress is a free data retrieval call binding the contract method 0xf350ea26.
//
// Solidity: function getWorkflowsPerAddress(address owner) view returns(uint256)
func (_WorkflowStorage *WorkflowStorageCallerSession) GetWorkflowsPerAddress(owner common.Address) (*big.Int, error) {
	return _WorkflowStorage.Contract.GetWorkflowsPerAddress(&_WorkflowStorage.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WorkflowStorage *WorkflowStorageCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WorkflowStorage *WorkflowStorageSession) Owner() (common.Address, error) {
	return _WorkflowStorage.Contract.Owner(&_WorkflowStorage.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_WorkflowStorage *WorkflowStorageCallerSession) Owner() (common.Address, error) {
	return _WorkflowStorage.Contract.Owner(&_WorkflowStorage.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_WorkflowStorage *WorkflowStorageCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_WorkflowStorage *WorkflowStorageSession) Registry() (common.Address, error) {
	return _WorkflowStorage.Contract.Registry(&_WorkflowStorage.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_WorkflowStorage *WorkflowStorageCallerSession) Registry() (common.Address, error) {
	return _WorkflowStorage.Contract.Registry(&_WorkflowStorage.CallOpts)
}

// Size is a free data retrieval call binding the contract method 0x949d225d.
//
// Solidity: function size() view returns(uint256)
func (_WorkflowStorage *WorkflowStorageCaller) Size(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WorkflowStorage.contract.Call(opts, &out, "size")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Size is a free data retrieval call binding the contract method 0x949d225d.
//
// Solidity: function size() view returns(uint256)
func (_WorkflowStorage *WorkflowStorageSession) Size() (*big.Int, error) {
	return _WorkflowStorage.Contract.Size(&_WorkflowStorage.CallOpts)
}

// Size is a free data retrieval call binding the contract method 0x949d225d.
//
// Solidity: function size() view returns(uint256)
func (_WorkflowStorage *WorkflowStorageCallerSession) Size() (*big.Int, error) {
	return _WorkflowStorage.Contract.Size(&_WorkflowStorage.CallOpts)
}

// Clear is a paid mutator transaction binding the contract method 0x52efea6e.
//
// Solidity: function clear() returns(bool)
func (_WorkflowStorage *WorkflowStorageTransactor) Clear(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "clear")
}

// Clear is a paid mutator transaction binding the contract method 0x52efea6e.
//
// Solidity: function clear() returns(bool)
func (_WorkflowStorage *WorkflowStorageSession) Clear() (*types.Transaction, error) {
	return _WorkflowStorage.Contract.Clear(&_WorkflowStorage.TransactOpts)
}

// Clear is a paid mutator transaction binding the contract method 0x52efea6e.
//
// Solidity: function clear() returns(bool)
func (_WorkflowStorage *WorkflowStorageTransactorSession) Clear() (*types.Transaction, error) {
	return _WorkflowStorage.Contract.Clear(&_WorkflowStorage.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8ef93524.
//
// Solidity: function initialize(address _registry, (uint256,address,bytes,uint8,bool,uint256)[] _workflows) returns()
func (_WorkflowStorage *WorkflowStorageTransactor) Initialize(opts *bind.TransactOpts, _registry common.Address, _workflows []Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "initialize", _registry, _workflows)
}

// Initialize is a paid mutator transaction binding the contract method 0x8ef93524.
//
// Solidity: function initialize(address _registry, (uint256,address,bytes,uint8,bool,uint256)[] _workflows) returns()
func (_WorkflowStorage *WorkflowStorageSession) Initialize(_registry common.Address, _workflows []Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.Initialize(&_WorkflowStorage.TransactOpts, _registry, _workflows)
}

// Initialize is a paid mutator transaction binding the contract method 0x8ef93524.
//
// Solidity: function initialize(address _registry, (uint256,address,bytes,uint8,bool,uint256)[] _workflows) returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) Initialize(_registry common.Address, _workflows []Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.Initialize(&_WorkflowStorage.TransactOpts, _registry, _workflows)
}

// MustAdd is a paid mutator transaction binding the contract method 0x4f033ba7.
//
// Solidity: function mustAdd((uint256,address,bytes,uint8,bool,uint256) workflow) returns()
func (_WorkflowStorage *WorkflowStorageTransactor) MustAdd(opts *bind.TransactOpts, workflow Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "mustAdd", workflow)
}

// MustAdd is a paid mutator transaction binding the contract method 0x4f033ba7.
//
// Solidity: function mustAdd((uint256,address,bytes,uint8,bool,uint256) workflow) returns()
func (_WorkflowStorage *WorkflowStorageSession) MustAdd(workflow Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.MustAdd(&_WorkflowStorage.TransactOpts, workflow)
}

// MustAdd is a paid mutator transaction binding the contract method 0x4f033ba7.
//
// Solidity: function mustAdd((uint256,address,bytes,uint8,bool,uint256) workflow) returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) MustAdd(workflow Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.MustAdd(&_WorkflowStorage.TransactOpts, workflow)
}

// MustRemove is a paid mutator transaction binding the contract method 0xfe14018e.
//
// Solidity: function mustRemove(uint256 id) returns()
func (_WorkflowStorage *WorkflowStorageTransactor) MustRemove(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "mustRemove", id)
}

// MustRemove is a paid mutator transaction binding the contract method 0xfe14018e.
//
// Solidity: function mustRemove(uint256 id) returns()
func (_WorkflowStorage *WorkflowStorageSession) MustRemove(id *big.Int) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.MustRemove(&_WorkflowStorage.TransactOpts, id)
}

// MustRemove is a paid mutator transaction binding the contract method 0xfe14018e.
//
// Solidity: function mustRemove(uint256 id) returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) MustRemove(id *big.Int) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.MustRemove(&_WorkflowStorage.TransactOpts, id)
}

// MustUpdate is a paid mutator transaction binding the contract method 0x470f9c78.
//
// Solidity: function mustUpdate((uint256,address,bytes,uint8,bool,uint256) workflow) returns()
func (_WorkflowStorage *WorkflowStorageTransactor) MustUpdate(opts *bind.TransactOpts, workflow Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "mustUpdate", workflow)
}

// MustUpdate is a paid mutator transaction binding the contract method 0x470f9c78.
//
// Solidity: function mustUpdate((uint256,address,bytes,uint8,bool,uint256) workflow) returns()
func (_WorkflowStorage *WorkflowStorageSession) MustUpdate(workflow Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.MustUpdate(&_WorkflowStorage.TransactOpts, workflow)
}

// MustUpdate is a paid mutator transaction binding the contract method 0x470f9c78.
//
// Solidity: function mustUpdate((uint256,address,bytes,uint8,bool,uint256) workflow) returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) MustUpdate(workflow Workflow) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.MustUpdate(&_WorkflowStorage.TransactOpts, workflow)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WorkflowStorage *WorkflowStorageTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WorkflowStorage *WorkflowStorageSession) RenounceOwnership() (*types.Transaction, error) {
	return _WorkflowStorage.Contract.RenounceOwnership(&_WorkflowStorage.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _WorkflowStorage.Contract.RenounceOwnership(&_WorkflowStorage.TransactOpts)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _registry) returns()
func (_WorkflowStorage *WorkflowStorageTransactor) SetRegistry(opts *bind.TransactOpts, _registry common.Address) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "setRegistry", _registry)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _registry) returns()
func (_WorkflowStorage *WorkflowStorageSession) SetRegistry(_registry common.Address) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.SetRegistry(&_WorkflowStorage.TransactOpts, _registry)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _registry) returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) SetRegistry(_registry common.Address) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.SetRegistry(&_WorkflowStorage.TransactOpts, _registry)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WorkflowStorage *WorkflowStorageTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _WorkflowStorage.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WorkflowStorage *WorkflowStorageSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.TransferOwnership(&_WorkflowStorage.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_WorkflowStorage *WorkflowStorageTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _WorkflowStorage.Contract.TransferOwnership(&_WorkflowStorage.TransactOpts, newOwner)
}

// WorkflowStorageInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the WorkflowStorage contract.
type WorkflowStorageInitializedIterator struct {
	Event *WorkflowStorageInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WorkflowStorageInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WorkflowStorageInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WorkflowStorageInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WorkflowStorageInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WorkflowStorageInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WorkflowStorageInitialized represents a Initialized event raised by the WorkflowStorage contract.
type WorkflowStorageInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_WorkflowStorage *WorkflowStorageFilterer) FilterInitialized(opts *bind.FilterOpts) (*WorkflowStorageInitializedIterator, error) {

	logs, sub, err := _WorkflowStorage.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &WorkflowStorageInitializedIterator{contract: _WorkflowStorage.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_WorkflowStorage *WorkflowStorageFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *WorkflowStorageInitialized) (event.Subscription, error) {

	logs, sub, err := _WorkflowStorage.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WorkflowStorageInitialized)
				if err := _WorkflowStorage.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_WorkflowStorage *WorkflowStorageFilterer) ParseInitialized(log types.Log) (*WorkflowStorageInitialized, error) {
	event := new(WorkflowStorageInitialized)
	if err := _WorkflowStorage.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WorkflowStorageOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the WorkflowStorage contract.
type WorkflowStorageOwnershipTransferredIterator struct {
	Event *WorkflowStorageOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WorkflowStorageOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WorkflowStorageOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WorkflowStorageOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WorkflowStorageOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WorkflowStorageOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WorkflowStorageOwnershipTransferred represents a OwnershipTransferred event raised by the WorkflowStorage contract.
type WorkflowStorageOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WorkflowStorage *WorkflowStorageFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WorkflowStorageOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WorkflowStorage.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WorkflowStorageOwnershipTransferredIterator{contract: _WorkflowStorage.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WorkflowStorage *WorkflowStorageFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WorkflowStorageOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _WorkflowStorage.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WorkflowStorageOwnershipTransferred)
				if err := _WorkflowStorage.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_WorkflowStorage *WorkflowStorageFilterer) ParseOwnershipTransferred(log types.Log) (*WorkflowStorageOwnershipTransferred, error) {
	event := new(WorkflowStorageOwnershipTransferred)
	if err := _WorkflowStorage.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
