// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package system

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DKGMetaData contains all meta data concerning the DKG contract.
var DKGMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundDataFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"RoundDataProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"SignerAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectiveSigner\",\"type\":\"address\"}],\"name\":\"SignerVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"ThresholdSignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"ValidatorsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DKG_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DISTRIBUTION_POOL_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLASHING_VOTING_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPORTED_TOKENS_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"contractContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlinePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGenerationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundBroadcastCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getRoundBroadcastData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumDKG.GenerationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadlinePeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isCurrentValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"isRoundFilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActiveGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_rawData\",\"type\":\"bytes\"}],\"name\":\"roundBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadlinePeriod\",\"type\":\"uint256\"}],\"name\":\"setDeadlinePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerToGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"voteSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613eaa806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806378a5c206116100de578063c1718e5311610097578063cd5fcd1511610071578063cd5fcd15146104b0578063cd6dc687146104e0578063ce119a8a146104fc578063faaa8a641461051a5761018e565b8063c1718e5314610446578063c5f9dff014610476578063c88bc067146104945761018e565b806378a5c2061461038357806382651c0d146103a1578063abf410e5146103bd578063ad51db6a146103db578063ad8b0e941461040b578063b32805c31461043c5761018e565b80633a9783f31161014b57806355614fcc1161012557806355614fcc146102e7578063561ff9a9146103175780635c622a0e146103355780636db24262146103655761018e565b80633a9783f314610269578063471f40fb1461028757806350c8548f146102b75761018e565b8063100c11c31461019357806311af0a20146101af578063130b9702146101cd5780631a296e02146101fd5780631ea0f0361461021b57806323f2a73f14610239575b600080fd5b6101ad60048036038101906101a8919061287f565b610538565b005b6101b76109a6565b6040516101c491906128fd565b60405180910390f35b6101e760048036038101906101e29190612976565b6109ac565b6040516101f49190612a48565b60405180910390f35b610205610ab6565b6040516102129190612a79565b60405180910390f35b610223610b05565b60405161023091906128fd565b60405180910390f35b610253600480360381019061024e9190612a94565b610b12565b6040516102609190612aef565b60405180910390f35b610271610ba3565b60405161027e9190612b5f565b60405180910390f35b6102a1600480360381019061029c9190612b81565b610bdc565b6040516102ae9190612c6c565b60405180910390f35b6102d160048036038101906102cc9190612c8e565b610c8f565b6040516102de91906128fd565b60405180910390f35b61030160048036038101906102fc9190612cce565b610cd3565b60405161030e9190612aef565b60405180910390f35b61031f610d5a565b60405161032c9190612b5f565b60405180910390f35b61034f600480360381019061034a9190612b81565b610d93565b60405161035c9190612d72565b60405180910390f35b61036d610e55565b60405161037a91906128fd565b60405180910390f35b61038b610e5b565b6040516103989190612b5f565b60405180910390f35b6103bb60048036038101906103b69190612b81565b610e94565b005b6103c5610f53565b6040516103d29190612dec565b60405180910390f35b6103f560048036038101906103f09190612cce565b610f79565b60405161040291906128fd565b60405180910390f35b61042560048036038101906104209190612b81565b610f91565b604051610433929190612e07565b60405180910390f35b610444610fe5565b005b610460600480360381019061045b9190612c8e565b611470565b60405161046d9190612aef565b60405180910390f35b61047e6114de565b60405161048b9190612c6c565b60405180910390f35b6104ae60048036038101906104a99190612e30565b6115a0565b005b6104ca60048036038101906104c59190612b81565b611ba5565b6040516104d791906128fd565b60405180910390f35b6104fa60048036038101906104f59190612e9f565b611bd7565b005b610504611d75565b6040516105119190612b5f565b60405180910390f35b610522611dae565b60405161052f9190612b5f565b60405180910390f35b82806002805490501180156105b957506002818154811061055c5761055b612edf565b5b906000526020600020906007020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ef90612f5a565b60405180910390fd5b836001846106069190612fa9565b600081148061067557506002828154811061062457610623612edf565b5b9060005260206000209060070201600101805490506002838154811061064d5761064c612edf565b5b9060005260206000209060070201600601600083815260200190815260200160002060000154145b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90613029565b60405180910390fd5b85856000600283815481106106cc576106cb612edf565b5b9060005260206000209060070201600601600083815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461073990613078565b90501461077b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610772906130f5565b60405180910390fd5b87600060028111156107905761078f612cfb565b5b61079982610d93565b60028111156107ab576107aa612cfb565b5b146107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290613161565b60405180910390fd5b600289815481106107ff576107fe612edf565b5b90600052602060002090600702016006016000898152602001908152602001600020600001600081548092919061083590613181565b91905055508660028a8154811061084f5761084e612edf565b5b906000526020600020906007020160060160008a815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816108bd919061336b565b507fca56b6e939787236f062daae635dc1afa2b46ad9a24ad09aa98833c6370096068989336040516108f19392919061343d565b60405180910390a16002898154811061090d5761090c612edf565b5b90600052602060002090600702016001018054905060028a8154811061093657610935612edf565b5b906000526020600020906007020160060160008a8152602001908152602001600020600001540361099b577fab74ab6fc458020cf5d6116f5c013ebf3c0ad518f10de1391427c225f75db5f98989604051610992929190613474565b60405180910390a15b505050505050505050565b60035481565b6060600284815481106109c2576109c1612edf565b5b9060005260206000209060070201600601600084815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610a2f90613078565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5b90613078565b8015610aa85780601f10610a7d57610100808354040283529160200191610aa8565b820191906000526020600020905b815481529060010190602001808311610a8b57829003601f168201915b505050505090509392505050565b6000600260035481548110610ace57610acd612edf565b5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600280549050905090565b6000826002805490501115610b985760028381548110610b3557610b34612edf565b5b906000526020600020906007020160030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050610b9d565b600090505b92915050565b6040518060400160405280600381526020017f646b67000000000000000000000000000000000000000000000000000000000081525081565b606060028281548110610bf257610bf1612edf565b5b9060005260206000209060070201600101805480602002602001604051908101604052809291908181526020018280548015610c8357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c39575b50505050509050919050565b600060028381548110610ca557610ca4612edf565b5b9060005260206000209060070201600601600083815260200190815260200160002060000154905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff166323f2a73f600354846040518363ffffffff1660e01b8152600401610d1292919061349d565b602060405180830381865afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5391906134f2565b9050919050565b6040518060400160405280600781526020017f7374616b696e670000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff1660028381548110610dc057610dbf612edf565b5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e165760029050610e50565b4360028381548110610e2b57610e2a612edf565b5b90600052602060002090600702016002015410610e4b5760009050610e50565b600190505b919050565b60045481565b6040518060400160405280601081526020017f737570706f727465642d746f6b656e730000000000000000000000000000000081525081565b600260035481548110610eaa57610ea9612edf565b5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f409061356b565b60405180910390fd5b8060048190555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b60028181548110610fa157600080fd5b90600052602060002090600702016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905082565b60006002805490509050600060026001836110009190612fa9565b8154811061101157611010612edf565b5b90600052602060002090600702019050600080600061102e611de7565b73ffffffffffffffffffffffffffffffffffffffff1663b7ab4db56040518163ffffffff1660e01b8152600401600060405180830381865afa158015611078573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110a19190613668565b90506000815167ffffffffffffffff8111156110c0576110bf612754565b5b6040519080825280602002602001820160405280156110ee5781602001602082028036833780820191505090505b50905060005b825181101561120d57600083828151811061111257611111612edf565b5b60200260200101519050611127816001611ebe565b806111395750611138816002611ebe565b5b1561114457506111fa565b8660030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661119c57600194505b808387815181106111b0576111af612edf565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085806111f590613181565b965050505b808061120590613181565b9150506110f4565b50600085600101805490509050600285108061123257508085148015611231575083155b5b15611243575050505050505061146e565b60026001816001815401808255809150500390600052602060002090505060005b858110156113b457600288815481106112805761127f612edf565b5b90600052602060002090600702016001018382815181106112a4576112a3612edf565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002898154811061132257611321612edf565b5b9060005260206000209060070201600301600085848151811061134857611347612edf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806113ac90613181565b915050611264565b50600454436113c391906136b1565b600288815481106113d7576113d6612edf565b5b906000526020600020906007020160020181905550866003819055507feadf82e9da8b1722bf1769001bdd6d52bb429e0745d9116f69495cedc7db8a9587836040516114249291906136e5565b60405180910390a17fab74ab6fc458020cf5d6116f5c013ebf3c0ad518f10de1391427c225f75db5f987600060405161145e929190613750565b60405180910390a1505050505050505b565b60006002838154811061148657611485612edf565b5b906000526020600020906007020160010180549050600284815481106114af576114ae612edf565b5b906000526020600020906007020160060160008481526020019081526020016000206000015414905092915050565b6060600260016002805490506114f49190612fa9565b8154811061150557611504612edf565b5b906000526020600020906007020160010180548060200260200160405190810160405280929190818152602001828054801561159657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161154c575b5050505050905090565b82806002805490501180156116215750600281815481106115c4576115c3612edf565b5b906000526020600020906007020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165790612f5a565b60405180910390fd5b83600360008114806116d257506002828154811061168157611680612edf565b5b906000526020600020906007020160010180549050600283815481106116aa576116a9612edf565b5b9060005260206000209060070201600601600083815260200190815260200160002060000154145b611711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170890613029565b60405180910390fd5b60006002878154811061172757611726612edf565b5b90600052602060002090600702019050438160020154101561177e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611775906137c5565b60405180910390fd5b60006117d0866117c26040518060400160405280600681526020017f7665726966790000000000000000000000000000000000000000000000000000815250611f4b565b611f8690919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183790613831565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168260040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611910576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119079061389d565b60405180910390fd5b868260040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160050160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906119e290613181565b91905055507f4686ba7a5df3cb2d9979ee16ec58c7ea0b92273d836278488fb07c732cf8ec19883389604051611a1a939291906138bd565b60405180910390a16000611a6f898460050160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fad565b905060008873ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050818015611ad35750805b15611b9957888460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa6d3de2b2ccbce3cf736f5f8e515fdad82235d0d1f1ff8a0ad14f98c48af0a468a8a604051611b9092919061349d565b60405180910390a15b50505050505050505050565b600060028281548110611bbb57611bba612edf565b5b9060005260206000209060070201600101805490509050919050565b6000611be36001611fed565b90508015611c07576001600060016101000a81548160ff0219169083151502179055505b600260018160018154018082558091505003906000526020600020905050336002600081548110611c3b57611c3a612edf565b5b906000526020600020906007020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816004819055508015611d705760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611d67919061393c565b60405180910390a15b505050565b6040518060400160405280601881526020017f7265776172642d646973747269627574696f6e2d706f6f6c000000000000000081525081565b6040518060400160405280600f81526020017f736c617368696e672d766f74696e67000000000000000000000000000000000081525081565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663358177736040518060400160405280600781526020017f7374616b696e67000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401611e789190612b5f565b602060405180830381865afa158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb99190613957565b905090565b6000611ec86120dd565b73ffffffffffffffffffffffffffffffffffffffff1663ed2da0ac84846040518363ffffffff1660e01b8152600401611f029291906139cc565b602060405180830381865afa158015611f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4391906134f2565b905092915050565b6000611f5782516121b4565b82604051602001611f69929190613ab9565b604051602081830303815290604052805190602001209050919050565b6000806000611f958585612314565b91509150611fa281612395565b819250505092915050565b60006002808481548110611fc457611fc3612edf565b5b906000526020600020906007020160010180549050611fe39190613b17565b8211905092915050565b60008060019054906101000a900460ff16156120645760018260ff1614801561201c575061201a30612561565b155b61205b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205290613bba565b60405180910390fd5b600090506120d8565b8160ff1660008054906101000a900460ff1660ff16106120b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b090613bba565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663358177736040518060400160405280600f81526020017f736c617368696e672d766f74696e6700000000000000000000000000000000008152506040518263ffffffff1660e01b815260040161216e9190612b5f565b602060405180830381865afa15801561218b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121af9190613957565b905090565b6060600082036121fb576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061230f565b600082905060005b6000821461222d57808061221690613181565b915050600a826122269190613b17565b9150612203565b60008167ffffffffffffffff81111561224957612248612754565b5b6040519080825280601f01601f19166020018201604052801561227b5781602001600182028036833780820191505090505b5090505b60008514612308576001826122949190612fa9565b9150600a856122a39190613bda565b60306122af91906136b1565b60f81b8183815181106122c5576122c4612edf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856123019190613b17565b945061227f565b8093505050505b919050565b60008060418351036123555760008060006020860151925060408601519150606086015160001a905061234987828585612584565b9450945050505061238e565b604083510361238557600080602085015191506040850151905061237a868383612690565b93509350505061238e565b60006002915091505b9250929050565b600060048111156123a9576123a8612cfb565b5b8160048111156123bc576123bb612cfb565b5b031561255e57600160048111156123d6576123d5612cfb565b5b8160048111156123e9576123e8612cfb565b5b03612429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242090613c57565b60405180910390fd5b6002600481111561243d5761243c612cfb565b5b8160048111156124505761244f612cfb565b5b03612490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248790613cc3565b60405180910390fd5b600360048111156124a4576124a3612cfb565b5b8160048111156124b7576124b6612cfb565b5b036124f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ee90613d55565b60405180910390fd5b60048081111561250a57612509612cfb565b5b81600481111561251d5761251c612cfb565b5b0361255d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255490613de7565b60405180910390fd5b5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156125bf576000600391509150612687565b601b8560ff16141580156125d75750601c8560ff1614155b156125e9576000600491509150612687565b60006001878787876040516000815260200160405260405161260e9493929190613e2f565b6020604051602081039080840390855afa158015612630573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361267e57600060019250925050612687565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6126d391906136b1565b90506126e187828885612584565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61271681612703565b811461272157600080fd5b50565b6000813590506127338161270d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61278c82612743565b810181811067ffffffffffffffff821117156127ab576127aa612754565b5b80604052505050565b60006127be6126ef565b90506127ca8282612783565b919050565b600067ffffffffffffffff8211156127ea576127e9612754565b5b6127f382612743565b9050602081019050919050565b82818337600083830152505050565b600061282261281d846127cf565b6127b4565b90508281526020810184848401111561283e5761283d61273e565b5b612849848285612800565b509392505050565b600082601f83011261286657612865612739565b5b813561287684826020860161280f565b91505092915050565b600080600060608486031215612898576128976126f9565b5b60006128a686828701612724565b93505060206128b786828701612724565b925050604084013567ffffffffffffffff8111156128d8576128d76126fe565b5b6128e486828701612851565b9150509250925092565b6128f781612703565b82525050565b600060208201905061291260008301846128ee565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061294382612918565b9050919050565b61295381612938565b811461295e57600080fd5b50565b6000813590506129708161294a565b92915050565b60008060006060848603121561298f5761298e6126f9565b5b600061299d86828701612724565b93505060206129ae86828701612724565b92505060406129bf86828701612961565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a035780820151818401526020810190506129e8565b60008484015250505050565b6000612a1a826129c9565b612a2481856129d4565b9350612a348185602086016129e5565b612a3d81612743565b840191505092915050565b60006020820190508181036000830152612a628184612a0f565b905092915050565b612a7381612938565b82525050565b6000602082019050612a8e6000830184612a6a565b92915050565b60008060408385031215612aab57612aaa6126f9565b5b6000612ab985828601612724565b9250506020612aca85828601612961565b9150509250929050565b60008115159050919050565b612ae981612ad4565b82525050565b6000602082019050612b046000830184612ae0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612b3182612b0a565b612b3b8185612b15565b9350612b4b8185602086016129e5565b612b5481612743565b840191505092915050565b60006020820190508181036000830152612b798184612b26565b905092915050565b600060208284031215612b9757612b966126f9565b5b6000612ba584828501612724565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612be381612938565b82525050565b6000612bf58383612bda565b60208301905092915050565b6000602082019050919050565b6000612c1982612bae565b612c238185612bb9565b9350612c2e83612bca565b8060005b83811015612c5f578151612c468882612be9565b9750612c5183612c01565b925050600181019050612c32565b5085935050505092915050565b60006020820190508181036000830152612c868184612c0e565b905092915050565b60008060408385031215612ca557612ca46126f9565b5b6000612cb385828601612724565b9250506020612cc485828601612724565b9150509250929050565b600060208284031215612ce457612ce36126f9565b5b6000612cf284828501612961565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d3b57612d3a612cfb565b5b50565b6000819050612d4c82612d2a565b919050565b6000612d5c82612d3e565b9050919050565b612d6c81612d51565b82525050565b6000602082019050612d876000830184612d63565b92915050565b6000819050919050565b6000612db2612dad612da884612918565b612d8d565b612918565b9050919050565b6000612dc482612d97565b9050919050565b6000612dd682612db9565b9050919050565b612de681612dcb565b82525050565b6000602082019050612e016000830184612ddd565b92915050565b6000604082019050612e1c6000830185612a6a565b612e2960208301846128ee565b9392505050565b600080600060608486031215612e4957612e486126f9565b5b6000612e5786828701612724565b9350506020612e6886828701612961565b925050604084013567ffffffffffffffff811115612e8957612e886126fe565b5b612e9586828701612851565b9150509250925092565b60008060408385031215612eb657612eb56126f9565b5b6000612ec485828601612961565b9250506020612ed585828601612724565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f444b473a206e6f7420612076616c696461746f72000000000000000000000000600082015250565b6000612f44601483612b15565b9150612f4f82612f0e565b602082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fb482612703565b9150612fbf83612703565b9250828203905081811115612fd757612fd6612f7a565b5b92915050565b7f444b473a20726f756e6420776173206e6f742066696c6c656400000000000000600082015250565b6000613013601983612b15565b915061301e82612fdd565b602082019050919050565b6000602082019050818103600083015261304281613006565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061309057607f821691505b6020821081036130a3576130a2613049565b5b50919050565b7f444b473a20726f756e64206461746120616c72656164792070726f7669646564600082015250565b60006130df602083612b15565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f444b473a206e6f7420612070656e64696e672067656e65726174696f6e000000600082015250565b600061314b601d83612b15565b915061315682613115565b602082019050919050565b6000602082019050818103600083015261317a8161313e565b9050919050565b600061318c82612703565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131be576131bd612f7a565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261322b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131ee565b61323586836131ee565b95508019841693508086168417925050509392505050565b600061326861326361325e84612703565b612d8d565b612703565b9050919050565b6000819050919050565b6132828361324d565b61329661328e8261326f565b8484546131fb565b825550505050565b600090565b6132ab61329e565b6132b6818484613279565b505050565b5b818110156132da576132cf6000826132a3565b6001810190506132bc565b5050565b601f82111561331f576132f0816131c9565b6132f9846131de565b81016020851015613308578190505b61331c613314856131de565b8301826132bb565b50505b505050565b600082821c905092915050565b600061334260001984600802613324565b1980831691505092915050565b600061335b8383613331565b9150826002028217905092915050565b613374826129c9565b67ffffffffffffffff81111561338d5761338c612754565b5b6133978254613078565b6133a28282856132de565b600060209050601f8311600181146133d557600084156133c3578287015190505b6133cd858261334f565b865550613435565b601f1984166133e3866131c9565b60005b8281101561340b578489015182556001820191506020850194506020810190506133e6565b868310156134285784890151613424601f891682613331565b8355505b6001600288020188555050505b505050505050565b600060608201905061345260008301866128ee565b61345f60208301856128ee565b61346c6040830184612a6a565b949350505050565b600060408201905061348960008301856128ee565b61349660208301846128ee565b9392505050565b60006040820190506134b260008301856128ee565b6134bf6020830184612a6a565b9392505050565b6134cf81612ad4565b81146134da57600080fd5b50565b6000815190506134ec816134c6565b92915050565b600060208284031215613508576135076126f9565b5b6000613516848285016134dd565b91505092915050565b7f444b473a206e6f74206120616374697665207369676e65720000000000000000600082015250565b6000613555601883612b15565b91506135608261351f565b602082019050919050565b6000602082019050818103600083015261358481613548565b9050919050565b600067ffffffffffffffff8211156135a6576135a5612754565b5b602082029050602081019050919050565b600080fd5b6000815190506135cb8161294a565b92915050565b60006135e46135df8461358b565b6127b4565b90508083825260208201905060208402830185811115613607576136066135b7565b5b835b81811015613630578061361c88826135bc565b845260208401935050602081019050613609565b5050509392505050565b600082601f83011261364f5761364e612739565b5b815161365f8482602086016135d1565b91505092915050565b60006020828403121561367e5761367d6126f9565b5b600082015167ffffffffffffffff81111561369c5761369b6126fe565b5b6136a88482850161363a565b91505092915050565b60006136bc82612703565b91506136c783612703565b92508282019050808211156136df576136de612f7a565b5b92915050565b60006040820190506136fa60008301856128ee565b818103602083015261370c8184612c0e565b90509392505050565b6000819050919050565b600061373a61373561373084613715565b612d8d565b612703565b9050919050565b61374a8161371f565b82525050565b600060408201905061376560008301856128ee565b6137726020830184613741565b9392505050565b7f444b473a20766f74696e6720697320656e646564000000000000000000000000600082015250565b60006137af601483612b15565b91506137ba82613779565b602082019050919050565b600060208201905081810360008301526137de816137a2565b9050919050565b7f444b473a207369676e617475726520697320696e76616c696400000000000000600082015250565b600061381b601983612b15565b9150613826826137e5565b602082019050919050565b6000602082019050818103600083015261384a8161380e565b9050919050565b7f444b473a20616c726561647920766f7465640000000000000000000000000000600082015250565b6000613887601283612b15565b915061389282613851565b602082019050919050565b600060208201905081810360008301526138b68161387a565b9050919050565b60006060820190506138d260008301866128ee565b6138df6020830185612a6a565b6138ec6040830184612a6a565b949350505050565b6000819050919050565b600060ff82169050919050565b600061392661392161391c846138f4565b612d8d565b6138fe565b9050919050565b6139368161390b565b82525050565b6000602082019050613951600083018461392d565b92915050565b60006020828403121561396d5761396c6126f9565b5b600061397b848285016135bc565b91505092915050565b6005811061399557613994612cfb565b5b50565b60008190506139a682613984565b919050565b60006139b682613998565b9050919050565b6139c6816139ab565b82525050565b60006040820190506139e16000830185612a6a565b6139ee60208301846139bd565b9392505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000613a36601a836139f5565b9150613a4182613a00565b601a82019050919050565b6000613a5782612b0a565b613a6181856139f5565b9350613a718185602086016129e5565b80840191505092915050565b600081905092915050565b6000613a93826129c9565b613a9d8185613a7d565b9350613aad8185602086016129e5565b80840191505092915050565b6000613ac482613a29565b9150613ad08285613a4c565b9150613adc8284613a88565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613b2282612703565b9150613b2d83612703565b925082613b3d57613b3c613ae8565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613ba4602e83612b15565b9150613baf82613b48565b604082019050919050565b60006020820190508181036000830152613bd381613b97565b9050919050565b6000613be582612703565b9150613bf083612703565b925082613c0057613bff613ae8565b5b828206905092915050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613c41601883612b15565b9150613c4c82613c0b565b602082019050919050565b60006020820190508181036000830152613c7081613c34565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613cad601f83612b15565b9150613cb882613c77565b602082019050919050565b60006020820190508181036000830152613cdc81613ca0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d3f602283612b15565b9150613d4a82613ce3565b604082019050919050565b60006020820190508181036000830152613d6e81613d32565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613dd1602283612b15565b9150613ddc82613d75565b604082019050919050565b60006020820190508181036000830152613e0081613dc4565b9050919050565b6000819050919050565b613e1a81613e07565b82525050565b613e29816138fe565b82525050565b6000608082019050613e446000830187613e11565b613e516020830186613e20565b613e5e6040830185613e11565b613e6b6060830184613e11565b9594505050505056fea26469706673582212202f1367ccbca2414a40159ef7430bc396ea05796855887f5f8bb4239739e5577364736f6c63430008120033",
}

// DKGABI is the input ABI used to generate the binding from.
// Deprecated: Use DKGMetaData.ABI instead.
var DKGABI = DKGMetaData.ABI

// DKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DKGMetaData.Bin instead.
var DKGBin = DKGMetaData.Bin

// DeployDKG deploys a new Ethereum contract, binding an instance of DKG to it.
func DeployDKG(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DKG, error) {
	parsed, err := DKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DKGBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DKG{DKGCaller: DKGCaller{contract: contract}, DKGTransactor: DKGTransactor{contract: contract}, DKGFilterer: DKGFilterer{contract: contract}}, nil
}

// DKG is an auto generated Go binding around an Ethereum contract.
type DKG struct {
	DKGCaller     // Read-only binding to the contract
	DKGTransactor // Write-only binding to the contract
	DKGFilterer   // Log filterer for contract events
}

// DKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type DKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DKGSession struct {
	Contract     *DKG              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DKGCallerSession struct {
	Contract *DKGCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DKGTransactorSession struct {
	Contract     *DKGTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type DKGRaw struct {
	Contract *DKG // Generic contract binding to access the raw methods on
}

// DKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DKGCallerRaw struct {
	Contract *DKGCaller // Generic read-only contract binding to access the raw methods on
}

// DKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DKGTransactorRaw struct {
	Contract *DKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDKG creates a new instance of DKG, bound to a specific deployed contract.
func NewDKG(address common.Address, backend bind.ContractBackend) (*DKG, error) {
	contract, err := bindDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DKG{DKGCaller: DKGCaller{contract: contract}, DKGTransactor: DKGTransactor{contract: contract}, DKGFilterer: DKGFilterer{contract: contract}}, nil
}

// NewDKGCaller creates a new read-only instance of DKG, bound to a specific deployed contract.
func NewDKGCaller(address common.Address, caller bind.ContractCaller) (*DKGCaller, error) {
	contract, err := bindDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DKGCaller{contract: contract}, nil
}

// NewDKGTransactor creates a new write-only instance of DKG, bound to a specific deployed contract.
func NewDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*DKGTransactor, error) {
	contract, err := bindDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DKGTransactor{contract: contract}, nil
}

// NewDKGFilterer creates a new log filterer instance of DKG, bound to a specific deployed contract.
func NewDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*DKGFilterer, error) {
	contract, err := bindDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DKGFilterer{contract: contract}, nil
}

// bindDKG binds a generic wrapper to an already deployed contract.
func bindDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DKG *DKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DKG.Contract.DKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DKG *DKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DKG.Contract.DKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DKG *DKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DKG.Contract.DKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DKG *DKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DKG *DKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DKG *DKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DKG.Contract.contract.Transact(opts, method, params...)
}

// DKGKEY is a free data retrieval call binding the contract method 0x3a9783f3.
//
// Solidity: function DKG_KEY() view returns(string)
func (_DKG *DKGCaller) DKGKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "DKG_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DKGKEY is a free data retrieval call binding the contract method 0x3a9783f3.
//
// Solidity: function DKG_KEY() view returns(string)
func (_DKG *DKGSession) DKGKEY() (string, error) {
	return _DKG.Contract.DKGKEY(&_DKG.CallOpts)
}

// DKGKEY is a free data retrieval call binding the contract method 0x3a9783f3.
//
// Solidity: function DKG_KEY() view returns(string)
func (_DKG *DKGCallerSession) DKGKEY() (string, error) {
	return _DKG.Contract.DKGKEY(&_DKG.CallOpts)
}

// REWARDDISTRIBUTIONPOOLKEY is a free data retrieval call binding the contract method 0xce119a8a.
//
// Solidity: function REWARD_DISTRIBUTION_POOL_KEY() view returns(string)
func (_DKG *DKGCaller) REWARDDISTRIBUTIONPOOLKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "REWARD_DISTRIBUTION_POOL_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// REWARDDISTRIBUTIONPOOLKEY is a free data retrieval call binding the contract method 0xce119a8a.
//
// Solidity: function REWARD_DISTRIBUTION_POOL_KEY() view returns(string)
func (_DKG *DKGSession) REWARDDISTRIBUTIONPOOLKEY() (string, error) {
	return _DKG.Contract.REWARDDISTRIBUTIONPOOLKEY(&_DKG.CallOpts)
}

// REWARDDISTRIBUTIONPOOLKEY is a free data retrieval call binding the contract method 0xce119a8a.
//
// Solidity: function REWARD_DISTRIBUTION_POOL_KEY() view returns(string)
func (_DKG *DKGCallerSession) REWARDDISTRIBUTIONPOOLKEY() (string, error) {
	return _DKG.Contract.REWARDDISTRIBUTIONPOOLKEY(&_DKG.CallOpts)
}

// SLASHINGVOTINGKEY is a free data retrieval call binding the contract method 0xfaaa8a64.
//
// Solidity: function SLASHING_VOTING_KEY() view returns(string)
func (_DKG *DKGCaller) SLASHINGVOTINGKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "SLASHING_VOTING_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SLASHINGVOTINGKEY is a free data retrieval call binding the contract method 0xfaaa8a64.
//
// Solidity: function SLASHING_VOTING_KEY() view returns(string)
func (_DKG *DKGSession) SLASHINGVOTINGKEY() (string, error) {
	return _DKG.Contract.SLASHINGVOTINGKEY(&_DKG.CallOpts)
}

// SLASHINGVOTINGKEY is a free data retrieval call binding the contract method 0xfaaa8a64.
//
// Solidity: function SLASHING_VOTING_KEY() view returns(string)
func (_DKG *DKGCallerSession) SLASHINGVOTINGKEY() (string, error) {
	return _DKG.Contract.SLASHINGVOTINGKEY(&_DKG.CallOpts)
}

// STAKINGKEY is a free data retrieval call binding the contract method 0x561ff9a9.
//
// Solidity: function STAKING_KEY() view returns(string)
func (_DKG *DKGCaller) STAKINGKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "STAKING_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// STAKINGKEY is a free data retrieval call binding the contract method 0x561ff9a9.
//
// Solidity: function STAKING_KEY() view returns(string)
func (_DKG *DKGSession) STAKINGKEY() (string, error) {
	return _DKG.Contract.STAKINGKEY(&_DKG.CallOpts)
}

// STAKINGKEY is a free data retrieval call binding the contract method 0x561ff9a9.
//
// Solidity: function STAKING_KEY() view returns(string)
func (_DKG *DKGCallerSession) STAKINGKEY() (string, error) {
	return _DKG.Contract.STAKINGKEY(&_DKG.CallOpts)
}

// SUPPORTEDTOKENSKEY is a free data retrieval call binding the contract method 0x78a5c206.
//
// Solidity: function SUPPORTED_TOKENS_KEY() view returns(string)
func (_DKG *DKGCaller) SUPPORTEDTOKENSKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "SUPPORTED_TOKENS_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SUPPORTEDTOKENSKEY is a free data retrieval call binding the contract method 0x78a5c206.
//
// Solidity: function SUPPORTED_TOKENS_KEY() view returns(string)
func (_DKG *DKGSession) SUPPORTEDTOKENSKEY() (string, error) {
	return _DKG.Contract.SUPPORTEDTOKENSKEY(&_DKG.CallOpts)
}

// SUPPORTEDTOKENSKEY is a free data retrieval call binding the contract method 0x78a5c206.
//
// Solidity: function SUPPORTED_TOKENS_KEY() view returns(string)
func (_DKG *DKGCallerSession) SUPPORTEDTOKENSKEY() (string, error) {
	return _DKG.Contract.SUPPORTEDTOKENSKEY(&_DKG.CallOpts)
}

// ContractRegistry is a free data retrieval call binding the contract method 0xabf410e5.
//
// Solidity: function contractRegistry() view returns(address)
func (_DKG *DKGCaller) ContractRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "contractRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractRegistry is a free data retrieval call binding the contract method 0xabf410e5.
//
// Solidity: function contractRegistry() view returns(address)
func (_DKG *DKGSession) ContractRegistry() (common.Address, error) {
	return _DKG.Contract.ContractRegistry(&_DKG.CallOpts)
}

// ContractRegistry is a free data retrieval call binding the contract method 0xabf410e5.
//
// Solidity: function contractRegistry() view returns(address)
func (_DKG *DKGCallerSession) ContractRegistry() (common.Address, error) {
	return _DKG.Contract.ContractRegistry(&_DKG.CallOpts)
}

// DeadlinePeriod is a free data retrieval call binding the contract method 0x6db24262.
//
// Solidity: function deadlinePeriod() view returns(uint256)
func (_DKG *DKGCaller) DeadlinePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "deadlinePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeadlinePeriod is a free data retrieval call binding the contract method 0x6db24262.
//
// Solidity: function deadlinePeriod() view returns(uint256)
func (_DKG *DKGSession) DeadlinePeriod() (*big.Int, error) {
	return _DKG.Contract.DeadlinePeriod(&_DKG.CallOpts)
}

// DeadlinePeriod is a free data retrieval call binding the contract method 0x6db24262.
//
// Solidity: function deadlinePeriod() view returns(uint256)
func (_DKG *DKGCallerSession) DeadlinePeriod() (*big.Int, error) {
	return _DKG.Contract.DeadlinePeriod(&_DKG.CallOpts)
}

// Generations is a free data retrieval call binding the contract method 0xad8b0e94.
//
// Solidity: function generations(uint256 ) view returns(address signer, uint256 deadline)
func (_DKG *DKGCaller) Generations(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Signer   common.Address
	Deadline *big.Int
}, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "generations", arg0)

	outstruct := new(struct {
		Signer   common.Address
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Signer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Generations is a free data retrieval call binding the contract method 0xad8b0e94.
//
// Solidity: function generations(uint256 ) view returns(address signer, uint256 deadline)
func (_DKG *DKGSession) Generations(arg0 *big.Int) (struct {
	Signer   common.Address
	Deadline *big.Int
}, error) {
	return _DKG.Contract.Generations(&_DKG.CallOpts, arg0)
}

// Generations is a free data retrieval call binding the contract method 0xad8b0e94.
//
// Solidity: function generations(uint256 ) view returns(address signer, uint256 deadline)
func (_DKG *DKGCallerSession) Generations(arg0 *big.Int) (struct {
	Signer   common.Address
	Deadline *big.Int
}, error) {
	return _DKG.Contract.Generations(&_DKG.CallOpts, arg0)
}

// GetCurrentValidators is a free data retrieval call binding the contract method 0xc5f9dff0.
//
// Solidity: function getCurrentValidators() view returns(address[])
func (_DKG *DKGCaller) GetCurrentValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getCurrentValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCurrentValidators is a free data retrieval call binding the contract method 0xc5f9dff0.
//
// Solidity: function getCurrentValidators() view returns(address[])
func (_DKG *DKGSession) GetCurrentValidators() ([]common.Address, error) {
	return _DKG.Contract.GetCurrentValidators(&_DKG.CallOpts)
}

// GetCurrentValidators is a free data retrieval call binding the contract method 0xc5f9dff0.
//
// Solidity: function getCurrentValidators() view returns(address[])
func (_DKG *DKGCallerSession) GetCurrentValidators() ([]common.Address, error) {
	return _DKG.Contract.GetCurrentValidators(&_DKG.CallOpts)
}

// GetGenerationsCount is a free data retrieval call binding the contract method 0x1ea0f036.
//
// Solidity: function getGenerationsCount() view returns(uint256)
func (_DKG *DKGCaller) GetGenerationsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getGenerationsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetGenerationsCount is a free data retrieval call binding the contract method 0x1ea0f036.
//
// Solidity: function getGenerationsCount() view returns(uint256)
func (_DKG *DKGSession) GetGenerationsCount() (*big.Int, error) {
	return _DKG.Contract.GetGenerationsCount(&_DKG.CallOpts)
}

// GetGenerationsCount is a free data retrieval call binding the contract method 0x1ea0f036.
//
// Solidity: function getGenerationsCount() view returns(uint256)
func (_DKG *DKGCallerSession) GetGenerationsCount() (*big.Int, error) {
	return _DKG.Contract.GetGenerationsCount(&_DKG.CallOpts)
}

// GetRoundBroadcastCount is a free data retrieval call binding the contract method 0x50c8548f.
//
// Solidity: function getRoundBroadcastCount(uint256 _generation, uint256 _round) view returns(uint256)
func (_DKG *DKGCaller) GetRoundBroadcastCount(opts *bind.CallOpts, _generation *big.Int, _round *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getRoundBroadcastCount", _generation, _round)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoundBroadcastCount is a free data retrieval call binding the contract method 0x50c8548f.
//
// Solidity: function getRoundBroadcastCount(uint256 _generation, uint256 _round) view returns(uint256)
func (_DKG *DKGSession) GetRoundBroadcastCount(_generation *big.Int, _round *big.Int) (*big.Int, error) {
	return _DKG.Contract.GetRoundBroadcastCount(&_DKG.CallOpts, _generation, _round)
}

// GetRoundBroadcastCount is a free data retrieval call binding the contract method 0x50c8548f.
//
// Solidity: function getRoundBroadcastCount(uint256 _generation, uint256 _round) view returns(uint256)
func (_DKG *DKGCallerSession) GetRoundBroadcastCount(_generation *big.Int, _round *big.Int) (*big.Int, error) {
	return _DKG.Contract.GetRoundBroadcastCount(&_DKG.CallOpts, _generation, _round)
}

// GetRoundBroadcastData is a free data retrieval call binding the contract method 0x130b9702.
//
// Solidity: function getRoundBroadcastData(uint256 _generation, uint256 _round, address _validator) view returns(bytes)
func (_DKG *DKGCaller) GetRoundBroadcastData(opts *bind.CallOpts, _generation *big.Int, _round *big.Int, _validator common.Address) ([]byte, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getRoundBroadcastData", _generation, _round, _validator)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRoundBroadcastData is a free data retrieval call binding the contract method 0x130b9702.
//
// Solidity: function getRoundBroadcastData(uint256 _generation, uint256 _round, address _validator) view returns(bytes)
func (_DKG *DKGSession) GetRoundBroadcastData(_generation *big.Int, _round *big.Int, _validator common.Address) ([]byte, error) {
	return _DKG.Contract.GetRoundBroadcastData(&_DKG.CallOpts, _generation, _round, _validator)
}

// GetRoundBroadcastData is a free data retrieval call binding the contract method 0x130b9702.
//
// Solidity: function getRoundBroadcastData(uint256 _generation, uint256 _round, address _validator) view returns(bytes)
func (_DKG *DKGCallerSession) GetRoundBroadcastData(_generation *big.Int, _round *big.Int, _validator common.Address) ([]byte, error) {
	return _DKG.Contract.GetRoundBroadcastData(&_DKG.CallOpts, _generation, _round, _validator)
}

// GetSignerAddress is a free data retrieval call binding the contract method 0x1a296e02.
//
// Solidity: function getSignerAddress() view returns(address)
func (_DKG *DKGCaller) GetSignerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getSignerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSignerAddress is a free data retrieval call binding the contract method 0x1a296e02.
//
// Solidity: function getSignerAddress() view returns(address)
func (_DKG *DKGSession) GetSignerAddress() (common.Address, error) {
	return _DKG.Contract.GetSignerAddress(&_DKG.CallOpts)
}

// GetSignerAddress is a free data retrieval call binding the contract method 0x1a296e02.
//
// Solidity: function getSignerAddress() view returns(address)
func (_DKG *DKGCallerSession) GetSignerAddress() (common.Address, error) {
	return _DKG.Contract.GetSignerAddress(&_DKG.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _generation) view returns(uint8)
func (_DKG *DKGCaller) GetStatus(opts *bind.CallOpts, _generation *big.Int) (uint8, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getStatus", _generation)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _generation) view returns(uint8)
func (_DKG *DKGSession) GetStatus(_generation *big.Int) (uint8, error) {
	return _DKG.Contract.GetStatus(&_DKG.CallOpts, _generation)
}

// GetStatus is a free data retrieval call binding the contract method 0x5c622a0e.
//
// Solidity: function getStatus(uint256 _generation) view returns(uint8)
func (_DKG *DKGCallerSession) GetStatus(_generation *big.Int) (uint8, error) {
	return _DKG.Contract.GetStatus(&_DKG.CallOpts, _generation)
}

// GetValidators is a free data retrieval call binding the contract method 0x471f40fb.
//
// Solidity: function getValidators(uint256 _generation) view returns(address[])
func (_DKG *DKGCaller) GetValidators(opts *bind.CallOpts, _generation *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getValidators", _generation)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0x471f40fb.
//
// Solidity: function getValidators(uint256 _generation) view returns(address[])
func (_DKG *DKGSession) GetValidators(_generation *big.Int) ([]common.Address, error) {
	return _DKG.Contract.GetValidators(&_DKG.CallOpts, _generation)
}

// GetValidators is a free data retrieval call binding the contract method 0x471f40fb.
//
// Solidity: function getValidators(uint256 _generation) view returns(address[])
func (_DKG *DKGCallerSession) GetValidators(_generation *big.Int) ([]common.Address, error) {
	return _DKG.Contract.GetValidators(&_DKG.CallOpts, _generation)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0xcd5fcd15.
//
// Solidity: function getValidatorsCount(uint256 _generation) view returns(uint256)
func (_DKG *DKGCaller) GetValidatorsCount(opts *bind.CallOpts, _generation *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "getValidatorsCount", _generation)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0xcd5fcd15.
//
// Solidity: function getValidatorsCount(uint256 _generation) view returns(uint256)
func (_DKG *DKGSession) GetValidatorsCount(_generation *big.Int) (*big.Int, error) {
	return _DKG.Contract.GetValidatorsCount(&_DKG.CallOpts, _generation)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0xcd5fcd15.
//
// Solidity: function getValidatorsCount(uint256 _generation) view returns(uint256)
func (_DKG *DKGCallerSession) GetValidatorsCount(_generation *big.Int) (*big.Int, error) {
	return _DKG.Contract.GetValidatorsCount(&_DKG.CallOpts, _generation)
}

// IsCurrentValidator is a free data retrieval call binding the contract method 0x55614fcc.
//
// Solidity: function isCurrentValidator(address _validator) view returns(bool)
func (_DKG *DKGCaller) IsCurrentValidator(opts *bind.CallOpts, _validator common.Address) (bool, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "isCurrentValidator", _validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCurrentValidator is a free data retrieval call binding the contract method 0x55614fcc.
//
// Solidity: function isCurrentValidator(address _validator) view returns(bool)
func (_DKG *DKGSession) IsCurrentValidator(_validator common.Address) (bool, error) {
	return _DKG.Contract.IsCurrentValidator(&_DKG.CallOpts, _validator)
}

// IsCurrentValidator is a free data retrieval call binding the contract method 0x55614fcc.
//
// Solidity: function isCurrentValidator(address _validator) view returns(bool)
func (_DKG *DKGCallerSession) IsCurrentValidator(_validator common.Address) (bool, error) {
	return _DKG.Contract.IsCurrentValidator(&_DKG.CallOpts, _validator)
}

// IsRoundFilled is a free data retrieval call binding the contract method 0xc1718e53.
//
// Solidity: function isRoundFilled(uint256 _generation, uint256 _round) view returns(bool)
func (_DKG *DKGCaller) IsRoundFilled(opts *bind.CallOpts, _generation *big.Int, _round *big.Int) (bool, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "isRoundFilled", _generation, _round)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRoundFilled is a free data retrieval call binding the contract method 0xc1718e53.
//
// Solidity: function isRoundFilled(uint256 _generation, uint256 _round) view returns(bool)
func (_DKG *DKGSession) IsRoundFilled(_generation *big.Int, _round *big.Int) (bool, error) {
	return _DKG.Contract.IsRoundFilled(&_DKG.CallOpts, _generation, _round)
}

// IsRoundFilled is a free data retrieval call binding the contract method 0xc1718e53.
//
// Solidity: function isRoundFilled(uint256 _generation, uint256 _round) view returns(bool)
func (_DKG *DKGCallerSession) IsRoundFilled(_generation *big.Int, _round *big.Int) (bool, error) {
	return _DKG.Contract.IsRoundFilled(&_DKG.CallOpts, _generation, _round)
}

// IsValidator is a free data retrieval call binding the contract method 0x23f2a73f.
//
// Solidity: function isValidator(uint256 _generation, address _validator) view returns(bool)
func (_DKG *DKGCaller) IsValidator(opts *bind.CallOpts, _generation *big.Int, _validator common.Address) (bool, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "isValidator", _generation, _validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0x23f2a73f.
//
// Solidity: function isValidator(uint256 _generation, address _validator) view returns(bool)
func (_DKG *DKGSession) IsValidator(_generation *big.Int, _validator common.Address) (bool, error) {
	return _DKG.Contract.IsValidator(&_DKG.CallOpts, _generation, _validator)
}

// IsValidator is a free data retrieval call binding the contract method 0x23f2a73f.
//
// Solidity: function isValidator(uint256 _generation, address _validator) view returns(bool)
func (_DKG *DKGCallerSession) IsValidator(_generation *big.Int, _validator common.Address) (bool, error) {
	return _DKG.Contract.IsValidator(&_DKG.CallOpts, _generation, _validator)
}

// LastActiveGeneration is a free data retrieval call binding the contract method 0x11af0a20.
//
// Solidity: function lastActiveGeneration() view returns(uint256)
func (_DKG *DKGCaller) LastActiveGeneration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "lastActiveGeneration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastActiveGeneration is a free data retrieval call binding the contract method 0x11af0a20.
//
// Solidity: function lastActiveGeneration() view returns(uint256)
func (_DKG *DKGSession) LastActiveGeneration() (*big.Int, error) {
	return _DKG.Contract.LastActiveGeneration(&_DKG.CallOpts)
}

// LastActiveGeneration is a free data retrieval call binding the contract method 0x11af0a20.
//
// Solidity: function lastActiveGeneration() view returns(uint256)
func (_DKG *DKGCallerSession) LastActiveGeneration() (*big.Int, error) {
	return _DKG.Contract.LastActiveGeneration(&_DKG.CallOpts)
}

// SignerToGeneration is a free data retrieval call binding the contract method 0xad51db6a.
//
// Solidity: function signerToGeneration(address ) view returns(uint256)
func (_DKG *DKGCaller) SignerToGeneration(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DKG.contract.Call(opts, &out, "signerToGeneration", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SignerToGeneration is a free data retrieval call binding the contract method 0xad51db6a.
//
// Solidity: function signerToGeneration(address ) view returns(uint256)
func (_DKG *DKGSession) SignerToGeneration(arg0 common.Address) (*big.Int, error) {
	return _DKG.Contract.SignerToGeneration(&_DKG.CallOpts, arg0)
}

// SignerToGeneration is a free data retrieval call binding the contract method 0xad51db6a.
//
// Solidity: function signerToGeneration(address ) view returns(uint256)
func (_DKG *DKGCallerSession) SignerToGeneration(arg0 common.Address) (*big.Int, error) {
	return _DKG.Contract.SignerToGeneration(&_DKG.CallOpts, arg0)
}

// Initialize is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _contractRegistry, uint256 _deadlinePeriod) returns()
func (_DKG *DKGTransactor) Initialize(opts *bind.TransactOpts, _contractRegistry common.Address, _deadlinePeriod *big.Int) (*types.Transaction, error) {
	return _DKG.contract.Transact(opts, "initialize", _contractRegistry, _deadlinePeriod)
}

// Initialize is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _contractRegistry, uint256 _deadlinePeriod) returns()
func (_DKG *DKGSession) Initialize(_contractRegistry common.Address, _deadlinePeriod *big.Int) (*types.Transaction, error) {
	return _DKG.Contract.Initialize(&_DKG.TransactOpts, _contractRegistry, _deadlinePeriod)
}

// Initialize is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _contractRegistry, uint256 _deadlinePeriod) returns()
func (_DKG *DKGTransactorSession) Initialize(_contractRegistry common.Address, _deadlinePeriod *big.Int) (*types.Transaction, error) {
	return _DKG.Contract.Initialize(&_DKG.TransactOpts, _contractRegistry, _deadlinePeriod)
}

// RoundBroadcast is a paid mutator transaction binding the contract method 0x100c11c3.
//
// Solidity: function roundBroadcast(uint256 _generation, uint256 _round, bytes _rawData) returns()
func (_DKG *DKGTransactor) RoundBroadcast(opts *bind.TransactOpts, _generation *big.Int, _round *big.Int, _rawData []byte) (*types.Transaction, error) {
	return _DKG.contract.Transact(opts, "roundBroadcast", _generation, _round, _rawData)
}

// RoundBroadcast is a paid mutator transaction binding the contract method 0x100c11c3.
//
// Solidity: function roundBroadcast(uint256 _generation, uint256 _round, bytes _rawData) returns()
func (_DKG *DKGSession) RoundBroadcast(_generation *big.Int, _round *big.Int, _rawData []byte) (*types.Transaction, error) {
	return _DKG.Contract.RoundBroadcast(&_DKG.TransactOpts, _generation, _round, _rawData)
}

// RoundBroadcast is a paid mutator transaction binding the contract method 0x100c11c3.
//
// Solidity: function roundBroadcast(uint256 _generation, uint256 _round, bytes _rawData) returns()
func (_DKG *DKGTransactorSession) RoundBroadcast(_generation *big.Int, _round *big.Int, _rawData []byte) (*types.Transaction, error) {
	return _DKG.Contract.RoundBroadcast(&_DKG.TransactOpts, _generation, _round, _rawData)
}

// SetDeadlinePeriod is a paid mutator transaction binding the contract method 0x82651c0d.
//
// Solidity: function setDeadlinePeriod(uint256 _deadlinePeriod) returns()
func (_DKG *DKGTransactor) SetDeadlinePeriod(opts *bind.TransactOpts, _deadlinePeriod *big.Int) (*types.Transaction, error) {
	return _DKG.contract.Transact(opts, "setDeadlinePeriod", _deadlinePeriod)
}

// SetDeadlinePeriod is a paid mutator transaction binding the contract method 0x82651c0d.
//
// Solidity: function setDeadlinePeriod(uint256 _deadlinePeriod) returns()
func (_DKG *DKGSession) SetDeadlinePeriod(_deadlinePeriod *big.Int) (*types.Transaction, error) {
	return _DKG.Contract.SetDeadlinePeriod(&_DKG.TransactOpts, _deadlinePeriod)
}

// SetDeadlinePeriod is a paid mutator transaction binding the contract method 0x82651c0d.
//
// Solidity: function setDeadlinePeriod(uint256 _deadlinePeriod) returns()
func (_DKG *DKGTransactorSession) SetDeadlinePeriod(_deadlinePeriod *big.Int) (*types.Transaction, error) {
	return _DKG.Contract.SetDeadlinePeriod(&_DKG.TransactOpts, _deadlinePeriod)
}

// UpdateGeneration is a paid mutator transaction binding the contract method 0xb32805c3.
//
// Solidity: function updateGeneration() returns()
func (_DKG *DKGTransactor) UpdateGeneration(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DKG.contract.Transact(opts, "updateGeneration")
}

// UpdateGeneration is a paid mutator transaction binding the contract method 0xb32805c3.
//
// Solidity: function updateGeneration() returns()
func (_DKG *DKGSession) UpdateGeneration() (*types.Transaction, error) {
	return _DKG.Contract.UpdateGeneration(&_DKG.TransactOpts)
}

// UpdateGeneration is a paid mutator transaction binding the contract method 0xb32805c3.
//
// Solidity: function updateGeneration() returns()
func (_DKG *DKGTransactorSession) UpdateGeneration() (*types.Transaction, error) {
	return _DKG.Contract.UpdateGeneration(&_DKG.TransactOpts)
}

// VoteSigner is a paid mutator transaction binding the contract method 0xc88bc067.
//
// Solidity: function voteSigner(uint256 _generation, address _signerAddress, bytes _signature) returns()
func (_DKG *DKGTransactor) VoteSigner(opts *bind.TransactOpts, _generation *big.Int, _signerAddress common.Address, _signature []byte) (*types.Transaction, error) {
	return _DKG.contract.Transact(opts, "voteSigner", _generation, _signerAddress, _signature)
}

// VoteSigner is a paid mutator transaction binding the contract method 0xc88bc067.
//
// Solidity: function voteSigner(uint256 _generation, address _signerAddress, bytes _signature) returns()
func (_DKG *DKGSession) VoteSigner(_generation *big.Int, _signerAddress common.Address, _signature []byte) (*types.Transaction, error) {
	return _DKG.Contract.VoteSigner(&_DKG.TransactOpts, _generation, _signerAddress, _signature)
}

// VoteSigner is a paid mutator transaction binding the contract method 0xc88bc067.
//
// Solidity: function voteSigner(uint256 _generation, address _signerAddress, bytes _signature) returns()
func (_DKG *DKGTransactorSession) VoteSigner(_generation *big.Int, _signerAddress common.Address, _signature []byte) (*types.Transaction, error) {
	return _DKG.Contract.VoteSigner(&_DKG.TransactOpts, _generation, _signerAddress, _signature)
}

// DKGInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the DKG contract.
type DKGInitializedIterator struct {
	Event *DKGInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGInitialized represents a Initialized event raised by the DKG contract.
type DKGInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_DKG *DKGFilterer) FilterInitialized(opts *bind.FilterOpts) (*DKGInitializedIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &DKGInitializedIterator{contract: _DKG.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_DKG *DKGFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *DKGInitialized) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGInitialized)
				if err := _DKG.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_DKG *DKGFilterer) ParseInitialized(log types.Log) (*DKGInitialized, error) {
	event := new(DKGInitialized)
	if err := _DKG.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DKGRoundDataFilledIterator is returned from FilterRoundDataFilled and is used to iterate over the raw logs and unpacked data for RoundDataFilled events raised by the DKG contract.
type DKGRoundDataFilledIterator struct {
	Event *DKGRoundDataFilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGRoundDataFilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGRoundDataFilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGRoundDataFilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGRoundDataFilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGRoundDataFilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGRoundDataFilled represents a RoundDataFilled event raised by the DKG contract.
type DKGRoundDataFilled struct {
	Generation *big.Int
	Round      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRoundDataFilled is a free log retrieval operation binding the contract event 0xab74ab6fc458020cf5d6116f5c013ebf3c0ad518f10de1391427c225f75db5f9.
//
// Solidity: event RoundDataFilled(uint256 generation, uint256 round)
func (_DKG *DKGFilterer) FilterRoundDataFilled(opts *bind.FilterOpts) (*DKGRoundDataFilledIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "RoundDataFilled")
	if err != nil {
		return nil, err
	}
	return &DKGRoundDataFilledIterator{contract: _DKG.contract, event: "RoundDataFilled", logs: logs, sub: sub}, nil
}

// WatchRoundDataFilled is a free log subscription operation binding the contract event 0xab74ab6fc458020cf5d6116f5c013ebf3c0ad518f10de1391427c225f75db5f9.
//
// Solidity: event RoundDataFilled(uint256 generation, uint256 round)
func (_DKG *DKGFilterer) WatchRoundDataFilled(opts *bind.WatchOpts, sink chan<- *DKGRoundDataFilled) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "RoundDataFilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGRoundDataFilled)
				if err := _DKG.contract.UnpackLog(event, "RoundDataFilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoundDataFilled is a log parse operation binding the contract event 0xab74ab6fc458020cf5d6116f5c013ebf3c0ad518f10de1391427c225f75db5f9.
//
// Solidity: event RoundDataFilled(uint256 generation, uint256 round)
func (_DKG *DKGFilterer) ParseRoundDataFilled(log types.Log) (*DKGRoundDataFilled, error) {
	event := new(DKGRoundDataFilled)
	if err := _DKG.contract.UnpackLog(event, "RoundDataFilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DKGRoundDataProvidedIterator is returned from FilterRoundDataProvided and is used to iterate over the raw logs and unpacked data for RoundDataProvided events raised by the DKG contract.
type DKGRoundDataProvidedIterator struct {
	Event *DKGRoundDataProvided // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGRoundDataProvidedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGRoundDataProvided)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGRoundDataProvided)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGRoundDataProvidedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGRoundDataProvidedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGRoundDataProvided represents a RoundDataProvided event raised by the DKG contract.
type DKGRoundDataProvided struct {
	Generation *big.Int
	Round      *big.Int
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRoundDataProvided is a free log retrieval operation binding the contract event 0xca56b6e939787236f062daae635dc1afa2b46ad9a24ad09aa98833c637009606.
//
// Solidity: event RoundDataProvided(uint256 generation, uint256 round, address validator)
func (_DKG *DKGFilterer) FilterRoundDataProvided(opts *bind.FilterOpts) (*DKGRoundDataProvidedIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "RoundDataProvided")
	if err != nil {
		return nil, err
	}
	return &DKGRoundDataProvidedIterator{contract: _DKG.contract, event: "RoundDataProvided", logs: logs, sub: sub}, nil
}

// WatchRoundDataProvided is a free log subscription operation binding the contract event 0xca56b6e939787236f062daae635dc1afa2b46ad9a24ad09aa98833c637009606.
//
// Solidity: event RoundDataProvided(uint256 generation, uint256 round, address validator)
func (_DKG *DKGFilterer) WatchRoundDataProvided(opts *bind.WatchOpts, sink chan<- *DKGRoundDataProvided) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "RoundDataProvided")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGRoundDataProvided)
				if err := _DKG.contract.UnpackLog(event, "RoundDataProvided", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoundDataProvided is a log parse operation binding the contract event 0xca56b6e939787236f062daae635dc1afa2b46ad9a24ad09aa98833c637009606.
//
// Solidity: event RoundDataProvided(uint256 generation, uint256 round, address validator)
func (_DKG *DKGFilterer) ParseRoundDataProvided(log types.Log) (*DKGRoundDataProvided, error) {
	event := new(DKGRoundDataProvided)
	if err := _DKG.contract.UnpackLog(event, "RoundDataProvided", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DKGSignerAddressUpdatedIterator is returned from FilterSignerAddressUpdated and is used to iterate over the raw logs and unpacked data for SignerAddressUpdated events raised by the DKG contract.
type DKGSignerAddressUpdatedIterator struct {
	Event *DKGSignerAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGSignerAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGSignerAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGSignerAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGSignerAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGSignerAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGSignerAddressUpdated represents a SignerAddressUpdated event raised by the DKG contract.
type DKGSignerAddressUpdated struct {
	Generation    *big.Int
	SignerAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSignerAddressUpdated is a free log retrieval operation binding the contract event 0xa6d3de2b2ccbce3cf736f5f8e515fdad82235d0d1f1ff8a0ad14f98c48af0a46.
//
// Solidity: event SignerAddressUpdated(uint256 generation, address signerAddress)
func (_DKG *DKGFilterer) FilterSignerAddressUpdated(opts *bind.FilterOpts) (*DKGSignerAddressUpdatedIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "SignerAddressUpdated")
	if err != nil {
		return nil, err
	}
	return &DKGSignerAddressUpdatedIterator{contract: _DKG.contract, event: "SignerAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchSignerAddressUpdated is a free log subscription operation binding the contract event 0xa6d3de2b2ccbce3cf736f5f8e515fdad82235d0d1f1ff8a0ad14f98c48af0a46.
//
// Solidity: event SignerAddressUpdated(uint256 generation, address signerAddress)
func (_DKG *DKGFilterer) WatchSignerAddressUpdated(opts *bind.WatchOpts, sink chan<- *DKGSignerAddressUpdated) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "SignerAddressUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGSignerAddressUpdated)
				if err := _DKG.contract.UnpackLog(event, "SignerAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignerAddressUpdated is a log parse operation binding the contract event 0xa6d3de2b2ccbce3cf736f5f8e515fdad82235d0d1f1ff8a0ad14f98c48af0a46.
//
// Solidity: event SignerAddressUpdated(uint256 generation, address signerAddress)
func (_DKG *DKGFilterer) ParseSignerAddressUpdated(log types.Log) (*DKGSignerAddressUpdated, error) {
	event := new(DKGSignerAddressUpdated)
	if err := _DKG.contract.UnpackLog(event, "SignerAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DKGSignerVotedIterator is returned from FilterSignerVoted and is used to iterate over the raw logs and unpacked data for SignerVoted events raised by the DKG contract.
type DKGSignerVotedIterator struct {
	Event *DKGSignerVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGSignerVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGSignerVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGSignerVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGSignerVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGSignerVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGSignerVoted represents a SignerVoted event raised by the DKG contract.
type DKGSignerVoted struct {
	Generation       *big.Int
	Validator        common.Address
	CollectiveSigner common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSignerVoted is a free log retrieval operation binding the contract event 0x4686ba7a5df3cb2d9979ee16ec58c7ea0b92273d836278488fb07c732cf8ec19.
//
// Solidity: event SignerVoted(uint256 generation, address validator, address collectiveSigner)
func (_DKG *DKGFilterer) FilterSignerVoted(opts *bind.FilterOpts) (*DKGSignerVotedIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "SignerVoted")
	if err != nil {
		return nil, err
	}
	return &DKGSignerVotedIterator{contract: _DKG.contract, event: "SignerVoted", logs: logs, sub: sub}, nil
}

// WatchSignerVoted is a free log subscription operation binding the contract event 0x4686ba7a5df3cb2d9979ee16ec58c7ea0b92273d836278488fb07c732cf8ec19.
//
// Solidity: event SignerVoted(uint256 generation, address validator, address collectiveSigner)
func (_DKG *DKGFilterer) WatchSignerVoted(opts *bind.WatchOpts, sink chan<- *DKGSignerVoted) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "SignerVoted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGSignerVoted)
				if err := _DKG.contract.UnpackLog(event, "SignerVoted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignerVoted is a log parse operation binding the contract event 0x4686ba7a5df3cb2d9979ee16ec58c7ea0b92273d836278488fb07c732cf8ec19.
//
// Solidity: event SignerVoted(uint256 generation, address validator, address collectiveSigner)
func (_DKG *DKGFilterer) ParseSignerVoted(log types.Log) (*DKGSignerVoted, error) {
	event := new(DKGSignerVoted)
	if err := _DKG.contract.UnpackLog(event, "SignerVoted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DKGThresholdSignerUpdatedIterator is returned from FilterThresholdSignerUpdated and is used to iterate over the raw logs and unpacked data for ThresholdSignerUpdated events raised by the DKG contract.
type DKGThresholdSignerUpdatedIterator struct {
	Event *DKGThresholdSignerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGThresholdSignerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGThresholdSignerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGThresholdSignerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGThresholdSignerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGThresholdSignerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGThresholdSignerUpdated represents a ThresholdSignerUpdated event raised by the DKG contract.
type DKGThresholdSignerUpdated struct {
	Signer common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterThresholdSignerUpdated is a free log retrieval operation binding the contract event 0x8559aaab9220e2f109d51f7d09a3cca9b41451f4698287d982dc4549a70808bf.
//
// Solidity: event ThresholdSignerUpdated(address signer)
func (_DKG *DKGFilterer) FilterThresholdSignerUpdated(opts *bind.FilterOpts) (*DKGThresholdSignerUpdatedIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "ThresholdSignerUpdated")
	if err != nil {
		return nil, err
	}
	return &DKGThresholdSignerUpdatedIterator{contract: _DKG.contract, event: "ThresholdSignerUpdated", logs: logs, sub: sub}, nil
}

// WatchThresholdSignerUpdated is a free log subscription operation binding the contract event 0x8559aaab9220e2f109d51f7d09a3cca9b41451f4698287d982dc4549a70808bf.
//
// Solidity: event ThresholdSignerUpdated(address signer)
func (_DKG *DKGFilterer) WatchThresholdSignerUpdated(opts *bind.WatchOpts, sink chan<- *DKGThresholdSignerUpdated) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "ThresholdSignerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGThresholdSignerUpdated)
				if err := _DKG.contract.UnpackLog(event, "ThresholdSignerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThresholdSignerUpdated is a log parse operation binding the contract event 0x8559aaab9220e2f109d51f7d09a3cca9b41451f4698287d982dc4549a70808bf.
//
// Solidity: event ThresholdSignerUpdated(address signer)
func (_DKG *DKGFilterer) ParseThresholdSignerUpdated(log types.Log) (*DKGThresholdSignerUpdated, error) {
	event := new(DKGThresholdSignerUpdated)
	if err := _DKG.contract.UnpackLog(event, "ThresholdSignerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DKGValidatorsUpdatedIterator is returned from FilterValidatorsUpdated and is used to iterate over the raw logs and unpacked data for ValidatorsUpdated events raised by the DKG contract.
type DKGValidatorsUpdatedIterator struct {
	Event *DKGValidatorsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DKGValidatorsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DKGValidatorsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DKGValidatorsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DKGValidatorsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DKGValidatorsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DKGValidatorsUpdated represents a ValidatorsUpdated event raised by the DKG contract.
type DKGValidatorsUpdated struct {
	Generation *big.Int
	Validators []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterValidatorsUpdated is a free log retrieval operation binding the contract event 0xeadf82e9da8b1722bf1769001bdd6d52bb429e0745d9116f69495cedc7db8a95.
//
// Solidity: event ValidatorsUpdated(uint256 generation, address[] validators)
func (_DKG *DKGFilterer) FilterValidatorsUpdated(opts *bind.FilterOpts) (*DKGValidatorsUpdatedIterator, error) {

	logs, sub, err := _DKG.contract.FilterLogs(opts, "ValidatorsUpdated")
	if err != nil {
		return nil, err
	}
	return &DKGValidatorsUpdatedIterator{contract: _DKG.contract, event: "ValidatorsUpdated", logs: logs, sub: sub}, nil
}

// WatchValidatorsUpdated is a free log subscription operation binding the contract event 0xeadf82e9da8b1722bf1769001bdd6d52bb429e0745d9116f69495cedc7db8a95.
//
// Solidity: event ValidatorsUpdated(uint256 generation, address[] validators)
func (_DKG *DKGFilterer) WatchValidatorsUpdated(opts *bind.WatchOpts, sink chan<- *DKGValidatorsUpdated) (event.Subscription, error) {

	logs, sub, err := _DKG.contract.WatchLogs(opts, "ValidatorsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DKGValidatorsUpdated)
				if err := _DKG.contract.UnpackLog(event, "ValidatorsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorsUpdated is a log parse operation binding the contract event 0xeadf82e9da8b1722bf1769001bdd6d52bb429e0745d9116f69495cedc7db8a95.
//
// Solidity: event ValidatorsUpdated(uint256 generation, address[] validators)
func (_DKG *DKGFilterer) ParseValidatorsUpdated(log types.Log) (*DKGValidatorsUpdated, error) {
	event := new(DKGValidatorsUpdated)
	if err := _DKG.contract.UnpackLog(event, "ValidatorsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
