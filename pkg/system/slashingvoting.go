// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package system

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SlashingVotingMetaData contains all meta data concerning the SlashingVoting contract.
var SlashingVotingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumSlashingReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"BannedWithReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"SlashedWithReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumSlashingReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"VotedWithReason\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DKG_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DISTRIBUTION_POOL_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLASHING_VOTING_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPORTED_TOKENS_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enumSlashingReason\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bannedValidators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bansByEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enumSlashingReason\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bansByReason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"contractContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"epochByBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumSlashingReason\",\"name\":\"_reason\",\"type\":\"uint8\"}],\"name\":\"getBannedValidatorsByReason\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getBansByEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerGetterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorGetterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashingThresold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lashingEpochs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"enumSlashingReason\",\"name\":\"_reason\",\"type\":\"uint8\"}],\"name\":\"isBannedByReason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"slashingProposalVoteCounts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashingEpochs\",\"type\":\"uint256\"}],\"name\":\"setSlashingEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashingThresold\",\"type\":\"uint256\"}],\"name\":\"setSlashingThresold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"shouldShash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerGetter\",\"outputs\":[{\"internalType\":\"contractISignerAddress\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashingEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashingThresold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorGetter\",\"outputs\":[{\"internalType\":\"contractValidatorGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"enumSlashingReason\",\"name\":\"_reason\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_nonce\",\"type\":\"bytes\"}],\"name\":\"voteWithReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"enumSlashingReason\",\"name\":\"_reason\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_nonce\",\"type\":\"bytes\"}],\"name\":\"votingHashWithReason\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613a58806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c80638aaf0dae1161010f578063c4b14d58116100a2578063f84da26e11610071578063f84da26e1461060a578063faaa8a6414610626578063fbf9204d14610644578063fce0112614610662576101ef565b8063c4b14d581461055c578063ce119a8a1461058c578063ed2da0ac146105aa578063f03528e7146105da576101ef565b8063b5b7a184116100de578063b5b7a184146104ae578063bb69ffcd146104cc578063be271a02146104fc578063c42127b41461052c576101ef565b80638aaf0dae146104285780639386775a14610444578063abf410e514610474578063b1a5d12d14610492576101ef565b806369495ef511610187578063766718081161015657806376671808146103a057806378a5c206146103be578063807896d5146103dc57806381d0e37b146103f8576101ef565b806369495ef5146103065780636acd4f96146103245780636b5f444c146103545780636e6bb97c14610370576101ef565b80633a9783f3116101c35780633a9783f31461027c5780633dad9ca91461029a578063561ff9a9146102ca5780635c211f88146102e8576101ef565b8062708bb6146101f4578063013cf08b1461021257806303e7f672146102445780631f4f7d2914610260575b600080fd5b6101fc610692565b604051610209919061240a565b60405180910390f35b61022c60048036038101906102279190612465565b610698565b60405161023b93929190612563565b60405180910390f35b61025e60048036038101906102599190612657565b61077a565b005b61027a600480360381019061027591906127fb565b610f5e565b005b61028461110e565b6040516102919190612857565b60405180910390f35b6102b460048036038101906102af91906128af565b611147565b6040516102c191906128f7565b60405180910390f35b6102d2611167565b6040516102df9190612857565b60405180910390f35b6102f06111a0565b6040516102fd9190612971565b60405180910390f35b61030e6111c6565b60405161031b91906129ad565b60405180910390f35b61033e60048036038101906103399190612657565b6111ea565b60405161034b91906129d7565b60405180910390f35b61036e60048036038101906103699190612465565b611223565b005b61038a600480360381019061038591906129f2565b61132b565b6040516103979190612add565b60405180910390f35b6103a8611408565b6040516103b5919061240a565b60405180910390f35b6103c6611418565b6040516103d39190612857565b60405180910390f35b6103f660048036038101906103f19190612465565b611451565b005b610412600480360381019061040d91906128af565b611a09565b60405161041f919061240a565b60405180910390f35b610442600480360381019061043d9190612465565b611a21565b005b61045e60048036038101906104599190612aff565b611b29565b60405161046b91906128f7565b60405180910390f35b61047c611b58565b6040516104899190612b60565b60405180910390f35b6104ac60048036038101906104a79190612b7b565b611b7e565b005b6104b6611c7e565b6040516104c3919061240a565b60405180910390f35b6104e660048036038101906104e19190612c08565b611c84565b6040516104f391906128f7565b60405180910390f35b61051660048036038101906105119190612c48565b611d51565b6040516105239190612c9b565b60405180910390f35b61054660048036038101906105419190612465565b611dac565b604051610553919061240a565b60405180910390f35b61057660048036038101906105719190612c08565b611dc3565b604051610583919061240a565b60405180910390f35b610594611e1e565b6040516105a19190612857565b60405180910390f35b6105c460048036038101906105bf9190612cb6565b611e57565b6040516105d191906128f7565b60405180910390f35b6105f460048036038101906105ef9190612cf6565b611efb565b60405161060191906128f7565b60405180910390f35b610624600480360381019061061f9190612465565b611f37565b005b61062e61203f565b60405161063b9190612857565b60405180910390f35b61064c612078565b604051610659919061240a565b60405180910390f35b61067c60048036038101906106779190612c08565b61207e565b604051610689919061240a565b60405180910390f35b60055481565b600281815481106106a857600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546106f190612d78565b80601f016020809104026020016040519081016040528092919081815260200182805461071d90612d78565b801561076a5780601f1061073f5761010080835404028352916020019161076a565b820191906000526020600020905b81548152906001019060200180831161074d57829003601f168201915b5050505050908060030154905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342ad55ac336040518263ffffffff1660e01b81526004016107d39190612c9b565b602060405180830381865afa1580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190612dd5565b610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90612e4e565b60405180910390fd5b600061085d6120a3565b9050600061086961217b565b90506000610879878787876111ea565b9050600115158373ffffffffffffffffffffffffffffffffffffffff166342ad55ac896040518263ffffffff1660e01b81526004016108b89190612c9b565b602060405180830381865afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190612dd5565b15151461093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093290612ee0565b60405180910390fd5b600015156009600083815260200190815260200160002060009054906101000a900460ff161515146109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099990612f72565b60405180910390fd5b600015156007600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3d90613004565b60405180910390fd5b60016007600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600860008281526020019081526020016000206000815480929190610ad390613053565b91905055507f42ff2b7c8c611c525511dd04c1ee3cae48f313329b255979b94fc87a0f3a4a26338888604051610b0b93929190613112565b60405180910390a16000610b1d611408565b905060008473ffffffffffffffffffffffffffffffffffffffff1663b7ab4db56040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b959190613221565b9050600160028251610ba79190613299565b610bb191906132ca565b600860008581526020019081526020016000205410610e9a5760016009600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600a600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a6004811115610c5d57610c5c61309b565b5b6004811115610c6f57610c6e61309b565b5b815260200190815260200160002060006101000a81548160ff021916908315150217905550600b600083815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610cf590613053565b9190505550600c60008381526020019081526020016000206000896004811115610d2257610d2161309b565b5b6004811115610d3457610d3361309b565b5b8152602001908152602001600020899080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f370cc65d87ae599d8b7dd97c0d1f33291921e8cc3652f51fe8db7d974e567c238989604051610dd49291906132fe565b60405180910390a160016004811115610df057610def61309b565b5b886004811115610e0357610e0261309b565b5b1480610e33575060026004811115610e1e57610e1d61309b565b5b886004811115610e3157610e3061309b565b5b145b15610e99578373ffffffffffffffffffffffffffffffffffffffff1663b32805c36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b505050505b5b610ea4828a611c84565b15610f5357610eb16120a3565b73ffffffffffffffffffffffffffffffffffffffff1663c96be4cb8a6040518263ffffffff1660e01b8152600401610ee99190612c9b565b600060405180830381600087803b158015610f0357600080fd5b505af1158015610f17573d6000803e3d6000fd5b505050507f56848e1c0571e37fab91475a03170418e6a2956e066666c8038484240ea5470989604051610f4a9190612c9b565b60405180910390a15b505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342ad55ac336040518263ffffffff1660e01b8152600401610fb79190612c9b565b602060405180830381865afa158015610fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff89190612dd5565b611037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102e90612e4e565b60405180910390fd5b600060026001816001815401808255809150500390600052602060002090600402019050828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160010190816110af91906134c9565b50600060016002805490506110c4919061359b565b90507fcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b35881856040516110f79291906135cf565b60405180910390a161110881611451565b50505050565b6040518060400160405280600381526020017f646b67000000000000000000000000000000000000000000000000000000000081525081565b60096020528060005260406000206000915054906101000a900460ff1681565b6040518060400160405280600781526020017f7374616b696e670000000000000000000000000000000000000000000000000081525081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008484848460405160200161120394939291906136a6565b604051602081830303815290604052805190602001209050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb91906136e1565b73ffffffffffffffffffffffffffffffffffffffff1614611321576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113189061375a565b60405180910390fd5b8060048190555050565b6060600c6000611339611408565b8152602001908152602001600020600083600481111561135c5761135b61309b565b5b600481111561136e5761136d61309b565b5b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156113fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113b2575b50505050509050919050565b600061141343611dac565b905090565b6040518060400160405280601081526020017f737570706f727465642d746f6b656e730000000000000000000000000000000081525081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342ad55ac336040518263ffffffff1660e01b81526004016114aa9190612c9b565b602060405180830381865afa1580156114c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114eb9190612dd5565b61152a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152190612e4e565b60405180910390fd5b60006115346120a3565b9050600280549050821061157d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611574906137ec565b60405180910390fd5b6000600283815481106115935761159261380c565b5b90600052602060002090600402019050600115158273ffffffffffffffffffffffffffffffffffffffff166342ad55ac8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016116049190612c9b565b602060405180830381865afa158015611621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116459190612dd5565b151514611687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167e90612ee0565b60405180910390fd5b600015156002848154811061169f5761169e61380c565b5b906000526020600020906004020160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461173d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611734906138ad565b60405180910390fd5b6001600284815481106117535761175261380c565b5b906000526020600020906004020160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600283815481106117cc576117cb61380c565b5b906000526020600020906004020160030160008154809291906117ee90613053565b919050555060008273ffffffffffffffffffffffffffffffffffffffff1663b7ab4db56040518163ffffffff1660e01b8152600401600060405180830381865afa158015611840573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118699190613221565b905060016002825161187b9190613299565b61188591906132ca565b600285815481106118995761189861380c565b5b906000526020600020906004020160030154106119a4576118b86120a3565b73ffffffffffffffffffffffffffffffffffffffff1663c96be4cb8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016119149190612c9b565b600060405180830381600087803b15801561192e57600080fd5b505af1158015611942573d6000803e3d6000fd5b505050507f9c85b616f29fca57a17eafe71cf9ff82ffef41766e2cf01ea7f8f7878dd3ec24848360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161199b9291906135cf565b60405180910390a15b7fd88f7b9f64fb7ba069d57fe9cedb25c7827ee4f7c67c7f0967f6a25bd6d0c53c848360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040516119fb939291906138cd565b60405180910390a150505050565b60086020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac991906136e1565b73ffffffffffffffffffffffffffffffffffffffff1614611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b169061375a565b60405180910390fd5b8060068190555050565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611b8a6001612253565b90508015611bad5760018060156101000a81548160ff0219169083151502179055505b611bb687612347565b611bbf8661238b565b611bc885611223565b611bd184611f37565b611bda83611a21565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611c75576000600160156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611c6c919061394c565b60405180910390a15b50505050505050565b60045481565b6000600654831015611c995760009050611d4b565b6000808490505b60065485611cae919061359b565b811115611d40576000600b600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103611d1e5760009350505050611d4b565b8083611d2a91906132ca565b9250508080611d3890613967565b915050611ca0565b506005548110159150505b92915050565b600c6020528260005260406000206020528160005260406000208181548110611d7957600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060045482611dbc9190613299565b9050919050565b6000600b600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6040518060400160405280601881526020017f7265776172642d646973747269627574696f6e2d706f6f6c000000000000000081525081565b6000600a6000611e65611408565b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836004811115611ec557611ec461309b565b5b6004811115611ed757611ed661309b565b5b815260200190815260200160002060009054906101000a900460ff16905092915050565b600a602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdf91906136e1565b73ffffffffffffffffffffffffffffffffffffffff1614612035576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202c9061375a565b60405180910390fd5b8060058190555050565b6040518060400160405280600f81526020017f736c617368696e672d766f74696e67000000000000000000000000000000000081525081565b60065481565b600b602052816000526040600020602052806000526040600020600091509150505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663358177736040518060400160405280600781526020017f7374616b696e67000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016121359190612857565b602060405180830381865afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217691906136e1565b905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663358177736040518060400160405280600381526020017f646b6700000000000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b815260040161220d9190612857565b602060405180830381865afa15801561222a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224e91906136e1565b905090565b6000600160159054906101000a900460ff16156122cb5760018260ff161480156122835750612281306123ce565b155b6122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b990613a02565b60405180910390fd5b60009050612342565b8160ff16600160149054906101000a900460ff1660ff1610612322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231990613a02565b60405180910390fd5b81600160146101000a81548160ff021916908360ff160217905550600190505b919050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b612404816123f1565b82525050565b600060208201905061241f60008301846123fb565b92915050565b6000604051905090565b600080fd5b600080fd5b612442816123f1565b811461244d57600080fd5b50565b60008135905061245f81612439565b92915050565b60006020828403121561247b5761247a61242f565b5b600061248984828501612450565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124bd82612492565b9050919050565b6124cd816124b2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561250d5780820151818401526020810190506124f2565b60008484015250505050565b6000601f19601f8301169050919050565b6000612535826124d3565b61253f81856124de565b935061254f8185602086016124ef565b61255881612519565b840191505092915050565b600060608201905061257860008301866124c4565b818103602083015261258a818561252a565b905061259960408301846123fb565b949350505050565b6125aa816124b2565b81146125b557600080fd5b50565b6000813590506125c7816125a1565b92915050565b600581106125da57600080fd5b50565b6000813590506125ec816125cd565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612617576126166125f2565b5b8235905067ffffffffffffffff811115612634576126336125f7565b5b6020830191508360018202830111156126505761264f6125fc565b5b9250929050565b600080600080606085870312156126715761267061242f565b5b600061267f878288016125b8565b9450506020612690878288016125dd565b935050604085013567ffffffffffffffff8111156126b1576126b0612434565b5b6126bd87828801612601565b925092505092959194509250565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61270882612519565b810181811067ffffffffffffffff82111715612727576127266126d0565b5b80604052505050565b600061273a612425565b905061274682826126ff565b919050565b600067ffffffffffffffff821115612766576127656126d0565b5b61276f82612519565b9050602081019050919050565b82818337600083830152505050565b600061279e6127998461274b565b612730565b9050828152602081018484840111156127ba576127b96126cb565b5b6127c584828561277c565b509392505050565b600082601f8301126127e2576127e16125f2565b5b81356127f284826020860161278b565b91505092915050565b600080604083850312156128125761281161242f565b5b6000612820858286016125b8565b925050602083013567ffffffffffffffff81111561284157612840612434565b5b61284d858286016127cd565b9150509250929050565b60006020820190508181036000830152612871818461252a565b905092915050565b6000819050919050565b61288c81612879565b811461289757600080fd5b50565b6000813590506128a981612883565b92915050565b6000602082840312156128c5576128c461242f565b5b60006128d38482850161289a565b91505092915050565b60008115159050919050565b6128f1816128dc565b82525050565b600060208201905061290c60008301846128e8565b92915050565b6000819050919050565b600061293761293261292d84612492565b612912565b612492565b9050919050565b60006129498261291c565b9050919050565b600061295b8261293e565b9050919050565b61296b81612950565b82525050565b60006020820190506129866000830184612962565b92915050565b60006129978261293e565b9050919050565b6129a78161298c565b82525050565b60006020820190506129c2600083018461299e565b92915050565b6129d181612879565b82525050565b60006020820190506129ec60008301846129c8565b92915050565b600060208284031215612a0857612a0761242f565b5b6000612a16848285016125dd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a54816124b2565b82525050565b6000612a668383612a4b565b60208301905092915050565b6000602082019050919050565b6000612a8a82612a1f565b612a948185612a2a565b9350612a9f83612a3b565b8060005b83811015612ad0578151612ab78882612a5a565b9750612ac283612a72565b925050600181019050612aa3565b5085935050505092915050565b60006020820190508181036000830152612af78184612a7f565b905092915050565b60008060408385031215612b1657612b1561242f565b5b6000612b248582860161289a565b9250506020612b35858286016125b8565b9150509250929050565b6000612b4a8261293e565b9050919050565b612b5a81612b3f565b82525050565b6000602082019050612b756000830184612b51565b92915050565b60008060008060008060c08789031215612b9857612b9761242f565b5b6000612ba689828a016125b8565b9650506020612bb789828a016125b8565b9550506040612bc889828a01612450565b9450506060612bd989828a01612450565b9350506080612bea89828a01612450565b92505060a0612bfb89828a016125b8565b9150509295509295509295565b60008060408385031215612c1f57612c1e61242f565b5b6000612c2d85828601612450565b9250506020612c3e858286016125b8565b9150509250929050565b600080600060608486031215612c6157612c6061242f565b5b6000612c6f86828701612450565b9350506020612c80868287016125dd565b9250506040612c9186828701612450565b9150509250925092565b6000602082019050612cb060008301846124c4565b92915050565b60008060408385031215612ccd57612ccc61242f565b5b6000612cdb858286016125b8565b9250506020612cec858286016125dd565b9150509250929050565b600080600060608486031215612d0f57612d0e61242f565b5b6000612d1d86828701612450565b9350506020612d2e868287016125b8565b9250506040612d3f868287016125dd565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d9057607f821691505b602082108103612da357612da2612d49565b5b50919050565b612db2816128dc565b8114612dbd57600080fd5b50565b600081519050612dcf81612da9565b92915050565b600060208284031215612deb57612dea61242f565b5b6000612df984828501612dc0565b91505092915050565b7f56616c696461746f724f776e61626c653a206f6e6c792076616c696461746f72600082015250565b6000612e386020836124de565b9150612e4382612e02565b602082019050919050565b60006020820190508181036000830152612e6781612e2b565b9050919050565b7f536c617368696e67566f74696e673a20746172676574206973206e6f7420616360008201527f746976652076616c696461746f72000000000000000000000000000000000000602082015250565b6000612eca602e836124de565b9150612ed582612e6e565b604082019050919050565b60006020820190508181036000830152612ef981612ebd565b9050919050565b7f536c617368696e67566f74696e673a2076616c696461746f7220697320616c7260008201527f656164792062616e6e6564000000000000000000000000000000000000000000602082015250565b6000612f5c602b836124de565b9150612f6782612f00565b604082019050919050565b60006020820190508181036000830152612f8b81612f4f565b9050919050565b7f536c617368696e67566f74696e673a20766f74657220697320616c726561647960008201527f20766f74656420616761696e737420676976656e2076616c696461746f720000602082015250565b6000612fee603e836124de565b9150612ff982612f92565b604082019050919050565b6000602082019050818103600083015261301d81612fe1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061305e826123f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036130905761308f613024565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106130db576130da61309b565b5b50565b60008190506130ec826130ca565b919050565b60006130fc826130de565b9050919050565b61310c816130f1565b82525050565b600060608201905061312760008301866124c4565b61313460208301856124c4565b6131416040830184613103565b949350505050565b600067ffffffffffffffff821115613164576131636126d0565b5b602082029050602081019050919050565b600081519050613184816125a1565b92915050565b600061319d61319884613149565b612730565b905080838252602082019050602084028301858111156131c0576131bf6125fc565b5b835b818110156131e957806131d58882613175565b8452602084019350506020810190506131c2565b5050509392505050565b600082601f830112613208576132076125f2565b5b815161321884826020860161318a565b91505092915050565b6000602082840312156132375761323661242f565b5b600082015167ffffffffffffffff81111561325557613254612434565b5b613261848285016131f3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006132a4826123f1565b91506132af836123f1565b9250826132bf576132be61326a565b5b828204905092915050565b60006132d5826123f1565b91506132e0836123f1565b92508282019050808211156132f8576132f7613024565b5b92915050565b600060408201905061331360008301856124c4565b6133206020830184613103565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026133897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261334c565b613393868361334c565b95508019841693508086168417925050509392505050565b60006133c66133c16133bc846123f1565b612912565b6123f1565b9050919050565b6000819050919050565b6133e0836133ab565b6133f46133ec826133cd565b848454613359565b825550505050565b600090565b6134096133fc565b6134148184846133d7565b505050565b5b818110156134385761342d600082613401565b60018101905061341a565b5050565b601f82111561347d5761344e81613327565b6134578461333c565b81016020851015613466578190505b61347a6134728561333c565b830182613419565b50505b505050565b600082821c905092915050565b60006134a060001984600802613482565b1980831691505092915050565b60006134b9838361348f565b9150826002028217905092915050565b6134d2826124d3565b67ffffffffffffffff8111156134eb576134ea6126d0565b5b6134f58254612d78565b61350082828561343c565b600060209050601f8311600181146135335760008415613521578287015190505b61352b85826134ad565b865550613593565b601f19841661354186613327565b60005b8281101561356957848901518255600182019150602085019450602081019050613544565b868310156135865784890151613582601f89168261348f565b8355505b6001600288020188555050505b505050505050565b60006135a6826123f1565b91506135b1836123f1565b92508282039050818111156135c9576135c8613024565b5b92915050565b60006040820190506135e460008301856123fb565b6135f160208301846124c4565b9392505050565b60008160601b9050919050565b6000613610826135f8565b9050919050565b600061362282613605565b9050919050565b61363a613635826124b2565b613617565b82525050565b60008160f81b9050919050565b600061365882613640565b9050919050565b61367061366b826130f1565b61364d565b82525050565b600081905092915050565b600061368d8385613676565b935061369a83858461277c565b82840190509392505050565b60006136b28287613629565b6014820191506136c2828661365f565b6001820191506136d3828486613681565b915081905095945050505050565b6000602082840312156136f7576136f661242f565b5b600061370584828501613175565b91505092915050565b7f5369676e65724f776e61626c653a206f6e6c79207369676e6572000000000000600082015250565b6000613744601a836124de565b915061374f8261370e565b602082019050919050565b6000602082019050818103600083015261377381613737565b9050919050565b7f536c617368696e67566f74696e673a2070726f706f73616c20646f65736e277460008201527f2065786973742100000000000000000000000000000000000000000000000000602082015250565b60006137d66027836124de565b91506137e18261377a565b604082019050919050565b60006020820190508181036000830152613805816137c9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f536c617368696e67566f74696e673a20796f7520616c726561647920766f746560008201527f6420696e20746869732070726f706f73616c0000000000000000000000000000602082015250565b60006138976032836124de565b91506138a28261383b565b604082019050919050565b600060208201905081810360008301526138c68161388a565b9050919050565b60006060820190506138e260008301866123fb565b6138ef60208301856124c4565b6138fc60408301846124c4565b949350505050565b6000819050919050565b600060ff82169050919050565b600061393661393161392c84613904565b612912565b61390e565b9050919050565b6139468161391b565b82525050565b6000602082019050613961600083018461393d565b92915050565b6000613972826123f1565b91506000820361398557613984613024565b5b600182039050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006139ec602e836124de565b91506139f782613990565b604082019050919050565b60006020820190508181036000830152613a1b816139df565b905091905056fea2646970667358221220a6692ad8f8ddb5c5cd3a8d3e25b3cf8c2d830b526917b9c9b0e7329bdd5648b264736f6c63430008120033",
}

// SlashingVotingABI is the input ABI used to generate the binding from.
// Deprecated: Use SlashingVotingMetaData.ABI instead.
var SlashingVotingABI = SlashingVotingMetaData.ABI

// SlashingVotingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlashingVotingMetaData.Bin instead.
var SlashingVotingBin = SlashingVotingMetaData.Bin

// DeploySlashingVoting deploys a new Ethereum contract, binding an instance of SlashingVoting to it.
func DeploySlashingVoting(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SlashingVoting, error) {
	parsed, err := SlashingVotingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlashingVotingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SlashingVoting{SlashingVotingCaller: SlashingVotingCaller{contract: contract}, SlashingVotingTransactor: SlashingVotingTransactor{contract: contract}, SlashingVotingFilterer: SlashingVotingFilterer{contract: contract}}, nil
}

// SlashingVoting is an auto generated Go binding around an Ethereum contract.
type SlashingVoting struct {
	SlashingVotingCaller     // Read-only binding to the contract
	SlashingVotingTransactor // Write-only binding to the contract
	SlashingVotingFilterer   // Log filterer for contract events
}

// SlashingVotingCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlashingVotingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlashingVotingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlashingVotingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlashingVotingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlashingVotingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlashingVotingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlashingVotingSession struct {
	Contract     *SlashingVoting   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SlashingVotingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlashingVotingCallerSession struct {
	Contract *SlashingVotingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SlashingVotingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlashingVotingTransactorSession struct {
	Contract     *SlashingVotingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SlashingVotingRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlashingVotingRaw struct {
	Contract *SlashingVoting // Generic contract binding to access the raw methods on
}

// SlashingVotingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlashingVotingCallerRaw struct {
	Contract *SlashingVotingCaller // Generic read-only contract binding to access the raw methods on
}

// SlashingVotingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlashingVotingTransactorRaw struct {
	Contract *SlashingVotingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlashingVoting creates a new instance of SlashingVoting, bound to a specific deployed contract.
func NewSlashingVoting(address common.Address, backend bind.ContractBackend) (*SlashingVoting, error) {
	contract, err := bindSlashingVoting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SlashingVoting{SlashingVotingCaller: SlashingVotingCaller{contract: contract}, SlashingVotingTransactor: SlashingVotingTransactor{contract: contract}, SlashingVotingFilterer: SlashingVotingFilterer{contract: contract}}, nil
}

// NewSlashingVotingCaller creates a new read-only instance of SlashingVoting, bound to a specific deployed contract.
func NewSlashingVotingCaller(address common.Address, caller bind.ContractCaller) (*SlashingVotingCaller, error) {
	contract, err := bindSlashingVoting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlashingVotingCaller{contract: contract}, nil
}

// NewSlashingVotingTransactor creates a new write-only instance of SlashingVoting, bound to a specific deployed contract.
func NewSlashingVotingTransactor(address common.Address, transactor bind.ContractTransactor) (*SlashingVotingTransactor, error) {
	contract, err := bindSlashingVoting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlashingVotingTransactor{contract: contract}, nil
}

// NewSlashingVotingFilterer creates a new log filterer instance of SlashingVoting, bound to a specific deployed contract.
func NewSlashingVotingFilterer(address common.Address, filterer bind.ContractFilterer) (*SlashingVotingFilterer, error) {
	contract, err := bindSlashingVoting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlashingVotingFilterer{contract: contract}, nil
}

// bindSlashingVoting binds a generic wrapper to an already deployed contract.
func bindSlashingVoting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SlashingVotingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SlashingVoting *SlashingVotingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SlashingVoting.Contract.SlashingVotingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SlashingVoting *SlashingVotingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SlashingVotingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SlashingVoting *SlashingVotingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SlashingVotingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SlashingVoting *SlashingVotingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SlashingVoting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SlashingVoting *SlashingVotingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlashingVoting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SlashingVoting *SlashingVotingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SlashingVoting.Contract.contract.Transact(opts, method, params...)
}

// DKGKEY is a free data retrieval call binding the contract method 0x3a9783f3.
//
// Solidity: function DKG_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCaller) DKGKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "DKG_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DKGKEY is a free data retrieval call binding the contract method 0x3a9783f3.
//
// Solidity: function DKG_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingSession) DKGKEY() (string, error) {
	return _SlashingVoting.Contract.DKGKEY(&_SlashingVoting.CallOpts)
}

// DKGKEY is a free data retrieval call binding the contract method 0x3a9783f3.
//
// Solidity: function DKG_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCallerSession) DKGKEY() (string, error) {
	return _SlashingVoting.Contract.DKGKEY(&_SlashingVoting.CallOpts)
}

// REWARDDISTRIBUTIONPOOLKEY is a free data retrieval call binding the contract method 0xce119a8a.
//
// Solidity: function REWARD_DISTRIBUTION_POOL_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCaller) REWARDDISTRIBUTIONPOOLKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "REWARD_DISTRIBUTION_POOL_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// REWARDDISTRIBUTIONPOOLKEY is a free data retrieval call binding the contract method 0xce119a8a.
//
// Solidity: function REWARD_DISTRIBUTION_POOL_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingSession) REWARDDISTRIBUTIONPOOLKEY() (string, error) {
	return _SlashingVoting.Contract.REWARDDISTRIBUTIONPOOLKEY(&_SlashingVoting.CallOpts)
}

// REWARDDISTRIBUTIONPOOLKEY is a free data retrieval call binding the contract method 0xce119a8a.
//
// Solidity: function REWARD_DISTRIBUTION_POOL_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCallerSession) REWARDDISTRIBUTIONPOOLKEY() (string, error) {
	return _SlashingVoting.Contract.REWARDDISTRIBUTIONPOOLKEY(&_SlashingVoting.CallOpts)
}

// SLASHINGVOTINGKEY is a free data retrieval call binding the contract method 0xfaaa8a64.
//
// Solidity: function SLASHING_VOTING_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCaller) SLASHINGVOTINGKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "SLASHING_VOTING_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SLASHINGVOTINGKEY is a free data retrieval call binding the contract method 0xfaaa8a64.
//
// Solidity: function SLASHING_VOTING_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingSession) SLASHINGVOTINGKEY() (string, error) {
	return _SlashingVoting.Contract.SLASHINGVOTINGKEY(&_SlashingVoting.CallOpts)
}

// SLASHINGVOTINGKEY is a free data retrieval call binding the contract method 0xfaaa8a64.
//
// Solidity: function SLASHING_VOTING_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCallerSession) SLASHINGVOTINGKEY() (string, error) {
	return _SlashingVoting.Contract.SLASHINGVOTINGKEY(&_SlashingVoting.CallOpts)
}

// STAKINGKEY is a free data retrieval call binding the contract method 0x561ff9a9.
//
// Solidity: function STAKING_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCaller) STAKINGKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "STAKING_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// STAKINGKEY is a free data retrieval call binding the contract method 0x561ff9a9.
//
// Solidity: function STAKING_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingSession) STAKINGKEY() (string, error) {
	return _SlashingVoting.Contract.STAKINGKEY(&_SlashingVoting.CallOpts)
}

// STAKINGKEY is a free data retrieval call binding the contract method 0x561ff9a9.
//
// Solidity: function STAKING_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCallerSession) STAKINGKEY() (string, error) {
	return _SlashingVoting.Contract.STAKINGKEY(&_SlashingVoting.CallOpts)
}

// SUPPORTEDTOKENSKEY is a free data retrieval call binding the contract method 0x78a5c206.
//
// Solidity: function SUPPORTED_TOKENS_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCaller) SUPPORTEDTOKENSKEY(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "SUPPORTED_TOKENS_KEY")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SUPPORTEDTOKENSKEY is a free data retrieval call binding the contract method 0x78a5c206.
//
// Solidity: function SUPPORTED_TOKENS_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingSession) SUPPORTEDTOKENSKEY() (string, error) {
	return _SlashingVoting.Contract.SUPPORTEDTOKENSKEY(&_SlashingVoting.CallOpts)
}

// SUPPORTEDTOKENSKEY is a free data retrieval call binding the contract method 0x78a5c206.
//
// Solidity: function SUPPORTED_TOKENS_KEY() view returns(string)
func (_SlashingVoting *SlashingVotingCallerSession) SUPPORTEDTOKENSKEY() (string, error) {
	return _SlashingVoting.Contract.SUPPORTEDTOKENSKEY(&_SlashingVoting.CallOpts)
}

// BannedValidators is a free data retrieval call binding the contract method 0xbe271a02.
//
// Solidity: function bannedValidators(uint256 , uint8 , uint256 ) view returns(address)
func (_SlashingVoting *SlashingVotingCaller) BannedValidators(opts *bind.CallOpts, arg0 *big.Int, arg1 uint8, arg2 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "bannedValidators", arg0, arg1, arg2)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BannedValidators is a free data retrieval call binding the contract method 0xbe271a02.
//
// Solidity: function bannedValidators(uint256 , uint8 , uint256 ) view returns(address)
func (_SlashingVoting *SlashingVotingSession) BannedValidators(arg0 *big.Int, arg1 uint8, arg2 *big.Int) (common.Address, error) {
	return _SlashingVoting.Contract.BannedValidators(&_SlashingVoting.CallOpts, arg0, arg1, arg2)
}

// BannedValidators is a free data retrieval call binding the contract method 0xbe271a02.
//
// Solidity: function bannedValidators(uint256 , uint8 , uint256 ) view returns(address)
func (_SlashingVoting *SlashingVotingCallerSession) BannedValidators(arg0 *big.Int, arg1 uint8, arg2 *big.Int) (common.Address, error) {
	return _SlashingVoting.Contract.BannedValidators(&_SlashingVoting.CallOpts, arg0, arg1, arg2)
}

// Bans is a free data retrieval call binding the contract method 0x3dad9ca9.
//
// Solidity: function bans(bytes32 ) view returns(bool)
func (_SlashingVoting *SlashingVotingCaller) Bans(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "bans", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bans is a free data retrieval call binding the contract method 0x3dad9ca9.
//
// Solidity: function bans(bytes32 ) view returns(bool)
func (_SlashingVoting *SlashingVotingSession) Bans(arg0 [32]byte) (bool, error) {
	return _SlashingVoting.Contract.Bans(&_SlashingVoting.CallOpts, arg0)
}

// Bans is a free data retrieval call binding the contract method 0x3dad9ca9.
//
// Solidity: function bans(bytes32 ) view returns(bool)
func (_SlashingVoting *SlashingVotingCallerSession) Bans(arg0 [32]byte) (bool, error) {
	return _SlashingVoting.Contract.Bans(&_SlashingVoting.CallOpts, arg0)
}

// BansByEpoch is a free data retrieval call binding the contract method 0xfce01126.
//
// Solidity: function bansByEpoch(uint256 , address ) view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) BansByEpoch(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "bansByEpoch", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BansByEpoch is a free data retrieval call binding the contract method 0xfce01126.
//
// Solidity: function bansByEpoch(uint256 , address ) view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) BansByEpoch(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _SlashingVoting.Contract.BansByEpoch(&_SlashingVoting.CallOpts, arg0, arg1)
}

// BansByEpoch is a free data retrieval call binding the contract method 0xfce01126.
//
// Solidity: function bansByEpoch(uint256 , address ) view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) BansByEpoch(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _SlashingVoting.Contract.BansByEpoch(&_SlashingVoting.CallOpts, arg0, arg1)
}

// BansByReason is a free data retrieval call binding the contract method 0xf03528e7.
//
// Solidity: function bansByReason(uint256 , address , uint8 ) view returns(bool)
func (_SlashingVoting *SlashingVotingCaller) BansByReason(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 uint8) (bool, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "bansByReason", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BansByReason is a free data retrieval call binding the contract method 0xf03528e7.
//
// Solidity: function bansByReason(uint256 , address , uint8 ) view returns(bool)
func (_SlashingVoting *SlashingVotingSession) BansByReason(arg0 *big.Int, arg1 common.Address, arg2 uint8) (bool, error) {
	return _SlashingVoting.Contract.BansByReason(&_SlashingVoting.CallOpts, arg0, arg1, arg2)
}

// BansByReason is a free data retrieval call binding the contract method 0xf03528e7.
//
// Solidity: function bansByReason(uint256 , address , uint8 ) view returns(bool)
func (_SlashingVoting *SlashingVotingCallerSession) BansByReason(arg0 *big.Int, arg1 common.Address, arg2 uint8) (bool, error) {
	return _SlashingVoting.Contract.BansByReason(&_SlashingVoting.CallOpts, arg0, arg1, arg2)
}

// ContractRegistry is a free data retrieval call binding the contract method 0xabf410e5.
//
// Solidity: function contractRegistry() view returns(address)
func (_SlashingVoting *SlashingVotingCaller) ContractRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "contractRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractRegistry is a free data retrieval call binding the contract method 0xabf410e5.
//
// Solidity: function contractRegistry() view returns(address)
func (_SlashingVoting *SlashingVotingSession) ContractRegistry() (common.Address, error) {
	return _SlashingVoting.Contract.ContractRegistry(&_SlashingVoting.CallOpts)
}

// ContractRegistry is a free data retrieval call binding the contract method 0xabf410e5.
//
// Solidity: function contractRegistry() view returns(address)
func (_SlashingVoting *SlashingVotingCallerSession) ContractRegistry() (common.Address, error) {
	return _SlashingVoting.Contract.ContractRegistry(&_SlashingVoting.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) CurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "currentEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) CurrentEpoch() (*big.Int, error) {
	return _SlashingVoting.Contract.CurrentEpoch(&_SlashingVoting.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) CurrentEpoch() (*big.Int, error) {
	return _SlashingVoting.Contract.CurrentEpoch(&_SlashingVoting.CallOpts)
}

// EpochByBlock is a free data retrieval call binding the contract method 0xc42127b4.
//
// Solidity: function epochByBlock(uint256 _blockNumber) view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) EpochByBlock(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "epochByBlock", _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochByBlock is a free data retrieval call binding the contract method 0xc42127b4.
//
// Solidity: function epochByBlock(uint256 _blockNumber) view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) EpochByBlock(_blockNumber *big.Int) (*big.Int, error) {
	return _SlashingVoting.Contract.EpochByBlock(&_SlashingVoting.CallOpts, _blockNumber)
}

// EpochByBlock is a free data retrieval call binding the contract method 0xc42127b4.
//
// Solidity: function epochByBlock(uint256 _blockNumber) view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) EpochByBlock(_blockNumber *big.Int) (*big.Int, error) {
	return _SlashingVoting.Contract.EpochByBlock(&_SlashingVoting.CallOpts, _blockNumber)
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) EpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "epochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) EpochPeriod() (*big.Int, error) {
	return _SlashingVoting.Contract.EpochPeriod(&_SlashingVoting.CallOpts)
}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) EpochPeriod() (*big.Int, error) {
	return _SlashingVoting.Contract.EpochPeriod(&_SlashingVoting.CallOpts)
}

// GetBannedValidatorsByReason is a free data retrieval call binding the contract method 0x6e6bb97c.
//
// Solidity: function getBannedValidatorsByReason(uint8 _reason) view returns(address[])
func (_SlashingVoting *SlashingVotingCaller) GetBannedValidatorsByReason(opts *bind.CallOpts, _reason uint8) ([]common.Address, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "getBannedValidatorsByReason", _reason)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetBannedValidatorsByReason is a free data retrieval call binding the contract method 0x6e6bb97c.
//
// Solidity: function getBannedValidatorsByReason(uint8 _reason) view returns(address[])
func (_SlashingVoting *SlashingVotingSession) GetBannedValidatorsByReason(_reason uint8) ([]common.Address, error) {
	return _SlashingVoting.Contract.GetBannedValidatorsByReason(&_SlashingVoting.CallOpts, _reason)
}

// GetBannedValidatorsByReason is a free data retrieval call binding the contract method 0x6e6bb97c.
//
// Solidity: function getBannedValidatorsByReason(uint8 _reason) view returns(address[])
func (_SlashingVoting *SlashingVotingCallerSession) GetBannedValidatorsByReason(_reason uint8) ([]common.Address, error) {
	return _SlashingVoting.Contract.GetBannedValidatorsByReason(&_SlashingVoting.CallOpts, _reason)
}

// GetBansByEpoch is a free data retrieval call binding the contract method 0xc4b14d58.
//
// Solidity: function getBansByEpoch(uint256 _epoch, address _validator) view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) GetBansByEpoch(opts *bind.CallOpts, _epoch *big.Int, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "getBansByEpoch", _epoch, _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBansByEpoch is a free data retrieval call binding the contract method 0xc4b14d58.
//
// Solidity: function getBansByEpoch(uint256 _epoch, address _validator) view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) GetBansByEpoch(_epoch *big.Int, _validator common.Address) (*big.Int, error) {
	return _SlashingVoting.Contract.GetBansByEpoch(&_SlashingVoting.CallOpts, _epoch, _validator)
}

// GetBansByEpoch is a free data retrieval call binding the contract method 0xc4b14d58.
//
// Solidity: function getBansByEpoch(uint256 _epoch, address _validator) view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) GetBansByEpoch(_epoch *big.Int, _validator common.Address) (*big.Int, error) {
	return _SlashingVoting.Contract.GetBansByEpoch(&_SlashingVoting.CallOpts, _epoch, _validator)
}

// IsBannedByReason is a free data retrieval call binding the contract method 0xed2da0ac.
//
// Solidity: function isBannedByReason(address _validator, uint8 _reason) view returns(bool)
func (_SlashingVoting *SlashingVotingCaller) IsBannedByReason(opts *bind.CallOpts, _validator common.Address, _reason uint8) (bool, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "isBannedByReason", _validator, _reason)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBannedByReason is a free data retrieval call binding the contract method 0xed2da0ac.
//
// Solidity: function isBannedByReason(address _validator, uint8 _reason) view returns(bool)
func (_SlashingVoting *SlashingVotingSession) IsBannedByReason(_validator common.Address, _reason uint8) (bool, error) {
	return _SlashingVoting.Contract.IsBannedByReason(&_SlashingVoting.CallOpts, _validator, _reason)
}

// IsBannedByReason is a free data retrieval call binding the contract method 0xed2da0ac.
//
// Solidity: function isBannedByReason(address _validator, uint8 _reason) view returns(bool)
func (_SlashingVoting *SlashingVotingCallerSession) IsBannedByReason(_validator common.Address, _reason uint8) (bool, error) {
	return _SlashingVoting.Contract.IsBannedByReason(&_SlashingVoting.CallOpts, _validator, _reason)
}

// Proposals is a free data retrieval call binding the contract method 0x013cf08b.
//
// Solidity: function proposals(uint256 ) view returns(address validator, string reason, uint256 slashingProposalVoteCounts)
func (_SlashingVoting *SlashingVotingCaller) Proposals(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Validator                  common.Address
	Reason                     string
	SlashingProposalVoteCounts *big.Int
}, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "proposals", arg0)

	outstruct := new(struct {
		Validator                  common.Address
		Reason                     string
		SlashingProposalVoteCounts *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Reason = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.SlashingProposalVoteCounts = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Proposals is a free data retrieval call binding the contract method 0x013cf08b.
//
// Solidity: function proposals(uint256 ) view returns(address validator, string reason, uint256 slashingProposalVoteCounts)
func (_SlashingVoting *SlashingVotingSession) Proposals(arg0 *big.Int) (struct {
	Validator                  common.Address
	Reason                     string
	SlashingProposalVoteCounts *big.Int
}, error) {
	return _SlashingVoting.Contract.Proposals(&_SlashingVoting.CallOpts, arg0)
}

// Proposals is a free data retrieval call binding the contract method 0x013cf08b.
//
// Solidity: function proposals(uint256 ) view returns(address validator, string reason, uint256 slashingProposalVoteCounts)
func (_SlashingVoting *SlashingVotingCallerSession) Proposals(arg0 *big.Int) (struct {
	Validator                  common.Address
	Reason                     string
	SlashingProposalVoteCounts *big.Int
}, error) {
	return _SlashingVoting.Contract.Proposals(&_SlashingVoting.CallOpts, arg0)
}

// ShouldShash is a free data retrieval call binding the contract method 0xbb69ffcd.
//
// Solidity: function shouldShash(uint256 _epoch, address _validator) view returns(bool)
func (_SlashingVoting *SlashingVotingCaller) ShouldShash(opts *bind.CallOpts, _epoch *big.Int, _validator common.Address) (bool, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "shouldShash", _epoch, _validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ShouldShash is a free data retrieval call binding the contract method 0xbb69ffcd.
//
// Solidity: function shouldShash(uint256 _epoch, address _validator) view returns(bool)
func (_SlashingVoting *SlashingVotingSession) ShouldShash(_epoch *big.Int, _validator common.Address) (bool, error) {
	return _SlashingVoting.Contract.ShouldShash(&_SlashingVoting.CallOpts, _epoch, _validator)
}

// ShouldShash is a free data retrieval call binding the contract method 0xbb69ffcd.
//
// Solidity: function shouldShash(uint256 _epoch, address _validator) view returns(bool)
func (_SlashingVoting *SlashingVotingCallerSession) ShouldShash(_epoch *big.Int, _validator common.Address) (bool, error) {
	return _SlashingVoting.Contract.ShouldShash(&_SlashingVoting.CallOpts, _epoch, _validator)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_SlashingVoting *SlashingVotingCaller) SignerGetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "signerGetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_SlashingVoting *SlashingVotingSession) SignerGetter() (common.Address, error) {
	return _SlashingVoting.Contract.SignerGetter(&_SlashingVoting.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_SlashingVoting *SlashingVotingCallerSession) SignerGetter() (common.Address, error) {
	return _SlashingVoting.Contract.SignerGetter(&_SlashingVoting.CallOpts)
}

// SlashingEpochs is a free data retrieval call binding the contract method 0xfbf9204d.
//
// Solidity: function slashingEpochs() view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) SlashingEpochs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "slashingEpochs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashingEpochs is a free data retrieval call binding the contract method 0xfbf9204d.
//
// Solidity: function slashingEpochs() view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) SlashingEpochs() (*big.Int, error) {
	return _SlashingVoting.Contract.SlashingEpochs(&_SlashingVoting.CallOpts)
}

// SlashingEpochs is a free data retrieval call binding the contract method 0xfbf9204d.
//
// Solidity: function slashingEpochs() view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) SlashingEpochs() (*big.Int, error) {
	return _SlashingVoting.Contract.SlashingEpochs(&_SlashingVoting.CallOpts)
}

// SlashingThresold is a free data retrieval call binding the contract method 0x00708bb6.
//
// Solidity: function slashingThresold() view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) SlashingThresold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "slashingThresold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashingThresold is a free data retrieval call binding the contract method 0x00708bb6.
//
// Solidity: function slashingThresold() view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) SlashingThresold() (*big.Int, error) {
	return _SlashingVoting.Contract.SlashingThresold(&_SlashingVoting.CallOpts)
}

// SlashingThresold is a free data retrieval call binding the contract method 0x00708bb6.
//
// Solidity: function slashingThresold() view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) SlashingThresold() (*big.Int, error) {
	return _SlashingVoting.Contract.SlashingThresold(&_SlashingVoting.CallOpts)
}

// ValidatorGetter is a free data retrieval call binding the contract method 0x69495ef5.
//
// Solidity: function validatorGetter() view returns(address)
func (_SlashingVoting *SlashingVotingCaller) ValidatorGetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "validatorGetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorGetter is a free data retrieval call binding the contract method 0x69495ef5.
//
// Solidity: function validatorGetter() view returns(address)
func (_SlashingVoting *SlashingVotingSession) ValidatorGetter() (common.Address, error) {
	return _SlashingVoting.Contract.ValidatorGetter(&_SlashingVoting.CallOpts)
}

// ValidatorGetter is a free data retrieval call binding the contract method 0x69495ef5.
//
// Solidity: function validatorGetter() view returns(address)
func (_SlashingVoting *SlashingVotingCallerSession) ValidatorGetter() (common.Address, error) {
	return _SlashingVoting.Contract.ValidatorGetter(&_SlashingVoting.CallOpts)
}

// VoteCounts is a free data retrieval call binding the contract method 0x81d0e37b.
//
// Solidity: function voteCounts(bytes32 ) view returns(uint256)
func (_SlashingVoting *SlashingVotingCaller) VoteCounts(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "voteCounts", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoteCounts is a free data retrieval call binding the contract method 0x81d0e37b.
//
// Solidity: function voteCounts(bytes32 ) view returns(uint256)
func (_SlashingVoting *SlashingVotingSession) VoteCounts(arg0 [32]byte) (*big.Int, error) {
	return _SlashingVoting.Contract.VoteCounts(&_SlashingVoting.CallOpts, arg0)
}

// VoteCounts is a free data retrieval call binding the contract method 0x81d0e37b.
//
// Solidity: function voteCounts(bytes32 ) view returns(uint256)
func (_SlashingVoting *SlashingVotingCallerSession) VoteCounts(arg0 [32]byte) (*big.Int, error) {
	return _SlashingVoting.Contract.VoteCounts(&_SlashingVoting.CallOpts, arg0)
}

// Votes is a free data retrieval call binding the contract method 0x9386775a.
//
// Solidity: function votes(bytes32 , address ) view returns(bool)
func (_SlashingVoting *SlashingVotingCaller) Votes(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "votes", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Votes is a free data retrieval call binding the contract method 0x9386775a.
//
// Solidity: function votes(bytes32 , address ) view returns(bool)
func (_SlashingVoting *SlashingVotingSession) Votes(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _SlashingVoting.Contract.Votes(&_SlashingVoting.CallOpts, arg0, arg1)
}

// Votes is a free data retrieval call binding the contract method 0x9386775a.
//
// Solidity: function votes(bytes32 , address ) view returns(bool)
func (_SlashingVoting *SlashingVotingCallerSession) Votes(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _SlashingVoting.Contract.Votes(&_SlashingVoting.CallOpts, arg0, arg1)
}

// VotingHashWithReason is a free data retrieval call binding the contract method 0x6acd4f96.
//
// Solidity: function votingHashWithReason(address _validator, uint8 _reason, bytes _nonce) pure returns(bytes32)
func (_SlashingVoting *SlashingVotingCaller) VotingHashWithReason(opts *bind.CallOpts, _validator common.Address, _reason uint8, _nonce []byte) ([32]byte, error) {
	var out []interface{}
	err := _SlashingVoting.contract.Call(opts, &out, "votingHashWithReason", _validator, _reason, _nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VotingHashWithReason is a free data retrieval call binding the contract method 0x6acd4f96.
//
// Solidity: function votingHashWithReason(address _validator, uint8 _reason, bytes _nonce) pure returns(bytes32)
func (_SlashingVoting *SlashingVotingSession) VotingHashWithReason(_validator common.Address, _reason uint8, _nonce []byte) ([32]byte, error) {
	return _SlashingVoting.Contract.VotingHashWithReason(&_SlashingVoting.CallOpts, _validator, _reason, _nonce)
}

// VotingHashWithReason is a free data retrieval call binding the contract method 0x6acd4f96.
//
// Solidity: function votingHashWithReason(address _validator, uint8 _reason, bytes _nonce) pure returns(bytes32)
func (_SlashingVoting *SlashingVotingCallerSession) VotingHashWithReason(_validator common.Address, _reason uint8, _nonce []byte) ([32]byte, error) {
	return _SlashingVoting.Contract.VotingHashWithReason(&_SlashingVoting.CallOpts, _validator, _reason, _nonce)
}

// CreateProposal is a paid mutator transaction binding the contract method 0x1f4f7d29.
//
// Solidity: function createProposal(address _validator, string _reason) returns()
func (_SlashingVoting *SlashingVotingTransactor) CreateProposal(opts *bind.TransactOpts, _validator common.Address, _reason string) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "createProposal", _validator, _reason)
}

// CreateProposal is a paid mutator transaction binding the contract method 0x1f4f7d29.
//
// Solidity: function createProposal(address _validator, string _reason) returns()
func (_SlashingVoting *SlashingVotingSession) CreateProposal(_validator common.Address, _reason string) (*types.Transaction, error) {
	return _SlashingVoting.Contract.CreateProposal(&_SlashingVoting.TransactOpts, _validator, _reason)
}

// CreateProposal is a paid mutator transaction binding the contract method 0x1f4f7d29.
//
// Solidity: function createProposal(address _validator, string _reason) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) CreateProposal(_validator common.Address, _reason string) (*types.Transaction, error) {
	return _SlashingVoting.Contract.CreateProposal(&_SlashingVoting.TransactOpts, _validator, _reason)
}

// Initialize is a paid mutator transaction binding the contract method 0xb1a5d12d.
//
// Solidity: function initialize(address _signerGetterAddress, address _validatorGetterAddress, uint256 _epochPeriod, uint256 _slashingThresold, uint256 _lashingEpochs, address _contractRegistry) returns()
func (_SlashingVoting *SlashingVotingTransactor) Initialize(opts *bind.TransactOpts, _signerGetterAddress common.Address, _validatorGetterAddress common.Address, _epochPeriod *big.Int, _slashingThresold *big.Int, _lashingEpochs *big.Int, _contractRegistry common.Address) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "initialize", _signerGetterAddress, _validatorGetterAddress, _epochPeriod, _slashingThresold, _lashingEpochs, _contractRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0xb1a5d12d.
//
// Solidity: function initialize(address _signerGetterAddress, address _validatorGetterAddress, uint256 _epochPeriod, uint256 _slashingThresold, uint256 _lashingEpochs, address _contractRegistry) returns()
func (_SlashingVoting *SlashingVotingSession) Initialize(_signerGetterAddress common.Address, _validatorGetterAddress common.Address, _epochPeriod *big.Int, _slashingThresold *big.Int, _lashingEpochs *big.Int, _contractRegistry common.Address) (*types.Transaction, error) {
	return _SlashingVoting.Contract.Initialize(&_SlashingVoting.TransactOpts, _signerGetterAddress, _validatorGetterAddress, _epochPeriod, _slashingThresold, _lashingEpochs, _contractRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0xb1a5d12d.
//
// Solidity: function initialize(address _signerGetterAddress, address _validatorGetterAddress, uint256 _epochPeriod, uint256 _slashingThresold, uint256 _lashingEpochs, address _contractRegistry) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) Initialize(_signerGetterAddress common.Address, _validatorGetterAddress common.Address, _epochPeriod *big.Int, _slashingThresold *big.Int, _lashingEpochs *big.Int, _contractRegistry common.Address) (*types.Transaction, error) {
	return _SlashingVoting.Contract.Initialize(&_SlashingVoting.TransactOpts, _signerGetterAddress, _validatorGetterAddress, _epochPeriod, _slashingThresold, _lashingEpochs, _contractRegistry)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _epochPeriod) returns()
func (_SlashingVoting *SlashingVotingTransactor) SetEpochPeriod(opts *bind.TransactOpts, _epochPeriod *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "setEpochPeriod", _epochPeriod)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _epochPeriod) returns()
func (_SlashingVoting *SlashingVotingSession) SetEpochPeriod(_epochPeriod *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SetEpochPeriod(&_SlashingVoting.TransactOpts, _epochPeriod)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _epochPeriod) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) SetEpochPeriod(_epochPeriod *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SetEpochPeriod(&_SlashingVoting.TransactOpts, _epochPeriod)
}

// SetSlashingEpochs is a paid mutator transaction binding the contract method 0x8aaf0dae.
//
// Solidity: function setSlashingEpochs(uint256 _slashingEpochs) returns()
func (_SlashingVoting *SlashingVotingTransactor) SetSlashingEpochs(opts *bind.TransactOpts, _slashingEpochs *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "setSlashingEpochs", _slashingEpochs)
}

// SetSlashingEpochs is a paid mutator transaction binding the contract method 0x8aaf0dae.
//
// Solidity: function setSlashingEpochs(uint256 _slashingEpochs) returns()
func (_SlashingVoting *SlashingVotingSession) SetSlashingEpochs(_slashingEpochs *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SetSlashingEpochs(&_SlashingVoting.TransactOpts, _slashingEpochs)
}

// SetSlashingEpochs is a paid mutator transaction binding the contract method 0x8aaf0dae.
//
// Solidity: function setSlashingEpochs(uint256 _slashingEpochs) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) SetSlashingEpochs(_slashingEpochs *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SetSlashingEpochs(&_SlashingVoting.TransactOpts, _slashingEpochs)
}

// SetSlashingThresold is a paid mutator transaction binding the contract method 0xf84da26e.
//
// Solidity: function setSlashingThresold(uint256 _slashingThresold) returns()
func (_SlashingVoting *SlashingVotingTransactor) SetSlashingThresold(opts *bind.TransactOpts, _slashingThresold *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "setSlashingThresold", _slashingThresold)
}

// SetSlashingThresold is a paid mutator transaction binding the contract method 0xf84da26e.
//
// Solidity: function setSlashingThresold(uint256 _slashingThresold) returns()
func (_SlashingVoting *SlashingVotingSession) SetSlashingThresold(_slashingThresold *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SetSlashingThresold(&_SlashingVoting.TransactOpts, _slashingThresold)
}

// SetSlashingThresold is a paid mutator transaction binding the contract method 0xf84da26e.
//
// Solidity: function setSlashingThresold(uint256 _slashingThresold) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) SetSlashingThresold(_slashingThresold *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.SetSlashingThresold(&_SlashingVoting.TransactOpts, _slashingThresold)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 _proposalId) returns()
func (_SlashingVoting *SlashingVotingTransactor) VoteProposal(opts *bind.TransactOpts, _proposalId *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "voteProposal", _proposalId)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 _proposalId) returns()
func (_SlashingVoting *SlashingVotingSession) VoteProposal(_proposalId *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.VoteProposal(&_SlashingVoting.TransactOpts, _proposalId)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x807896d5.
//
// Solidity: function voteProposal(uint256 _proposalId) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) VoteProposal(_proposalId *big.Int) (*types.Transaction, error) {
	return _SlashingVoting.Contract.VoteProposal(&_SlashingVoting.TransactOpts, _proposalId)
}

// VoteWithReason is a paid mutator transaction binding the contract method 0x03e7f672.
//
// Solidity: function voteWithReason(address _validator, uint8 _reason, bytes _nonce) returns()
func (_SlashingVoting *SlashingVotingTransactor) VoteWithReason(opts *bind.TransactOpts, _validator common.Address, _reason uint8, _nonce []byte) (*types.Transaction, error) {
	return _SlashingVoting.contract.Transact(opts, "voteWithReason", _validator, _reason, _nonce)
}

// VoteWithReason is a paid mutator transaction binding the contract method 0x03e7f672.
//
// Solidity: function voteWithReason(address _validator, uint8 _reason, bytes _nonce) returns()
func (_SlashingVoting *SlashingVotingSession) VoteWithReason(_validator common.Address, _reason uint8, _nonce []byte) (*types.Transaction, error) {
	return _SlashingVoting.Contract.VoteWithReason(&_SlashingVoting.TransactOpts, _validator, _reason, _nonce)
}

// VoteWithReason is a paid mutator transaction binding the contract method 0x03e7f672.
//
// Solidity: function voteWithReason(address _validator, uint8 _reason, bytes _nonce) returns()
func (_SlashingVoting *SlashingVotingTransactorSession) VoteWithReason(_validator common.Address, _reason uint8, _nonce []byte) (*types.Transaction, error) {
	return _SlashingVoting.Contract.VoteWithReason(&_SlashingVoting.TransactOpts, _validator, _reason, _nonce)
}

// SlashingVotingBannedWithReasonIterator is returned from FilterBannedWithReason and is used to iterate over the raw logs and unpacked data for BannedWithReason events raised by the SlashingVoting contract.
type SlashingVotingBannedWithReasonIterator struct {
	Event *SlashingVotingBannedWithReason // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingBannedWithReasonIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingBannedWithReason)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingBannedWithReason)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingBannedWithReasonIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingBannedWithReasonIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingBannedWithReason represents a BannedWithReason event raised by the SlashingVoting contract.
type SlashingVotingBannedWithReason struct {
	Validator common.Address
	Reason    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBannedWithReason is a free log retrieval operation binding the contract event 0x370cc65d87ae599d8b7dd97c0d1f33291921e8cc3652f51fe8db7d974e567c23.
//
// Solidity: event BannedWithReason(address validator, uint8 reason)
func (_SlashingVoting *SlashingVotingFilterer) FilterBannedWithReason(opts *bind.FilterOpts) (*SlashingVotingBannedWithReasonIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "BannedWithReason")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingBannedWithReasonIterator{contract: _SlashingVoting.contract, event: "BannedWithReason", logs: logs, sub: sub}, nil
}

// WatchBannedWithReason is a free log subscription operation binding the contract event 0x370cc65d87ae599d8b7dd97c0d1f33291921e8cc3652f51fe8db7d974e567c23.
//
// Solidity: event BannedWithReason(address validator, uint8 reason)
func (_SlashingVoting *SlashingVotingFilterer) WatchBannedWithReason(opts *bind.WatchOpts, sink chan<- *SlashingVotingBannedWithReason) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "BannedWithReason")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingBannedWithReason)
				if err := _SlashingVoting.contract.UnpackLog(event, "BannedWithReason", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBannedWithReason is a log parse operation binding the contract event 0x370cc65d87ae599d8b7dd97c0d1f33291921e8cc3652f51fe8db7d974e567c23.
//
// Solidity: event BannedWithReason(address validator, uint8 reason)
func (_SlashingVoting *SlashingVotingFilterer) ParseBannedWithReason(log types.Log) (*SlashingVotingBannedWithReason, error) {
	event := new(SlashingVotingBannedWithReason)
	if err := _SlashingVoting.contract.UnpackLog(event, "BannedWithReason", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlashingVotingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SlashingVoting contract.
type SlashingVotingInitializedIterator struct {
	Event *SlashingVotingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingInitialized represents a Initialized event raised by the SlashingVoting contract.
type SlashingVotingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SlashingVoting *SlashingVotingFilterer) FilterInitialized(opts *bind.FilterOpts) (*SlashingVotingInitializedIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingInitializedIterator{contract: _SlashingVoting.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SlashingVoting *SlashingVotingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SlashingVotingInitialized) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingInitialized)
				if err := _SlashingVoting.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SlashingVoting *SlashingVotingFilterer) ParseInitialized(log types.Log) (*SlashingVotingInitialized, error) {
	event := new(SlashingVotingInitialized)
	if err := _SlashingVoting.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlashingVotingProposalCreatedIterator is returned from FilterProposalCreated and is used to iterate over the raw logs and unpacked data for ProposalCreated events raised by the SlashingVoting contract.
type SlashingVotingProposalCreatedIterator struct {
	Event *SlashingVotingProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingProposalCreated represents a ProposalCreated event raised by the SlashingVoting contract.
type SlashingVotingProposalCreated struct {
	ProposalId *big.Int
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalCreated is a free log retrieval operation binding the contract event 0xcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b358.
//
// Solidity: event ProposalCreated(uint256 proposalId, address validator)
func (_SlashingVoting *SlashingVotingFilterer) FilterProposalCreated(opts *bind.FilterOpts) (*SlashingVotingProposalCreatedIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "ProposalCreated")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingProposalCreatedIterator{contract: _SlashingVoting.contract, event: "ProposalCreated", logs: logs, sub: sub}, nil
}

// WatchProposalCreated is a free log subscription operation binding the contract event 0xcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b358.
//
// Solidity: event ProposalCreated(uint256 proposalId, address validator)
func (_SlashingVoting *SlashingVotingFilterer) WatchProposalCreated(opts *bind.WatchOpts, sink chan<- *SlashingVotingProposalCreated) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "ProposalCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingProposalCreated)
				if err := _SlashingVoting.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalCreated is a log parse operation binding the contract event 0xcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b358.
//
// Solidity: event ProposalCreated(uint256 proposalId, address validator)
func (_SlashingVoting *SlashingVotingFilterer) ParseProposalCreated(log types.Log) (*SlashingVotingProposalCreated, error) {
	event := new(SlashingVotingProposalCreated)
	if err := _SlashingVoting.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlashingVotingProposalExecutedIterator is returned from FilterProposalExecuted and is used to iterate over the raw logs and unpacked data for ProposalExecuted events raised by the SlashingVoting contract.
type SlashingVotingProposalExecutedIterator struct {
	Event *SlashingVotingProposalExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingProposalExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingProposalExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingProposalExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingProposalExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingProposalExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingProposalExecuted represents a ProposalExecuted event raised by the SlashingVoting contract.
type SlashingVotingProposalExecuted struct {
	ProposalId *big.Int
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalExecuted is a free log retrieval operation binding the contract event 0x9c85b616f29fca57a17eafe71cf9ff82ffef41766e2cf01ea7f8f7878dd3ec24.
//
// Solidity: event ProposalExecuted(uint256 proposalId, address validator)
func (_SlashingVoting *SlashingVotingFilterer) FilterProposalExecuted(opts *bind.FilterOpts) (*SlashingVotingProposalExecutedIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "ProposalExecuted")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingProposalExecutedIterator{contract: _SlashingVoting.contract, event: "ProposalExecuted", logs: logs, sub: sub}, nil
}

// WatchProposalExecuted is a free log subscription operation binding the contract event 0x9c85b616f29fca57a17eafe71cf9ff82ffef41766e2cf01ea7f8f7878dd3ec24.
//
// Solidity: event ProposalExecuted(uint256 proposalId, address validator)
func (_SlashingVoting *SlashingVotingFilterer) WatchProposalExecuted(opts *bind.WatchOpts, sink chan<- *SlashingVotingProposalExecuted) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "ProposalExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingProposalExecuted)
				if err := _SlashingVoting.contract.UnpackLog(event, "ProposalExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalExecuted is a log parse operation binding the contract event 0x9c85b616f29fca57a17eafe71cf9ff82ffef41766e2cf01ea7f8f7878dd3ec24.
//
// Solidity: event ProposalExecuted(uint256 proposalId, address validator)
func (_SlashingVoting *SlashingVotingFilterer) ParseProposalExecuted(log types.Log) (*SlashingVotingProposalExecuted, error) {
	event := new(SlashingVotingProposalExecuted)
	if err := _SlashingVoting.contract.UnpackLog(event, "ProposalExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlashingVotingProposalVotedIterator is returned from FilterProposalVoted and is used to iterate over the raw logs and unpacked data for ProposalVoted events raised by the SlashingVoting contract.
type SlashingVotingProposalVotedIterator struct {
	Event *SlashingVotingProposalVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingProposalVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingProposalVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingProposalVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingProposalVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingProposalVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingProposalVoted represents a ProposalVoted event raised by the SlashingVoting contract.
type SlashingVotingProposalVoted struct {
	ProposalId *big.Int
	Validator  common.Address
	Voter      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalVoted is a free log retrieval operation binding the contract event 0xd88f7b9f64fb7ba069d57fe9cedb25c7827ee4f7c67c7f0967f6a25bd6d0c53c.
//
// Solidity: event ProposalVoted(uint256 proposalId, address validator, address voter)
func (_SlashingVoting *SlashingVotingFilterer) FilterProposalVoted(opts *bind.FilterOpts) (*SlashingVotingProposalVotedIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "ProposalVoted")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingProposalVotedIterator{contract: _SlashingVoting.contract, event: "ProposalVoted", logs: logs, sub: sub}, nil
}

// WatchProposalVoted is a free log subscription operation binding the contract event 0xd88f7b9f64fb7ba069d57fe9cedb25c7827ee4f7c67c7f0967f6a25bd6d0c53c.
//
// Solidity: event ProposalVoted(uint256 proposalId, address validator, address voter)
func (_SlashingVoting *SlashingVotingFilterer) WatchProposalVoted(opts *bind.WatchOpts, sink chan<- *SlashingVotingProposalVoted) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "ProposalVoted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingProposalVoted)
				if err := _SlashingVoting.contract.UnpackLog(event, "ProposalVoted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalVoted is a log parse operation binding the contract event 0xd88f7b9f64fb7ba069d57fe9cedb25c7827ee4f7c67c7f0967f6a25bd6d0c53c.
//
// Solidity: event ProposalVoted(uint256 proposalId, address validator, address voter)
func (_SlashingVoting *SlashingVotingFilterer) ParseProposalVoted(log types.Log) (*SlashingVotingProposalVoted, error) {
	event := new(SlashingVotingProposalVoted)
	if err := _SlashingVoting.contract.UnpackLog(event, "ProposalVoted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlashingVotingSlashedWithReasonIterator is returned from FilterSlashedWithReason and is used to iterate over the raw logs and unpacked data for SlashedWithReason events raised by the SlashingVoting contract.
type SlashingVotingSlashedWithReasonIterator struct {
	Event *SlashingVotingSlashedWithReason // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingSlashedWithReasonIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingSlashedWithReason)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingSlashedWithReason)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingSlashedWithReasonIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingSlashedWithReasonIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingSlashedWithReason represents a SlashedWithReason event raised by the SlashingVoting contract.
type SlashingVotingSlashedWithReason struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSlashedWithReason is a free log retrieval operation binding the contract event 0x56848e1c0571e37fab91475a03170418e6a2956e066666c8038484240ea54709.
//
// Solidity: event SlashedWithReason(address validator)
func (_SlashingVoting *SlashingVotingFilterer) FilterSlashedWithReason(opts *bind.FilterOpts) (*SlashingVotingSlashedWithReasonIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "SlashedWithReason")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingSlashedWithReasonIterator{contract: _SlashingVoting.contract, event: "SlashedWithReason", logs: logs, sub: sub}, nil
}

// WatchSlashedWithReason is a free log subscription operation binding the contract event 0x56848e1c0571e37fab91475a03170418e6a2956e066666c8038484240ea54709.
//
// Solidity: event SlashedWithReason(address validator)
func (_SlashingVoting *SlashingVotingFilterer) WatchSlashedWithReason(opts *bind.WatchOpts, sink chan<- *SlashingVotingSlashedWithReason) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "SlashedWithReason")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingSlashedWithReason)
				if err := _SlashingVoting.contract.UnpackLog(event, "SlashedWithReason", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashedWithReason is a log parse operation binding the contract event 0x56848e1c0571e37fab91475a03170418e6a2956e066666c8038484240ea54709.
//
// Solidity: event SlashedWithReason(address validator)
func (_SlashingVoting *SlashingVotingFilterer) ParseSlashedWithReason(log types.Log) (*SlashingVotingSlashedWithReason, error) {
	event := new(SlashingVotingSlashedWithReason)
	if err := _SlashingVoting.contract.UnpackLog(event, "SlashedWithReason", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlashingVotingVotedWithReasonIterator is returned from FilterVotedWithReason and is used to iterate over the raw logs and unpacked data for VotedWithReason events raised by the SlashingVoting contract.
type SlashingVotingVotedWithReasonIterator struct {
	Event *SlashingVotingVotedWithReason // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlashingVotingVotedWithReasonIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlashingVotingVotedWithReason)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlashingVotingVotedWithReason)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlashingVotingVotedWithReasonIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlashingVotingVotedWithReasonIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlashingVotingVotedWithReason represents a VotedWithReason event raised by the SlashingVoting contract.
type SlashingVotingVotedWithReason struct {
	Voter     common.Address
	Validator common.Address
	Reason    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVotedWithReason is a free log retrieval operation binding the contract event 0x42ff2b7c8c611c525511dd04c1ee3cae48f313329b255979b94fc87a0f3a4a26.
//
// Solidity: event VotedWithReason(address voter, address validator, uint8 reason)
func (_SlashingVoting *SlashingVotingFilterer) FilterVotedWithReason(opts *bind.FilterOpts) (*SlashingVotingVotedWithReasonIterator, error) {

	logs, sub, err := _SlashingVoting.contract.FilterLogs(opts, "VotedWithReason")
	if err != nil {
		return nil, err
	}
	return &SlashingVotingVotedWithReasonIterator{contract: _SlashingVoting.contract, event: "VotedWithReason", logs: logs, sub: sub}, nil
}

// WatchVotedWithReason is a free log subscription operation binding the contract event 0x42ff2b7c8c611c525511dd04c1ee3cae48f313329b255979b94fc87a0f3a4a26.
//
// Solidity: event VotedWithReason(address voter, address validator, uint8 reason)
func (_SlashingVoting *SlashingVotingFilterer) WatchVotedWithReason(opts *bind.WatchOpts, sink chan<- *SlashingVotingVotedWithReason) (event.Subscription, error) {

	logs, sub, err := _SlashingVoting.contract.WatchLogs(opts, "VotedWithReason")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlashingVotingVotedWithReason)
				if err := _SlashingVoting.contract.UnpackLog(event, "VotedWithReason", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVotedWithReason is a log parse operation binding the contract event 0x42ff2b7c8c611c525511dd04c1ee3cae48f313329b255979b94fc87a0f3a4a26.
//
// Solidity: event VotedWithReason(address voter, address validator, uint8 reason)
func (_SlashingVoting *SlashingVotingFilterer) ParseVotedWithReason(log types.Log) (*SlashingVotingVotedWithReason, error) {
	event := new(SlashingVotingVotedWithReason)
	if err := _SlashingVoting.contract.UnpackLog(event, "VotedWithReason", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
