// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractsregistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractsRegistryMetaData contains all meta data concerning the ContractsRegistry contract.
var ContractsRegistryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ProxyContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ProxyContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BILLING_MANAGER_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DKG_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GATEWAY_FACTORY_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NERIF_TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_DISTRIBUTION_POOL_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_GETTER_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLASHING_VOTING_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENS_VESTING_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__OwnableContractsRegistry_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"name\":\"addProxyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"addProxyContractAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillingManagerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDKGContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGatewayFactoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNerifTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyUpgrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsDistributionPoolContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignerGetterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingVotingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"hasContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"injectDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"injectDependenciesWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"name\":\"justAddProxyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setIsMainChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newImplementation_\",\"type\":\"address\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newImplementation_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"upgradeContractAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051613bea61004c60003960008181610bd001528181610c1301528181610da101528181610de40152610ec90152613bea6000f3fe6080604052600436106200028e5760003560e01c8063715018a6116200015f578063a699c33111620000c5578063d10611fc1162000084578063d10611fc1462000867578063d2bea9c6146200088d578063e0e084f814620008a5578063f2fde38b14620008ca578063fabf588e14620008ef578063fb9d9ac5146200090757600080fd5b8063a699c331146200077d578063ab7e596314620007ba578063b834f6fb1462000801578063be96dc3e146200081d578063bf5b6016146200084257600080fd5b80638da5cb5b116200011e5780638da5cb5b14620006955780638e68dce414620006b557806394ee17cd14620006cd57806397623b5814620006e5578063a198508a146200070a578063a217269a146200074757600080fd5b8063715018a614620005da5780637ac3c02f14620005f25780637fa5a1a6146200060a5780638bcd9cf814620006475780638c223601146200065f57600080fd5b806336ca3d7311620002055780635056901911620001c45780635056901914620004d757806351dad82c146200050857806352d1902d146200052d578063568a45ad14620005545780636b68389614620005905780636bbe869414620005b557600080fd5b806336ca3d731462000432578063423c072b146200044a578063447c411b146200046f57806348197f7714620004a85780634f1ef28614620004c057600080fd5b80631bae7a6511620002525780631bae7a6514620003515780631c48004514620003695780631e0cba0d14620003b35780633581777314620003e85780633659cfe6146200040d57600080fd5b806266f0a81462000293578063046aa0cb14620002c85780631271bd5314620002e05780631a4699e814620003075780631adad8cf146200032c575b600080fd5b348015620002a057600080fd5b50620002ab6200091f565b6040516001600160a01b0390911681526020015b60405180910390f35b348015620002d557600080fd5b50620002ab6200094c565b348015620002ed57600080fd5b5062000305620002ff36600462002127565b6200098a565b005b3480156200031457600080fd5b50620003056200032636600462002184565b620009dc565b3480156200033957600080fd5b50620003056200034b366004620021a8565b620009f9565b3480156200035e57600080fd5b506200030562000a48565b3480156200037657600080fd5b50620003a46040518060400160405280600d81526020016c29a4a3a722a92fa3a2aa2a22a960991b81525081565b604051620002bf919062002242565b348015620003c057600080fd5b50620003a4604051806040016040528060078152602001665354414b494e4760c81b81525081565b348015620003f557600080fd5b50620002ab62000407366004620022ea565b62000b70565b3480156200041a57600080fd5b50620003056200042c36600462002338565b62000bc6565b3480156200043f57600080fd5b50620002ab62000cae565b3480156200045757600080fd5b50620003056200046936600462002358565b62000cdb565b3480156200047c57600080fd5b50620003a46040518060400160405280600b81526020016a2722a924a32faa27a5a2a760a91b81525081565b348015620004b557600080fd5b50620002ab62000d63565b62000305620004d1366004620023e6565b62000d97565b348015620004e457600080fd5b50620003a460405180604001604052806003815260200162444b4760e81b81525081565b3480156200051557600080fd5b50620003056200052736600462002127565b62000e6f565b3480156200053a57600080fd5b506200054562000ebc565b604051908152602001620002bf565b3480156200056157600080fd5b50620003a46040518060400160405280600e81526020016d544f4b454e535f56455354494e4760901b81525081565b3480156200059d57600080fd5b50620002ab620005af366004620022ea565b62000f73565b348015620005c257600080fd5b5062000305620005d436600462002358565b6200107d565b348015620005e757600080fd5b5062000305620010fe565b348015620005ff57600080fd5b50620002ab62001116565b3480156200061757600080fd5b50620003a46040518060400160405280600f81526020016e2124a62624a723afa6a0a720a3a2a960891b81525081565b3480156200065457600080fd5b50620002ab620011e2565b3480156200066c57600080fd5b50620006846200067e366004620022ea565b62001214565b6040519015158152602001620002bf565b348015620006a257600080fd5b506035546001600160a01b0316620002ab565b348015620006c257600080fd5b50620002ab62001253565b348015620006da57600080fd5b50620002ab6200127f565b348015620006f257600080fd5b506200030562000704366004620021a8565b620012af565b3480156200071757600080fd5b50620003a46040518060400160405280600f81526020016e534c415348494e475f564f54494e4760881b81525081565b3480156200075457600080fd5b50620003a460405180604001604052806008815260200167524547495354525960c01b81525081565b3480156200078a57600080fd5b50620003a46040518060400160405280600f81526020016e474154455741595f464143544f525960881b81525081565b348015620007c757600080fd5b50620003a460405180604001604052806019815260200178149155d0549114d7d11254d514925095551253d397d413d3d3603a1b81525081565b3480156200080e57600080fd5b50606754620006849060ff1681565b3480156200082a57600080fd5b50620003056200083c36600462002451565b620012fa565b3480156200084f57600080fd5b50620003056200086136600462002127565b6200137f565b3480156200087457600080fd5b506000546201000090046001600160a01b0316620002ab565b3480156200089a57600080fd5b50620002ab620013cc565b348015620008b257600080fd5b5062000305620008c436600462002127565b620013ff565b348015620008d757600080fd5b5062000305620008e936600462002338565b6200144c565b348015620008fc57600080fd5b50620002ab620014c8565b3480156200091457600080fd5b50620002ab620014fc565b60006200094760405180604001604052806003815260200162444b4760e81b81525062000b70565b905090565b60006200094760405180604001604052806019815260200178149155d0549114d7d11254d514925095551253d397d413d3d3603a1b81525062000b70565b6200099462001530565b620009d783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506200158c915050565b505050565b620009e662001530565b6067805460ff1916911515919091179055565b62000a0362001530565b62000a4482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620015a892505050565b5050565b600054610100900460ff161580801562000a695750600054600160ff909116105b8062000a855750303b15801562000a85575060005460ff166001145b62000aee5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000b12576000805461ff0019166101001790555b62000b1c620015c3565b62000b26620015f7565b801562000b6d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60008060018360405162000b859190620024c4565b908152604051908190036020019020546001600160a01b031690508062000bc05760405162461bcd60e51b815260040162000ae590620024e2565b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300362000c115760405162461bcd60e51b815260040162000ae5906200252f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000c5c60008051602062003b6e833981519152546001600160a01b031690565b6001600160a01b03161462000c855760405162461bcd60e51b815260040162000ae5906200257b565b62000c908162001675565b6040805160008082526020820190925262000b6d918391906200167f565b60006200094760405180604001604052806008815260200167524547495354525960c01b81525062000b70565b62000ce562001530565b62000d5c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f880181900481028201810190925286815288935091508690869081908401838280828437600092019190915250620017f792505050565b5050505050565b6000620009476040518060400160405280600f81526020016e2124a62624a723afa6a0a720a3a2a960891b81525062000b70565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300362000de25760405162461bcd60e51b815260040162000ae5906200252f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000e2d60008051602062003b6e833981519152546001600160a01b031690565b6001600160a01b03161462000e565760405162461bcd60e51b815260040162000ae5906200257b565b62000e618262001675565b62000a44828260016200167f565b62000e7962001530565b620009d783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250620018dc915050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000f5e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840162000ae5565b5060008051602062003b6e8339815191525b90565b60008060018360405162000f889190620024c4565b908152604051908190036020019020546001600160a01b031690508062000fc35760405162461bcd60e51b815260040162000ae590620024e2565b6001600160a01b03811660009081526002602052604090205460ff1662000ffe5760405162461bcd60e51b815260040162000ae590620025c7565b600054604051630ad6396560e11b81526001600160a01b03838116600483015262010000909204909116906315ac72ca90602401602060405180830381865afa15801562001050573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107691906200260e565b9392505050565b6200108762001530565b62000d5c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f88018190048102820181019092528681528893509150869086908190840183828082843760009201919091525062001a0c92505050565b6200110862001530565b62001114600062001b38565b565b6000620011486040518060400160405280600d81526020016c29a4a3a722a92fa3a2aa2a22a960991b81525062001214565b1562000f70576200117e6040518060400160405280600d81526020016c29a4a3a722a92fa3a2aa2a22a960991b81525062000b70565b6001600160a01b0316631a296e026040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200094791906200260e565b6000620009476040518060400160405280600d81526020016c29a4a3a722a92fa3a2aa2a22a960991b81525062000b70565b6000806001600160a01b0316600183604051620012329190620024c4565b908152604051908190036020019020546001600160a01b0316141592915050565b600062000947604051806040016040528060078152602001665354414b494e4760c81b81525062000b70565b6000620009476040518060400160405280600b81526020016a2722a924a32faa27a5a2a760a91b81525062000b70565b620012b962001530565b62000a4482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001b8a92505050565b6200130462001530565b6200137984848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8801819004810282018101909252868152925086915085908190840183828082843760009201919091525062001c5892505050565b50505050565b6200138962001530565b620009d783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925062001d13915050565b6000620009476040518060400160405280600e81526020016d544f4b454e535f56455354494e4760901b81525062000b70565b6200140962001530565b620009d783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925062001db0915050565b6200145662001530565b6001600160a01b038116620014bd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000ae5565b62000b6d8162001b38565b6000620009476040518060400160405280600f81526020016e474154455741595f464143544f525960881b81525062000b70565b6000620009476040518060400160405280600f81526020016e534c415348494e475f564f54494e4760881b81525062000b70565b6035546001600160a01b03163314620011145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000ae5565b62000a4482826040518060200160405280600081525062001a0c565b62000b6d816040518060200160405280600081525062001c58565b600054610100900460ff16620015ed5760405162461bcd60e51b815260040162000ae5906200262e565b6200111462001dcc565b600054610100900460ff16620016215760405162461bcd60e51b815260040162000ae5906200262e565b6040516200162f90620020a9565b604051809103906000f0801580156200164c573d6000803e3d6000fd5b50600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550565b62000b6d62001530565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615620016b557620009d78362001e01565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562001712575060408051601f3d908101601f191682019092526200170f9181019062002679565b60015b620017775760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840162000ae5565b60008051602062003b6e8339815191528114620017e95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840162000ae5565b50620009d783838362001ea0565b6001600160a01b038216620018205760405162461bcd60e51b815260040162000ae59062002693565b60008054620018419084906201000090046001600160a01b03168462001ecb565b905080600185604051620018569190620024c4565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b03958616179055928416600090815260029092529020805460ff191660011790557f10e75df11debcdd8425769babc76babb1b082c13be22ba626bfc8e6de393c4c590620018ce90869084908790620026df565b60405180910390a150505050565b6001600160a01b038116620019055760405162461bcd60e51b815260040162000ae59062002693565b80600183604051620019189190620024c4565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b0395861617905584841660008181526002909452918320805460ff191660011790559154630ad6396560e11b835260048301919091527f10e75df11debcdd8425769babc76babb1b082c13be22ba626bfc8e6de393c4c59285928592620100009004909116906315ac72ca90602401602060405180830381865afa158015620019c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019ef91906200260e565b60405162001a0093929190620026df565b60405180910390a15050565b600060018460405162001a209190620024c4565b908152604051908190036020019020546001600160a01b031690508062001a5b5760405162461bcd60e51b815260040162000ae590620024e2565b6001600160a01b03811660009081526002602052604090205460ff1662001a965760405162461bcd60e51b815260040162000ae590620025c7565b60005460405163a745e3df60e01b8152620100009091046001600160a01b03169063a745e3df9062001ad19084908790879060040162002714565b600060405180830381600087803b15801562001aec57600080fd5b505af115801562001b01573d6000803e3d6000fd5b505050507f0ade5313c9e16e7e06de9ab0edde476cc9a6fd51b973b8685c6c5026028a39d28484604051620018ce9291906200274b565b603580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060018260405162001b9e9190620024c4565b908152604051908190036020019020546001600160a01b031690508062001bd95760405162461bcd60e51b815260040162000ae590620024e2565b6001600160a01b03811660009081526002602052604090819020805460ff191690555160019062001c0c908490620024c4565b90815260405190819003602001812080546001600160a01b03191690557f0c4eafbc12ea2584eb34031bf52952af5909a5880ef4058cb05c627ae39ffda09062001a0090849062002242565b600060018360405162001c6c9190620024c4565b908152604051908190036020019020546001600160a01b031690508062001ca75760405162461bcd60e51b815260040162000ae590620024e2565b604051636913045160e01b815281906001600160a01b0382169063691304519062001cd9903090879060040162002777565b600060405180830381600087803b15801562001cf457600080fd5b505af115801562001d09573d6000803e3d6000fd5b5050505050505050565b6001600160a01b03811662001d3c5760405162461bcd60e51b815260040162000ae59062002693565b8060018360405162001d4f9190620024c4565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091557f8b4ef7d4e5bc8f098e6f637ac0acf4aee47b3f027efea6307264b06b4bc9d2989062001a0090849084906200274b565b62000a44828260405180602001604052806000815250620017f7565b600054610100900460ff1662001df65760405162461bcd60e51b815260040162000ae5906200262e565b620011143362001b38565b6001600160a01b0381163b62001e705760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000ae5565b60008051602062003b6e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b62001eab8362001f12565b60008251118062001eb95750805b15620009d75762001379838362001f54565b600083838360405162001ede90620020b7565b62001eec9392919062002714565b604051809103906000f08015801562001f09573d6000803e3d6000fd5b50949350505050565b62001f1d8162001e01565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606062001076838360405180606001604052806027815260200162003b8e602791396060600080856001600160a01b03168560405162001f959190620024c4565b600060405180830381855af49150503d806000811462001fd2576040519150601f19603f3d011682016040523d82523d6000602084013e62001fd7565b606091505b509150915062001fea8683838762001ff4565b9695505050505050565b606083156200206857825160000362002060576001600160a01b0385163b620020605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000ae5565b508162002074565b6200207483836200207c565b949350505050565b8151156200208d5781518083602001fd5b8060405162461bcd60e51b815260040162000ae5919062002242565b610511806200279e83390190565b610ebf8062002caf83390190565b60008083601f840112620020d857600080fd5b50813567ffffffffffffffff811115620020f157600080fd5b6020830191508360208285010111156200210a57600080fd5b9250929050565b6001600160a01b038116811462000b6d57600080fd5b6000806000604084860312156200213d57600080fd5b833567ffffffffffffffff8111156200215557600080fd5b6200216386828701620020c5565b9094509250506020840135620021798162002111565b809150509250925092565b6000602082840312156200219757600080fd5b813580151581146200107657600080fd5b60008060208385031215620021bc57600080fd5b823567ffffffffffffffff811115620021d457600080fd5b620021e285828601620020c5565b90969095509350505050565b60005b838110156200220b578181015183820152602001620021f1565b50506000910152565b600081518084526200222e816020860160208601620021ee565b601f01601f19169290920160200192915050565b60208152600062001076602083018462002214565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156200228b576200228b62002257565b604051601f8501601f19908116603f01168101908282118183101715620022b657620022b662002257565b81604052809350858152868686011115620022d057600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215620022fd57600080fd5b813567ffffffffffffffff8111156200231557600080fd5b8201601f810184136200232757600080fd5b62002074848235602084016200226d565b6000602082840312156200234b57600080fd5b8135620010768162002111565b6000806000806000606086880312156200237157600080fd5b853567ffffffffffffffff808211156200238a57600080fd5b6200239889838a01620020c5565b909750955060208801359150620023af8262002111565b90935060408701359080821115620023c657600080fd5b50620023d588828901620020c5565b969995985093965092949392505050565b60008060408385031215620023fa57600080fd5b8235620024078162002111565b9150602083013567ffffffffffffffff8111156200242457600080fd5b8301601f810185136200243657600080fd5b62002447858235602084016200226d565b9150509250929050565b600080600080604085870312156200246857600080fd5b843567ffffffffffffffff808211156200248157600080fd5b6200248f88838901620020c5565b90965094506020870135915080821115620024a957600080fd5b50620024b887828801620020c5565b95989497509550505050565b60008251620024d8818460208701620021ee565b9190910192915050565b6020808252602d908201527f436f6e74726163747352656769737472793a2074686973206d617070696e672060408201526c191bd95cdb89dd08195e1a5cdd609a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526027908201527f436f6e74726163747352656769737472793a206e6f7420612070726f787920636040820152661bdb9d1c9858dd60ca1b606082015260800190565b6000602082840312156200262157600080fd5b8151620010768162002111565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156200268c57600080fd5b5051919050565b6020808252602c908201527f436f6e74726163747352656769737472793a207a65726f20616464726573732060408201526b34b9903337b93134b23232b760a11b606082015260800190565b606081526000620026f4606083018662002214565b6001600160a01b0394851660208401529290931660409091015292915050565b6001600160a01b03848116825283166020820152606060408201819052600090620027429083018462002214565b95945050505050565b60408152600062002760604083018562002214565b905060018060a01b03831660208301529392505050565b6001600160a01b038316815260406020820181905260009062002074908301846200221456fe60a060405234801561001057600080fd5b5033806100895760405162461bcd60e51b815260206004820152603360248201527f5065726d616e656e744f776e61626c653a207a65726f2061646472657373206360448201527f616e206e6f7420626520746865206f776e657200000000000000000000000000606482015260840160405180910390fd5b6001600160a01b031660805260805161045b6100b66000396000818160770152610270015261045b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806315ac72ca146100465780638da5cb5b14610075578063a745e3df1461009b575b600080fd5b610059610054366004610312565b6100b0565b6040516001600160a01b03909116815260200160405180910390f35b7f0000000000000000000000000000000000000000000000000000000000000000610059565b6100ae6100a9366004610336565b610197565b005b6000806000836001600160a01b03166040516100d690635c60da1b60e01b815260040190565b600060405180830381855afa9150503d8060008114610111576040519150601f19603f3d011682016040523d82523d6000602084013e610116565b606091505b50915091508161017b5760405162461bcd60e51b815260206004820152602560248201527f5472616e73706172656e7450726f787955706772616465723a206e6f7420612060448201526470726f787960d81b60648201526084015b60405180910390fd5b8080602001905181019061018f91906103c8565b949350505050565b61019f61026e565b801561020c5760405163278f794360e11b81526001600160a01b03851690634f1ef286906101d5908690869086906004016103e5565b600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b50505050610268565b604051631b2ce7f360e11b81526001600160a01b038481166004830152851690633659cfe690602401600060405180830381600087803b15801561024f57600080fd5b505af1158015610263573d6000803e3d6000fd5b505050505b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146102f85760405162461bcd60e51b815260206004820152602960248201527f5065726d616e656e744f776e61626c653a2063616c6c6572206973206e6f74206044820152683a34329037bbb732b960b91b6064820152608401610172565b565b6001600160a01b038116811461030f57600080fd5b50565b60006020828403121561032457600080fd5b813561032f816102fa565b9392505050565b6000806000806060858703121561034c57600080fd5b8435610357816102fa565b93506020850135610367816102fa565b9250604085013567ffffffffffffffff8082111561038457600080fd5b818701915087601f83011261039857600080fd5b8135818111156103a757600080fd5b8860208285010111156103b957600080fd5b95989497505060200194505050565b6000602082840312156103da57600080fd5b815161032f816102fa565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f191601019291505056fea26469706673582212201dacf370c7673faa9b81c280c541c404c1a70c0db19de8f86f3a7e53a13ff6ee64736f6c63430008120033608060405260405162000ebf38038062000ebf833981016040819052620000269162000497565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ca565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b620001691760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000e9860279139620002f8565b9392505050565b60006200018060008051602062000e7883398151915260001b6200037760201b620001951760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e7883398151915260001b6200037760201b620001951760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a816200037a60201b620001981760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6200037760201b620001951760201c565b6060600080856001600160a01b03168560405162000317919062000577565b600060405180830381855af49150503d806000811462000354576040519150601f19603f3d011682016040523d82523d6000602084013e62000359565b606091505b5090925090506200036d8683838762000389565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620003fd578251600003620003f5576001600160a01b0385163b620003f55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620001f1565b508162000409565b62000409838362000411565b949350505050565b815115620004225781518083602001fd5b8060405162461bcd60e51b8152600401620001f1919062000595565b80516001600160a01b03811681146200045657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200048e57818101518382015260200162000474565b50506000910152565b600080600060608486031215620004ad57600080fd5b620004b8846200043e565b9250620004c8602085016200043e565b60408501519092506001600160401b0380821115620004e657600080fd5b818601915086601f830112620004fb57600080fd5b8151818111156200051057620005106200045b565b604051601f8201601f19908116603f011681019083821181831017156200053b576200053b6200045b565b816040528281528960208487010111156200055557600080fd5b6200056883602083016020880162000471565b80955050505050509250925092565b600082516200058b81846020870162000471565b9190910192915050565b6020815260008251806020840152620005b681604085016020870162000471565b601f01601f19169190910160400192915050565b61089e80620005da6000396000f3fe60806040523661001357610011610017565b005b6100115b61001f6101a7565b6001600160a01b0316330361015f5760606001600160e01b0319600035166364d3180d60e11b810161005a576100536101da565b9150610157565b63587086bd60e11b6001600160e01b031982160161007a57610053610231565b63070d7c6960e41b6001600160e01b031982160161009a57610053610277565b621eb96f60e61b6001600160e01b03198216016100b9576100536102a8565b63a39f25e560e01b6001600160e01b03198216016100d9576100536102e8565b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b815160208301f35b6101676102fc565b565b606061018e83836040518060600160405280602781526020016108426027913961030c565b9392505050565b90565b6001600160a01b03163b151590565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60606101e4610384565b60006101f33660048184610695565b81019061020091906106db565b905061021d8160405180602001604052806000815250600061038f565b505060408051602081019091526000815290565b60606000806102433660048184610695565b810190610250919061070c565b915091506102608282600161038f565b604051806020016040528060008152509250505090565b6060610281610384565b60006102903660048184610695565b81019061029d91906106db565b905061021d816103bb565b60606102b2610384565b60006102bc6101a7565b604080516001600160a01b03831660208201529192500160405160208183030381529060405291505090565b60606102f2610384565b60006102bc610412565b610167610307610412565b610421565b6060600080856001600160a01b03168560405161032991906107f2565b600060405180830381855af49150503d8060008114610364576040519150601f19603f3d011682016040523d82523d6000602084013e610369565b606091505b509150915061037a86838387610445565b9695505050505050565b341561016757600080fd5b610398836104c6565b6000825111806103a55750805b156103b6576103b48383610169565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e46101a7565b604080516001600160a01b03928316815291841660208301520160405180910390a161040f81610506565b50565b600061041c6105af565b905090565b3660008037600080366000845af43d6000803e808015610440573d6000f35b3d6000fd5b606083156104b45782516000036104ad576001600160a01b0385163b6104ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161014e565b50816104be565b6104be83836105d7565b949350505050565b6104cf81610601565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661056b5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840161014e565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6101cb565b8151156105e75781518083602001fd5b8060405162461bcd60e51b815260040161014e919061080e565b6001600160a01b0381163b61066e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161014e565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61058e565b600080858511156106a557600080fd5b838611156106b257600080fd5b5050820193919092039150565b80356001600160a01b03811681146106d657600080fd5b919050565b6000602082840312156106ed57600080fd5b61018e826106bf565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561071f57600080fd5b610728836106bf565b9150602083013567ffffffffffffffff8082111561074557600080fd5b818501915085601f83011261075957600080fd5b81358181111561076b5761076b6106f6565b604051601f8201601f19908116603f01168101908382118183101715610793576107936106f6565b816040528281528860208487010111156107ac57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156107e95781810151838201526020016107d1565b50506000910152565b600082516108048184602087016107ce565b9190910192915050565b602081526000825180602084015261082d8160408501602087016107ce565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ff06b7f22571edd0b1ec03341dea928c440fedd6affd657282d0c37db28ad8f564736f6c63430008120033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207be53b8724e1ae8b37d2041735dd5e7d0713c64b52c0a8dbf42c5c11437dbfbd64736f6c63430008120033",
}

// ContractsRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsRegistryMetaData.ABI instead.
var ContractsRegistryABI = ContractsRegistryMetaData.ABI

// ContractsRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsRegistryMetaData.Bin instead.
var ContractsRegistryBin = ContractsRegistryMetaData.Bin

// DeployContractsRegistry deploys a new Ethereum contract, binding an instance of ContractsRegistry to it.
func DeployContractsRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContractsRegistry, error) {
	parsed, err := ContractsRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractsRegistry{ContractsRegistryCaller: ContractsRegistryCaller{contract: contract}, ContractsRegistryTransactor: ContractsRegistryTransactor{contract: contract}, ContractsRegistryFilterer: ContractsRegistryFilterer{contract: contract}}, nil
}

// ContractsRegistry is an auto generated Go binding around an Ethereum contract.
type ContractsRegistry struct {
	ContractsRegistryCaller     // Read-only binding to the contract
	ContractsRegistryTransactor // Write-only binding to the contract
	ContractsRegistryFilterer   // Log filterer for contract events
}

// ContractsRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsRegistrySession struct {
	Contract     *ContractsRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContractsRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsRegistryCallerSession struct {
	Contract *ContractsRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ContractsRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsRegistryTransactorSession struct {
	Contract     *ContractsRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ContractsRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRegistryRaw struct {
	Contract *ContractsRegistry // Generic contract binding to access the raw methods on
}

// ContractsRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsRegistryCallerRaw struct {
	Contract *ContractsRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsRegistryTransactorRaw struct {
	Contract *ContractsRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractsRegistry creates a new instance of ContractsRegistry, bound to a specific deployed contract.
func NewContractsRegistry(address common.Address, backend bind.ContractBackend) (*ContractsRegistry, error) {
	contract, err := bindContractsRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistry{ContractsRegistryCaller: ContractsRegistryCaller{contract: contract}, ContractsRegistryTransactor: ContractsRegistryTransactor{contract: contract}, ContractsRegistryFilterer: ContractsRegistryFilterer{contract: contract}}, nil
}

// NewContractsRegistryCaller creates a new read-only instance of ContractsRegistry, bound to a specific deployed contract.
func NewContractsRegistryCaller(address common.Address, caller bind.ContractCaller) (*ContractsRegistryCaller, error) {
	contract, err := bindContractsRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryCaller{contract: contract}, nil
}

// NewContractsRegistryTransactor creates a new write-only instance of ContractsRegistry, bound to a specific deployed contract.
func NewContractsRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsRegistryTransactor, error) {
	contract, err := bindContractsRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryTransactor{contract: contract}, nil
}

// NewContractsRegistryFilterer creates a new log filterer instance of ContractsRegistry, bound to a specific deployed contract.
func NewContractsRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsRegistryFilterer, error) {
	contract, err := bindContractsRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryFilterer{contract: contract}, nil
}

// bindContractsRegistry binds a generic wrapper to an already deployed contract.
func bindContractsRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractsRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractsRegistry *ContractsRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractsRegistry.Contract.ContractsRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractsRegistry *ContractsRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.ContractsRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractsRegistry *ContractsRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.ContractsRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractsRegistry *ContractsRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractsRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractsRegistry *ContractsRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractsRegistry *ContractsRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.contract.Transact(opts, method, params...)
}

// BILLINGMANAGERNAME is a free data retrieval call binding the contract method 0x7fa5a1a6.
//
// Solidity: function BILLING_MANAGER_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) BILLINGMANAGERNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "BILLING_MANAGER_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BILLINGMANAGERNAME is a free data retrieval call binding the contract method 0x7fa5a1a6.
//
// Solidity: function BILLING_MANAGER_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) BILLINGMANAGERNAME() (string, error) {
	return _ContractsRegistry.Contract.BILLINGMANAGERNAME(&_ContractsRegistry.CallOpts)
}

// BILLINGMANAGERNAME is a free data retrieval call binding the contract method 0x7fa5a1a6.
//
// Solidity: function BILLING_MANAGER_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) BILLINGMANAGERNAME() (string, error) {
	return _ContractsRegistry.Contract.BILLINGMANAGERNAME(&_ContractsRegistry.CallOpts)
}

// DKGNAME is a free data retrieval call binding the contract method 0x50569019.
//
// Solidity: function DKG_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) DKGNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "DKG_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DKGNAME is a free data retrieval call binding the contract method 0x50569019.
//
// Solidity: function DKG_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) DKGNAME() (string, error) {
	return _ContractsRegistry.Contract.DKGNAME(&_ContractsRegistry.CallOpts)
}

// DKGNAME is a free data retrieval call binding the contract method 0x50569019.
//
// Solidity: function DKG_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) DKGNAME() (string, error) {
	return _ContractsRegistry.Contract.DKGNAME(&_ContractsRegistry.CallOpts)
}

// GATEWAYFACTORYNAME is a free data retrieval call binding the contract method 0xa699c331.
//
// Solidity: function GATEWAY_FACTORY_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) GATEWAYFACTORYNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "GATEWAY_FACTORY_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GATEWAYFACTORYNAME is a free data retrieval call binding the contract method 0xa699c331.
//
// Solidity: function GATEWAY_FACTORY_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) GATEWAYFACTORYNAME() (string, error) {
	return _ContractsRegistry.Contract.GATEWAYFACTORYNAME(&_ContractsRegistry.CallOpts)
}

// GATEWAYFACTORYNAME is a free data retrieval call binding the contract method 0xa699c331.
//
// Solidity: function GATEWAY_FACTORY_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) GATEWAYFACTORYNAME() (string, error) {
	return _ContractsRegistry.Contract.GATEWAYFACTORYNAME(&_ContractsRegistry.CallOpts)
}

// NERIFTOKENNAME is a free data retrieval call binding the contract method 0x447c411b.
//
// Solidity: function NERIF_TOKEN_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) NERIFTOKENNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "NERIF_TOKEN_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NERIFTOKENNAME is a free data retrieval call binding the contract method 0x447c411b.
//
// Solidity: function NERIF_TOKEN_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) NERIFTOKENNAME() (string, error) {
	return _ContractsRegistry.Contract.NERIFTOKENNAME(&_ContractsRegistry.CallOpts)
}

// NERIFTOKENNAME is a free data retrieval call binding the contract method 0x447c411b.
//
// Solidity: function NERIF_TOKEN_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) NERIFTOKENNAME() (string, error) {
	return _ContractsRegistry.Contract.NERIFTOKENNAME(&_ContractsRegistry.CallOpts)
}

// REGISTRYNAME is a free data retrieval call binding the contract method 0xa217269a.
//
// Solidity: function REGISTRY_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) REGISTRYNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "REGISTRY_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// REGISTRYNAME is a free data retrieval call binding the contract method 0xa217269a.
//
// Solidity: function REGISTRY_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) REGISTRYNAME() (string, error) {
	return _ContractsRegistry.Contract.REGISTRYNAME(&_ContractsRegistry.CallOpts)
}

// REGISTRYNAME is a free data retrieval call binding the contract method 0xa217269a.
//
// Solidity: function REGISTRY_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) REGISTRYNAME() (string, error) {
	return _ContractsRegistry.Contract.REGISTRYNAME(&_ContractsRegistry.CallOpts)
}

// REWARDSDISTRIBUTIONPOOLNAME is a free data retrieval call binding the contract method 0xab7e5963.
//
// Solidity: function REWARDS_DISTRIBUTION_POOL_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) REWARDSDISTRIBUTIONPOOLNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "REWARDS_DISTRIBUTION_POOL_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// REWARDSDISTRIBUTIONPOOLNAME is a free data retrieval call binding the contract method 0xab7e5963.
//
// Solidity: function REWARDS_DISTRIBUTION_POOL_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) REWARDSDISTRIBUTIONPOOLNAME() (string, error) {
	return _ContractsRegistry.Contract.REWARDSDISTRIBUTIONPOOLNAME(&_ContractsRegistry.CallOpts)
}

// REWARDSDISTRIBUTIONPOOLNAME is a free data retrieval call binding the contract method 0xab7e5963.
//
// Solidity: function REWARDS_DISTRIBUTION_POOL_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) REWARDSDISTRIBUTIONPOOLNAME() (string, error) {
	return _ContractsRegistry.Contract.REWARDSDISTRIBUTIONPOOLNAME(&_ContractsRegistry.CallOpts)
}

// SIGNERGETTERNAME is a free data retrieval call binding the contract method 0x1c480045.
//
// Solidity: function SIGNER_GETTER_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) SIGNERGETTERNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "SIGNER_GETTER_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SIGNERGETTERNAME is a free data retrieval call binding the contract method 0x1c480045.
//
// Solidity: function SIGNER_GETTER_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) SIGNERGETTERNAME() (string, error) {
	return _ContractsRegistry.Contract.SIGNERGETTERNAME(&_ContractsRegistry.CallOpts)
}

// SIGNERGETTERNAME is a free data retrieval call binding the contract method 0x1c480045.
//
// Solidity: function SIGNER_GETTER_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) SIGNERGETTERNAME() (string, error) {
	return _ContractsRegistry.Contract.SIGNERGETTERNAME(&_ContractsRegistry.CallOpts)
}

// SLASHINGVOTINGNAME is a free data retrieval call binding the contract method 0xa198508a.
//
// Solidity: function SLASHING_VOTING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) SLASHINGVOTINGNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "SLASHING_VOTING_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SLASHINGVOTINGNAME is a free data retrieval call binding the contract method 0xa198508a.
//
// Solidity: function SLASHING_VOTING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) SLASHINGVOTINGNAME() (string, error) {
	return _ContractsRegistry.Contract.SLASHINGVOTINGNAME(&_ContractsRegistry.CallOpts)
}

// SLASHINGVOTINGNAME is a free data retrieval call binding the contract method 0xa198508a.
//
// Solidity: function SLASHING_VOTING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) SLASHINGVOTINGNAME() (string, error) {
	return _ContractsRegistry.Contract.SLASHINGVOTINGNAME(&_ContractsRegistry.CallOpts)
}

// STAKINGNAME is a free data retrieval call binding the contract method 0x1e0cba0d.
//
// Solidity: function STAKING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) STAKINGNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "STAKING_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// STAKINGNAME is a free data retrieval call binding the contract method 0x1e0cba0d.
//
// Solidity: function STAKING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) STAKINGNAME() (string, error) {
	return _ContractsRegistry.Contract.STAKINGNAME(&_ContractsRegistry.CallOpts)
}

// STAKINGNAME is a free data retrieval call binding the contract method 0x1e0cba0d.
//
// Solidity: function STAKING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) STAKINGNAME() (string, error) {
	return _ContractsRegistry.Contract.STAKINGNAME(&_ContractsRegistry.CallOpts)
}

// TOKENSVESTINGNAME is a free data retrieval call binding the contract method 0x568a45ad.
//
// Solidity: function TOKENS_VESTING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCaller) TOKENSVESTINGNAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "TOKENS_VESTING_NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TOKENSVESTINGNAME is a free data retrieval call binding the contract method 0x568a45ad.
//
// Solidity: function TOKENS_VESTING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistrySession) TOKENSVESTINGNAME() (string, error) {
	return _ContractsRegistry.Contract.TOKENSVESTINGNAME(&_ContractsRegistry.CallOpts)
}

// TOKENSVESTINGNAME is a free data retrieval call binding the contract method 0x568a45ad.
//
// Solidity: function TOKENS_VESTING_NAME() view returns(string)
func (_ContractsRegistry *ContractsRegistryCallerSession) TOKENSVESTINGNAME() (string, error) {
	return _ContractsRegistry.Contract.TOKENSVESTINGNAME(&_ContractsRegistry.CallOpts)
}

// GetBillingManagerContract is a free data retrieval call binding the contract method 0x48197f77.
//
// Solidity: function getBillingManagerContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetBillingManagerContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getBillingManagerContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBillingManagerContract is a free data retrieval call binding the contract method 0x48197f77.
//
// Solidity: function getBillingManagerContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetBillingManagerContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetBillingManagerContract(&_ContractsRegistry.CallOpts)
}

// GetBillingManagerContract is a free data retrieval call binding the contract method 0x48197f77.
//
// Solidity: function getBillingManagerContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetBillingManagerContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetBillingManagerContract(&_ContractsRegistry.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x35817773.
//
// Solidity: function getContract(string name_) view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetContract(opts *bind.CallOpts, name_ string) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getContract", name_)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x35817773.
//
// Solidity: function getContract(string name_) view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetContract(name_ string) (common.Address, error) {
	return _ContractsRegistry.Contract.GetContract(&_ContractsRegistry.CallOpts, name_)
}

// GetContract is a free data retrieval call binding the contract method 0x35817773.
//
// Solidity: function getContract(string name_) view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetContract(name_ string) (common.Address, error) {
	return _ContractsRegistry.Contract.GetContract(&_ContractsRegistry.CallOpts, name_)
}

// GetDKGContract is a free data retrieval call binding the contract method 0x0066f0a8.
//
// Solidity: function getDKGContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetDKGContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getDKGContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDKGContract is a free data retrieval call binding the contract method 0x0066f0a8.
//
// Solidity: function getDKGContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetDKGContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetDKGContract(&_ContractsRegistry.CallOpts)
}

// GetDKGContract is a free data retrieval call binding the contract method 0x0066f0a8.
//
// Solidity: function getDKGContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetDKGContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetDKGContract(&_ContractsRegistry.CallOpts)
}

// GetGatewayFactoryContract is a free data retrieval call binding the contract method 0xfabf588e.
//
// Solidity: function getGatewayFactoryContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetGatewayFactoryContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getGatewayFactoryContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGatewayFactoryContract is a free data retrieval call binding the contract method 0xfabf588e.
//
// Solidity: function getGatewayFactoryContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetGatewayFactoryContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetGatewayFactoryContract(&_ContractsRegistry.CallOpts)
}

// GetGatewayFactoryContract is a free data retrieval call binding the contract method 0xfabf588e.
//
// Solidity: function getGatewayFactoryContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetGatewayFactoryContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetGatewayFactoryContract(&_ContractsRegistry.CallOpts)
}

// GetImplementation is a free data retrieval call binding the contract method 0x6b683896.
//
// Solidity: function getImplementation(string name_) view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetImplementation(opts *bind.CallOpts, name_ string) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getImplementation", name_)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetImplementation is a free data retrieval call binding the contract method 0x6b683896.
//
// Solidity: function getImplementation(string name_) view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetImplementation(name_ string) (common.Address, error) {
	return _ContractsRegistry.Contract.GetImplementation(&_ContractsRegistry.CallOpts, name_)
}

// GetImplementation is a free data retrieval call binding the contract method 0x6b683896.
//
// Solidity: function getImplementation(string name_) view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetImplementation(name_ string) (common.Address, error) {
	return _ContractsRegistry.Contract.GetImplementation(&_ContractsRegistry.CallOpts, name_)
}

// GetNerifTokenContract is a free data retrieval call binding the contract method 0x94ee17cd.
//
// Solidity: function getNerifTokenContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetNerifTokenContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getNerifTokenContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetNerifTokenContract is a free data retrieval call binding the contract method 0x94ee17cd.
//
// Solidity: function getNerifTokenContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetNerifTokenContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetNerifTokenContract(&_ContractsRegistry.CallOpts)
}

// GetNerifTokenContract is a free data retrieval call binding the contract method 0x94ee17cd.
//
// Solidity: function getNerifTokenContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetNerifTokenContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetNerifTokenContract(&_ContractsRegistry.CallOpts)
}

// GetProxyUpgrader is a free data retrieval call binding the contract method 0xd10611fc.
//
// Solidity: function getProxyUpgrader() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetProxyUpgrader(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getProxyUpgrader")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProxyUpgrader is a free data retrieval call binding the contract method 0xd10611fc.
//
// Solidity: function getProxyUpgrader() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetProxyUpgrader() (common.Address, error) {
	return _ContractsRegistry.Contract.GetProxyUpgrader(&_ContractsRegistry.CallOpts)
}

// GetProxyUpgrader is a free data retrieval call binding the contract method 0xd10611fc.
//
// Solidity: function getProxyUpgrader() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetProxyUpgrader() (common.Address, error) {
	return _ContractsRegistry.Contract.GetProxyUpgrader(&_ContractsRegistry.CallOpts)
}

// GetRegistryContract is a free data retrieval call binding the contract method 0x36ca3d73.
//
// Solidity: function getRegistryContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetRegistryContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getRegistryContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistryContract is a free data retrieval call binding the contract method 0x36ca3d73.
//
// Solidity: function getRegistryContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetRegistryContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetRegistryContract(&_ContractsRegistry.CallOpts)
}

// GetRegistryContract is a free data retrieval call binding the contract method 0x36ca3d73.
//
// Solidity: function getRegistryContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetRegistryContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetRegistryContract(&_ContractsRegistry.CallOpts)
}

// GetRewardsDistributionPoolContract is a free data retrieval call binding the contract method 0x046aa0cb.
//
// Solidity: function getRewardsDistributionPoolContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetRewardsDistributionPoolContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getRewardsDistributionPoolContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRewardsDistributionPoolContract is a free data retrieval call binding the contract method 0x046aa0cb.
//
// Solidity: function getRewardsDistributionPoolContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetRewardsDistributionPoolContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetRewardsDistributionPoolContract(&_ContractsRegistry.CallOpts)
}

// GetRewardsDistributionPoolContract is a free data retrieval call binding the contract method 0x046aa0cb.
//
// Solidity: function getRewardsDistributionPoolContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetRewardsDistributionPoolContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetRewardsDistributionPoolContract(&_ContractsRegistry.CallOpts)
}

// GetSigner is a free data retrieval call binding the contract method 0x7ac3c02f.
//
// Solidity: function getSigner() view returns(address _signer)
func (_ContractsRegistry *ContractsRegistryCaller) GetSigner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getSigner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSigner is a free data retrieval call binding the contract method 0x7ac3c02f.
//
// Solidity: function getSigner() view returns(address _signer)
func (_ContractsRegistry *ContractsRegistrySession) GetSigner() (common.Address, error) {
	return _ContractsRegistry.Contract.GetSigner(&_ContractsRegistry.CallOpts)
}

// GetSigner is a free data retrieval call binding the contract method 0x7ac3c02f.
//
// Solidity: function getSigner() view returns(address _signer)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetSigner() (common.Address, error) {
	return _ContractsRegistry.Contract.GetSigner(&_ContractsRegistry.CallOpts)
}

// GetSignerGetterContract is a free data retrieval call binding the contract method 0x8bcd9cf8.
//
// Solidity: function getSignerGetterContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetSignerGetterContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getSignerGetterContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSignerGetterContract is a free data retrieval call binding the contract method 0x8bcd9cf8.
//
// Solidity: function getSignerGetterContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetSignerGetterContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetSignerGetterContract(&_ContractsRegistry.CallOpts)
}

// GetSignerGetterContract is a free data retrieval call binding the contract method 0x8bcd9cf8.
//
// Solidity: function getSignerGetterContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetSignerGetterContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetSignerGetterContract(&_ContractsRegistry.CallOpts)
}

// GetSlashingVotingContract is a free data retrieval call binding the contract method 0xfb9d9ac5.
//
// Solidity: function getSlashingVotingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetSlashingVotingContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getSlashingVotingContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSlashingVotingContract is a free data retrieval call binding the contract method 0xfb9d9ac5.
//
// Solidity: function getSlashingVotingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetSlashingVotingContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetSlashingVotingContract(&_ContractsRegistry.CallOpts)
}

// GetSlashingVotingContract is a free data retrieval call binding the contract method 0xfb9d9ac5.
//
// Solidity: function getSlashingVotingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetSlashingVotingContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetSlashingVotingContract(&_ContractsRegistry.CallOpts)
}

// GetStakingContract is a free data retrieval call binding the contract method 0x8e68dce4.
//
// Solidity: function getStakingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetStakingContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getStakingContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakingContract is a free data retrieval call binding the contract method 0x8e68dce4.
//
// Solidity: function getStakingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetStakingContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetStakingContract(&_ContractsRegistry.CallOpts)
}

// GetStakingContract is a free data retrieval call binding the contract method 0x8e68dce4.
//
// Solidity: function getStakingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetStakingContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetStakingContract(&_ContractsRegistry.CallOpts)
}

// GetTokensVestingContract is a free data retrieval call binding the contract method 0xd2bea9c6.
//
// Solidity: function getTokensVestingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) GetTokensVestingContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "getTokensVestingContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTokensVestingContract is a free data retrieval call binding the contract method 0xd2bea9c6.
//
// Solidity: function getTokensVestingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) GetTokensVestingContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetTokensVestingContract(&_ContractsRegistry.CallOpts)
}

// GetTokensVestingContract is a free data retrieval call binding the contract method 0xd2bea9c6.
//
// Solidity: function getTokensVestingContract() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) GetTokensVestingContract() (common.Address, error) {
	return _ContractsRegistry.Contract.GetTokensVestingContract(&_ContractsRegistry.CallOpts)
}

// HasContract is a free data retrieval call binding the contract method 0x8c223601.
//
// Solidity: function hasContract(string name_) view returns(bool)
func (_ContractsRegistry *ContractsRegistryCaller) HasContract(opts *bind.CallOpts, name_ string) (bool, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "hasContract", name_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasContract is a free data retrieval call binding the contract method 0x8c223601.
//
// Solidity: function hasContract(string name_) view returns(bool)
func (_ContractsRegistry *ContractsRegistrySession) HasContract(name_ string) (bool, error) {
	return _ContractsRegistry.Contract.HasContract(&_ContractsRegistry.CallOpts, name_)
}

// HasContract is a free data retrieval call binding the contract method 0x8c223601.
//
// Solidity: function hasContract(string name_) view returns(bool)
func (_ContractsRegistry *ContractsRegistryCallerSession) HasContract(name_ string) (bool, error) {
	return _ContractsRegistry.Contract.HasContract(&_ContractsRegistry.CallOpts, name_)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_ContractsRegistry *ContractsRegistryCaller) IsMainChain(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "isMainChain")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_ContractsRegistry *ContractsRegistrySession) IsMainChain() (bool, error) {
	return _ContractsRegistry.Contract.IsMainChain(&_ContractsRegistry.CallOpts)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_ContractsRegistry *ContractsRegistryCallerSession) IsMainChain() (bool, error) {
	return _ContractsRegistry.Contract.IsMainChain(&_ContractsRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractsRegistry *ContractsRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractsRegistry *ContractsRegistrySession) Owner() (common.Address, error) {
	return _ContractsRegistry.Contract.Owner(&_ContractsRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractsRegistry *ContractsRegistryCallerSession) Owner() (common.Address, error) {
	return _ContractsRegistry.Contract.Owner(&_ContractsRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ContractsRegistry *ContractsRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractsRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ContractsRegistry *ContractsRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _ContractsRegistry.Contract.ProxiableUUID(&_ContractsRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ContractsRegistry *ContractsRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ContractsRegistry.Contract.ProxiableUUID(&_ContractsRegistry.CallOpts)
}

// OwnableContractsRegistryInit is a paid mutator transaction binding the contract method 0x1bae7a65.
//
// Solidity: function __OwnableContractsRegistry_init() returns()
func (_ContractsRegistry *ContractsRegistryTransactor) OwnableContractsRegistryInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "__OwnableContractsRegistry_init")
}

// OwnableContractsRegistryInit is a paid mutator transaction binding the contract method 0x1bae7a65.
//
// Solidity: function __OwnableContractsRegistry_init() returns()
func (_ContractsRegistry *ContractsRegistrySession) OwnableContractsRegistryInit() (*types.Transaction, error) {
	return _ContractsRegistry.Contract.OwnableContractsRegistryInit(&_ContractsRegistry.TransactOpts)
}

// OwnableContractsRegistryInit is a paid mutator transaction binding the contract method 0x1bae7a65.
//
// Solidity: function __OwnableContractsRegistry_init() returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) OwnableContractsRegistryInit() (*types.Transaction, error) {
	return _ContractsRegistry.Contract.OwnableContractsRegistryInit(&_ContractsRegistry.TransactOpts)
}

// AddContract is a paid mutator transaction binding the contract method 0xbf5b6016.
//
// Solidity: function addContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) AddContract(opts *bind.TransactOpts, name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "addContract", name_, contractAddress_)
}

// AddContract is a paid mutator transaction binding the contract method 0xbf5b6016.
//
// Solidity: function addContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistrySession) AddContract(name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.AddContract(&_ContractsRegistry.TransactOpts, name_, contractAddress_)
}

// AddContract is a paid mutator transaction binding the contract method 0xbf5b6016.
//
// Solidity: function addContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) AddContract(name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.AddContract(&_ContractsRegistry.TransactOpts, name_, contractAddress_)
}

// AddProxyContract is a paid mutator transaction binding the contract method 0xe0e084f8.
//
// Solidity: function addProxyContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) AddProxyContract(opts *bind.TransactOpts, name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "addProxyContract", name_, contractAddress_)
}

// AddProxyContract is a paid mutator transaction binding the contract method 0xe0e084f8.
//
// Solidity: function addProxyContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistrySession) AddProxyContract(name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.AddProxyContract(&_ContractsRegistry.TransactOpts, name_, contractAddress_)
}

// AddProxyContract is a paid mutator transaction binding the contract method 0xe0e084f8.
//
// Solidity: function addProxyContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) AddProxyContract(name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.AddProxyContract(&_ContractsRegistry.TransactOpts, name_, contractAddress_)
}

// AddProxyContractAndCall is a paid mutator transaction binding the contract method 0x423c072b.
//
// Solidity: function addProxyContractAndCall(string name_, address contractAddress_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) AddProxyContractAndCall(opts *bind.TransactOpts, name_ string, contractAddress_ common.Address, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "addProxyContractAndCall", name_, contractAddress_, data_)
}

// AddProxyContractAndCall is a paid mutator transaction binding the contract method 0x423c072b.
//
// Solidity: function addProxyContractAndCall(string name_, address contractAddress_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistrySession) AddProxyContractAndCall(name_ string, contractAddress_ common.Address, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.AddProxyContractAndCall(&_ContractsRegistry.TransactOpts, name_, contractAddress_, data_)
}

// AddProxyContractAndCall is a paid mutator transaction binding the contract method 0x423c072b.
//
// Solidity: function addProxyContractAndCall(string name_, address contractAddress_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) AddProxyContractAndCall(name_ string, contractAddress_ common.Address, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.AddProxyContractAndCall(&_ContractsRegistry.TransactOpts, name_, contractAddress_, data_)
}

// InjectDependencies is a paid mutator transaction binding the contract method 0x1adad8cf.
//
// Solidity: function injectDependencies(string name_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) InjectDependencies(opts *bind.TransactOpts, name_ string) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "injectDependencies", name_)
}

// InjectDependencies is a paid mutator transaction binding the contract method 0x1adad8cf.
//
// Solidity: function injectDependencies(string name_) returns()
func (_ContractsRegistry *ContractsRegistrySession) InjectDependencies(name_ string) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.InjectDependencies(&_ContractsRegistry.TransactOpts, name_)
}

// InjectDependencies is a paid mutator transaction binding the contract method 0x1adad8cf.
//
// Solidity: function injectDependencies(string name_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) InjectDependencies(name_ string) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.InjectDependencies(&_ContractsRegistry.TransactOpts, name_)
}

// InjectDependenciesWithData is a paid mutator transaction binding the contract method 0xbe96dc3e.
//
// Solidity: function injectDependenciesWithData(string name_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) InjectDependenciesWithData(opts *bind.TransactOpts, name_ string, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "injectDependenciesWithData", name_, data_)
}

// InjectDependenciesWithData is a paid mutator transaction binding the contract method 0xbe96dc3e.
//
// Solidity: function injectDependenciesWithData(string name_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistrySession) InjectDependenciesWithData(name_ string, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.InjectDependenciesWithData(&_ContractsRegistry.TransactOpts, name_, data_)
}

// InjectDependenciesWithData is a paid mutator transaction binding the contract method 0xbe96dc3e.
//
// Solidity: function injectDependenciesWithData(string name_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) InjectDependenciesWithData(name_ string, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.InjectDependenciesWithData(&_ContractsRegistry.TransactOpts, name_, data_)
}

// JustAddProxyContract is a paid mutator transaction binding the contract method 0x51dad82c.
//
// Solidity: function justAddProxyContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) JustAddProxyContract(opts *bind.TransactOpts, name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "justAddProxyContract", name_, contractAddress_)
}

// JustAddProxyContract is a paid mutator transaction binding the contract method 0x51dad82c.
//
// Solidity: function justAddProxyContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistrySession) JustAddProxyContract(name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.JustAddProxyContract(&_ContractsRegistry.TransactOpts, name_, contractAddress_)
}

// JustAddProxyContract is a paid mutator transaction binding the contract method 0x51dad82c.
//
// Solidity: function justAddProxyContract(string name_, address contractAddress_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) JustAddProxyContract(name_ string, contractAddress_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.JustAddProxyContract(&_ContractsRegistry.TransactOpts, name_, contractAddress_)
}

// RemoveContract is a paid mutator transaction binding the contract method 0x97623b58.
//
// Solidity: function removeContract(string name_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) RemoveContract(opts *bind.TransactOpts, name_ string) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "removeContract", name_)
}

// RemoveContract is a paid mutator transaction binding the contract method 0x97623b58.
//
// Solidity: function removeContract(string name_) returns()
func (_ContractsRegistry *ContractsRegistrySession) RemoveContract(name_ string) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.RemoveContract(&_ContractsRegistry.TransactOpts, name_)
}

// RemoveContract is a paid mutator transaction binding the contract method 0x97623b58.
//
// Solidity: function removeContract(string name_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) RemoveContract(name_ string) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.RemoveContract(&_ContractsRegistry.TransactOpts, name_)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractsRegistry *ContractsRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractsRegistry *ContractsRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractsRegistry.Contract.RenounceOwnership(&_ContractsRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractsRegistry.Contract.RenounceOwnership(&_ContractsRegistry.TransactOpts)
}

// SetIsMainChain is a paid mutator transaction binding the contract method 0x1a4699e8.
//
// Solidity: function setIsMainChain(bool _newValue) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) SetIsMainChain(opts *bind.TransactOpts, _newValue bool) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "setIsMainChain", _newValue)
}

// SetIsMainChain is a paid mutator transaction binding the contract method 0x1a4699e8.
//
// Solidity: function setIsMainChain(bool _newValue) returns()
func (_ContractsRegistry *ContractsRegistrySession) SetIsMainChain(_newValue bool) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.SetIsMainChain(&_ContractsRegistry.TransactOpts, _newValue)
}

// SetIsMainChain is a paid mutator transaction binding the contract method 0x1a4699e8.
//
// Solidity: function setIsMainChain(bool _newValue) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) SetIsMainChain(_newValue bool) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.SetIsMainChain(&_ContractsRegistry.TransactOpts, _newValue)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractsRegistry *ContractsRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.TransferOwnership(&_ContractsRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.TransferOwnership(&_ContractsRegistry.TransactOpts, newOwner)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0x1271bd53.
//
// Solidity: function upgradeContract(string name_, address newImplementation_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) UpgradeContract(opts *bind.TransactOpts, name_ string, newImplementation_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "upgradeContract", name_, newImplementation_)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0x1271bd53.
//
// Solidity: function upgradeContract(string name_, address newImplementation_) returns()
func (_ContractsRegistry *ContractsRegistrySession) UpgradeContract(name_ string, newImplementation_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeContract(&_ContractsRegistry.TransactOpts, name_, newImplementation_)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0x1271bd53.
//
// Solidity: function upgradeContract(string name_, address newImplementation_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) UpgradeContract(name_ string, newImplementation_ common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeContract(&_ContractsRegistry.TransactOpts, name_, newImplementation_)
}

// UpgradeContractAndCall is a paid mutator transaction binding the contract method 0x6bbe8694.
//
// Solidity: function upgradeContractAndCall(string name_, address newImplementation_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) UpgradeContractAndCall(opts *bind.TransactOpts, name_ string, newImplementation_ common.Address, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "upgradeContractAndCall", name_, newImplementation_, data_)
}

// UpgradeContractAndCall is a paid mutator transaction binding the contract method 0x6bbe8694.
//
// Solidity: function upgradeContractAndCall(string name_, address newImplementation_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistrySession) UpgradeContractAndCall(name_ string, newImplementation_ common.Address, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeContractAndCall(&_ContractsRegistry.TransactOpts, name_, newImplementation_, data_)
}

// UpgradeContractAndCall is a paid mutator transaction binding the contract method 0x6bbe8694.
//
// Solidity: function upgradeContractAndCall(string name_, address newImplementation_, bytes data_) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) UpgradeContractAndCall(name_ string, newImplementation_ common.Address, data_ []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeContractAndCall(&_ContractsRegistry.TransactOpts, name_, newImplementation_, data_)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ContractsRegistry *ContractsRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ContractsRegistry *ContractsRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeTo(&_ContractsRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeTo(&_ContractsRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ContractsRegistry *ContractsRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ContractsRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ContractsRegistry *ContractsRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeToAndCall(&_ContractsRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ContractsRegistry *ContractsRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ContractsRegistry.Contract.UpgradeToAndCall(&_ContractsRegistry.TransactOpts, newImplementation, data)
}

// ContractsRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ContractsRegistry contract.
type ContractsRegistryAdminChangedIterator struct {
	Event *ContractsRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryAdminChanged represents a AdminChanged event raised by the ContractsRegistry contract.
type ContractsRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ContractsRegistryAdminChangedIterator, error) {

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryAdminChangedIterator{contract: _ContractsRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ContractsRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryAdminChanged)
				if err := _ContractsRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseAdminChanged(log types.Log) (*ContractsRegistryAdminChanged, error) {
	event := new(ContractsRegistryAdminChanged)
	if err := _ContractsRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ContractsRegistry contract.
type ContractsRegistryBeaconUpgradedIterator struct {
	Event *ContractsRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the ContractsRegistry contract.
type ContractsRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ContractsRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryBeaconUpgradedIterator{contract: _ContractsRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ContractsRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryBeaconUpgraded)
				if err := _ContractsRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*ContractsRegistryBeaconUpgraded, error) {
	event := new(ContractsRegistryBeaconUpgraded)
	if err := _ContractsRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryContractAddedIterator is returned from FilterContractAdded and is used to iterate over the raw logs and unpacked data for ContractAdded events raised by the ContractsRegistry contract.
type ContractsRegistryContractAddedIterator struct {
	Event *ContractsRegistryContractAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryContractAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryContractAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryContractAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryContractAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryContractAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryContractAdded represents a ContractAdded event raised by the ContractsRegistry contract.
type ContractsRegistryContractAdded struct {
	Name            string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContractAdded is a free log retrieval operation binding the contract event 0x8b4ef7d4e5bc8f098e6f637ac0acf4aee47b3f027efea6307264b06b4bc9d298.
//
// Solidity: event ContractAdded(string name, address contractAddress)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterContractAdded(opts *bind.FilterOpts) (*ContractsRegistryContractAddedIterator, error) {

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "ContractAdded")
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryContractAddedIterator{contract: _ContractsRegistry.contract, event: "ContractAdded", logs: logs, sub: sub}, nil
}

// WatchContractAdded is a free log subscription operation binding the contract event 0x8b4ef7d4e5bc8f098e6f637ac0acf4aee47b3f027efea6307264b06b4bc9d298.
//
// Solidity: event ContractAdded(string name, address contractAddress)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchContractAdded(opts *bind.WatchOpts, sink chan<- *ContractsRegistryContractAdded) (event.Subscription, error) {

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "ContractAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryContractAdded)
				if err := _ContractsRegistry.contract.UnpackLog(event, "ContractAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractAdded is a log parse operation binding the contract event 0x8b4ef7d4e5bc8f098e6f637ac0acf4aee47b3f027efea6307264b06b4bc9d298.
//
// Solidity: event ContractAdded(string name, address contractAddress)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseContractAdded(log types.Log) (*ContractsRegistryContractAdded, error) {
	event := new(ContractsRegistryContractAdded)
	if err := _ContractsRegistry.contract.UnpackLog(event, "ContractAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryContractRemovedIterator is returned from FilterContractRemoved and is used to iterate over the raw logs and unpacked data for ContractRemoved events raised by the ContractsRegistry contract.
type ContractsRegistryContractRemovedIterator struct {
	Event *ContractsRegistryContractRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryContractRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryContractRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryContractRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryContractRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryContractRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryContractRemoved represents a ContractRemoved event raised by the ContractsRegistry contract.
type ContractsRegistryContractRemoved struct {
	Name string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContractRemoved is a free log retrieval operation binding the contract event 0x0c4eafbc12ea2584eb34031bf52952af5909a5880ef4058cb05c627ae39ffda0.
//
// Solidity: event ContractRemoved(string name)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterContractRemoved(opts *bind.FilterOpts) (*ContractsRegistryContractRemovedIterator, error) {

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "ContractRemoved")
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryContractRemovedIterator{contract: _ContractsRegistry.contract, event: "ContractRemoved", logs: logs, sub: sub}, nil
}

// WatchContractRemoved is a free log subscription operation binding the contract event 0x0c4eafbc12ea2584eb34031bf52952af5909a5880ef4058cb05c627ae39ffda0.
//
// Solidity: event ContractRemoved(string name)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchContractRemoved(opts *bind.WatchOpts, sink chan<- *ContractsRegistryContractRemoved) (event.Subscription, error) {

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "ContractRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryContractRemoved)
				if err := _ContractsRegistry.contract.UnpackLog(event, "ContractRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractRemoved is a log parse operation binding the contract event 0x0c4eafbc12ea2584eb34031bf52952af5909a5880ef4058cb05c627ae39ffda0.
//
// Solidity: event ContractRemoved(string name)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseContractRemoved(log types.Log) (*ContractsRegistryContractRemoved, error) {
	event := new(ContractsRegistryContractRemoved)
	if err := _ContractsRegistry.contract.UnpackLog(event, "ContractRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractsRegistry contract.
type ContractsRegistryInitializedIterator struct {
	Event *ContractsRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryInitialized represents a Initialized event raised by the ContractsRegistry contract.
type ContractsRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractsRegistryInitializedIterator, error) {

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryInitializedIterator{contract: _ContractsRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractsRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryInitialized)
				if err := _ContractsRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseInitialized(log types.Log) (*ContractsRegistryInitialized, error) {
	event := new(ContractsRegistryInitialized)
	if err := _ContractsRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractsRegistry contract.
type ContractsRegistryOwnershipTransferredIterator struct {
	Event *ContractsRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the ContractsRegistry contract.
type ContractsRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractsRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryOwnershipTransferredIterator{contract: _ContractsRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractsRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryOwnershipTransferred)
				if err := _ContractsRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*ContractsRegistryOwnershipTransferred, error) {
	event := new(ContractsRegistryOwnershipTransferred)
	if err := _ContractsRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryProxyContractAddedIterator is returned from FilterProxyContractAdded and is used to iterate over the raw logs and unpacked data for ProxyContractAdded events raised by the ContractsRegistry contract.
type ContractsRegistryProxyContractAddedIterator struct {
	Event *ContractsRegistryProxyContractAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryProxyContractAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryProxyContractAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryProxyContractAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryProxyContractAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryProxyContractAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryProxyContractAdded represents a ProxyContractAdded event raised by the ContractsRegistry contract.
type ContractsRegistryProxyContractAdded struct {
	Name            string
	ContractAddress common.Address
	Implementation  common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProxyContractAdded is a free log retrieval operation binding the contract event 0x10e75df11debcdd8425769babc76babb1b082c13be22ba626bfc8e6de393c4c5.
//
// Solidity: event ProxyContractAdded(string name, address contractAddress, address implementation)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterProxyContractAdded(opts *bind.FilterOpts) (*ContractsRegistryProxyContractAddedIterator, error) {

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "ProxyContractAdded")
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryProxyContractAddedIterator{contract: _ContractsRegistry.contract, event: "ProxyContractAdded", logs: logs, sub: sub}, nil
}

// WatchProxyContractAdded is a free log subscription operation binding the contract event 0x10e75df11debcdd8425769babc76babb1b082c13be22ba626bfc8e6de393c4c5.
//
// Solidity: event ProxyContractAdded(string name, address contractAddress, address implementation)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchProxyContractAdded(opts *bind.WatchOpts, sink chan<- *ContractsRegistryProxyContractAdded) (event.Subscription, error) {

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "ProxyContractAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryProxyContractAdded)
				if err := _ContractsRegistry.contract.UnpackLog(event, "ProxyContractAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProxyContractAdded is a log parse operation binding the contract event 0x10e75df11debcdd8425769babc76babb1b082c13be22ba626bfc8e6de393c4c5.
//
// Solidity: event ProxyContractAdded(string name, address contractAddress, address implementation)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseProxyContractAdded(log types.Log) (*ContractsRegistryProxyContractAdded, error) {
	event := new(ContractsRegistryProxyContractAdded)
	if err := _ContractsRegistry.contract.UnpackLog(event, "ProxyContractAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryProxyContractUpgradedIterator is returned from FilterProxyContractUpgraded and is used to iterate over the raw logs and unpacked data for ProxyContractUpgraded events raised by the ContractsRegistry contract.
type ContractsRegistryProxyContractUpgradedIterator struct {
	Event *ContractsRegistryProxyContractUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryProxyContractUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryProxyContractUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryProxyContractUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryProxyContractUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryProxyContractUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryProxyContractUpgraded represents a ProxyContractUpgraded event raised by the ContractsRegistry contract.
type ContractsRegistryProxyContractUpgraded struct {
	Name              string
	NewImplementation common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterProxyContractUpgraded is a free log retrieval operation binding the contract event 0x0ade5313c9e16e7e06de9ab0edde476cc9a6fd51b973b8685c6c5026028a39d2.
//
// Solidity: event ProxyContractUpgraded(string name, address newImplementation)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterProxyContractUpgraded(opts *bind.FilterOpts) (*ContractsRegistryProxyContractUpgradedIterator, error) {

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "ProxyContractUpgraded")
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryProxyContractUpgradedIterator{contract: _ContractsRegistry.contract, event: "ProxyContractUpgraded", logs: logs, sub: sub}, nil
}

// WatchProxyContractUpgraded is a free log subscription operation binding the contract event 0x0ade5313c9e16e7e06de9ab0edde476cc9a6fd51b973b8685c6c5026028a39d2.
//
// Solidity: event ProxyContractUpgraded(string name, address newImplementation)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchProxyContractUpgraded(opts *bind.WatchOpts, sink chan<- *ContractsRegistryProxyContractUpgraded) (event.Subscription, error) {

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "ProxyContractUpgraded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryProxyContractUpgraded)
				if err := _ContractsRegistry.contract.UnpackLog(event, "ProxyContractUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProxyContractUpgraded is a log parse operation binding the contract event 0x0ade5313c9e16e7e06de9ab0edde476cc9a6fd51b973b8685c6c5026028a39d2.
//
// Solidity: event ProxyContractUpgraded(string name, address newImplementation)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseProxyContractUpgraded(log types.Log) (*ContractsRegistryProxyContractUpgraded, error) {
	event := new(ContractsRegistryProxyContractUpgraded)
	if err := _ContractsRegistry.contract.UnpackLog(event, "ProxyContractUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ContractsRegistry contract.
type ContractsRegistryUpgradedIterator struct {
	Event *ContractsRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRegistryUpgraded represents a Upgraded event raised by the ContractsRegistry contract.
type ContractsRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ContractsRegistry *ContractsRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ContractsRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ContractsRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ContractsRegistryUpgradedIterator{contract: _ContractsRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ContractsRegistry *ContractsRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ContractsRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ContractsRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRegistryUpgraded)
				if err := _ContractsRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ContractsRegistry *ContractsRegistryFilterer) ParseUpgraded(log types.Log) (*ContractsRegistryUpgraded, error) {
	event := new(ContractsRegistryUpgraded)
	if err := _ContractsRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
