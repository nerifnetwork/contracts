// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package billingmanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IBillingManagerDepositAssetData is an auto generated low-level Go binding around an user-defined struct.
type IBillingManagerDepositAssetData struct {
	TokenAddr                 common.Address
	WorkflowExecutionDiscount *big.Int
	TotalAssetAmount          *big.Int
	IsPermitable              bool
	IsEnabled                 bool
}

// IBillingManagerDepositAssetInfo is an auto generated low-level Go binding around an user-defined struct.
type IBillingManagerDepositAssetInfo struct {
	DepositAssetKey  string
	DepositAssetData IBillingManagerDepositAssetData
}

// IBillingManagerSigData is an auto generated low-level Go binding around an user-defined struct.
type IBillingManagerSigData struct {
	SigExpirationTime *big.Int
	V                 uint8
	R                 [32]byte
	S                 [32]byte
}

// IBillingManagerWithdrawData is an auto generated low-level Go binding around an user-defined struct.
type IBillingManagerWithdrawData struct {
	DepositAssetKeys []string
	WithdrawAmounts  []*big.Int
	Nonce            *big.Int
	SigData          IBillingManagerSigData
}

// BillingManagerMetaData contains all meta data concerning the BillingManager contract.
var BillingManagerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokensSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"AssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workflowExecutionDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermitable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structIBillingManager.DepositAssetData\",\"name\":\"depositAssetData\",\"type\":\"tuple\"}],\"name\":\"DepositAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newEnabledStatus\",\"type\":\"bool\"}],\"name\":\"DepositAssetEnabledStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"depositAssetKeys\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"NetworkWithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"depositAssetKeys\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"SlashedTokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWorkflowExecutionDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevWorkflowExecutionDiscount\",\"type\":\"uint256\"}],\"name\":\"WorkflowExecutionDiscountUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workflowExecutionDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermitable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"structIBillingManager.DepositAssetData\",\"name\":\"depositAssetData\",\"type\":\"tuple\"}],\"internalType\":\"structIBillingManager.DepositAssetInfo[]\",\"name\":\"_depositAssetInfoArr\",\"type\":\"tuple[]\"}],\"name\":\"addDepositAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"addSlashedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipientAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipientAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sigExpirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structIBillingManager.SigData\",\"name\":\"_sigData\",\"type\":\"tuple\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"}],\"name\":\"getDepositAssetTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_depositAssetKeysArr\",\"type\":\"string[]\"}],\"name\":\"getDepositAssetsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workflowExecutionDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermitable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"structIBillingManager.DepositAssetData\",\"name\":\"depositAssetData\",\"type\":\"tuple\"}],\"internalType\":\"structIBillingManager.DepositAssetInfo[]\",\"name\":\"_depositAssetsInfoArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInjector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"injector_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedDepositAssetKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"}],\"name\":\"getTotalDepositAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workflowExecutionDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermitable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"structIBillingManager.DepositAssetData\",\"name\":\"depositAssetData\",\"type\":\"tuple\"}],\"internalType\":\"structIBillingManager.DepositAssetInfo\",\"name\":\"_nativeDepositAssetInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workflowExecutionDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermitable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"structIBillingManager.DepositAssetData\",\"name\":\"depositAssetData\",\"type\":\"tuple\"}],\"internalType\":\"structIBillingManager.DepositAssetInfo\",\"name\":\"_nerifTokenDepositAssetInfo\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"}],\"name\":\"isDepositAssetEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"}],\"name\":\"isDepositAssetPermitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"}],\"name\":\"isDepositAssetSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"}],\"name\":\"isNativeDepositAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"isUserNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeDepositAssetKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nerifTokenDepositAssetKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractsRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"injector_\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_newEnabledStatus\",\"type\":\"bool\"}],\"name\":\"updateDepositAssetEnabledStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_newWorkflowExecutionDiscount\",\"type\":\"uint256\"}],\"name\":\"updateWorkflowExecutionDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"depositAssetKeys\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sigExpirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structIBillingManager.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"}],\"internalType\":\"structIBillingManager.WithdrawData\",\"name\":\"_withdrawData\",\"type\":\"tuple\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"depositAssetKeys\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sigExpirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structIBillingManager.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"}],\"internalType\":\"structIBillingManager.WithdrawData\",\"name\":\"_withdrawData\",\"type\":\"tuple\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// BillingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use BillingManagerMetaData.ABI instead.
var BillingManagerABI = BillingManagerMetaData.ABI

// BillingManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BillingManagerMetaData.Bin instead.
var BillingManagerBin = BillingManagerMetaData.Bin

// DeployBillingManager deploys a new Ethereum contract, binding an instance of BillingManager to it.
func DeployBillingManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BillingManager, error) {
	parsed, err := BillingManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BillingManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BillingManager{BillingManagerCaller: BillingManagerCaller{contract: contract}, BillingManagerTransactor: BillingManagerTransactor{contract: contract}, BillingManagerFilterer: BillingManagerFilterer{contract: contract}}, nil
}

// BillingManager is an auto generated Go binding around an Ethereum contract.
type BillingManager struct {
	BillingManagerCaller     // Read-only binding to the contract
	BillingManagerTransactor // Write-only binding to the contract
	BillingManagerFilterer   // Log filterer for contract events
}

// BillingManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BillingManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BillingManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BillingManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BillingManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BillingManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BillingManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BillingManagerSession struct {
	Contract     *BillingManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BillingManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BillingManagerCallerSession struct {
	Contract *BillingManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BillingManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BillingManagerTransactorSession struct {
	Contract     *BillingManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BillingManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BillingManagerRaw struct {
	Contract *BillingManager // Generic contract binding to access the raw methods on
}

// BillingManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BillingManagerCallerRaw struct {
	Contract *BillingManagerCaller // Generic read-only contract binding to access the raw methods on
}

// BillingManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BillingManagerTransactorRaw struct {
	Contract *BillingManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBillingManager creates a new instance of BillingManager, bound to a specific deployed contract.
func NewBillingManager(address common.Address, backend bind.ContractBackend) (*BillingManager, error) {
	contract, err := bindBillingManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BillingManager{BillingManagerCaller: BillingManagerCaller{contract: contract}, BillingManagerTransactor: BillingManagerTransactor{contract: contract}, BillingManagerFilterer: BillingManagerFilterer{contract: contract}}, nil
}

// NewBillingManagerCaller creates a new read-only instance of BillingManager, bound to a specific deployed contract.
func NewBillingManagerCaller(address common.Address, caller bind.ContractCaller) (*BillingManagerCaller, error) {
	contract, err := bindBillingManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BillingManagerCaller{contract: contract}, nil
}

// NewBillingManagerTransactor creates a new write-only instance of BillingManager, bound to a specific deployed contract.
func NewBillingManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*BillingManagerTransactor, error) {
	contract, err := bindBillingManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BillingManagerTransactor{contract: contract}, nil
}

// NewBillingManagerFilterer creates a new log filterer instance of BillingManager, bound to a specific deployed contract.
func NewBillingManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*BillingManagerFilterer, error) {
	contract, err := bindBillingManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BillingManagerFilterer{contract: contract}, nil
}

// bindBillingManager binds a generic wrapper to an already deployed contract.
func bindBillingManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BillingManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BillingManager *BillingManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BillingManager.Contract.BillingManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BillingManager *BillingManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BillingManager.Contract.BillingManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BillingManager *BillingManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BillingManager.Contract.BillingManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BillingManager *BillingManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BillingManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BillingManager *BillingManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BillingManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BillingManager *BillingManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BillingManager.Contract.contract.Transact(opts, method, params...)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BillingManager *BillingManagerCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BillingManager *BillingManagerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BillingManager.Contract.Eip712Domain(&_BillingManager.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BillingManager *BillingManagerCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BillingManager.Contract.Eip712Domain(&_BillingManager.CallOpts)
}

// GetDepositAssetTokenAddr is a free data retrieval call binding the contract method 0xf2f3a61f.
//
// Solidity: function getDepositAssetTokenAddr(string _depositAssetKey) view returns(address)
func (_BillingManager *BillingManagerCaller) GetDepositAssetTokenAddr(opts *bind.CallOpts, _depositAssetKey string) (common.Address, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "getDepositAssetTokenAddr", _depositAssetKey)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDepositAssetTokenAddr is a free data retrieval call binding the contract method 0xf2f3a61f.
//
// Solidity: function getDepositAssetTokenAddr(string _depositAssetKey) view returns(address)
func (_BillingManager *BillingManagerSession) GetDepositAssetTokenAddr(_depositAssetKey string) (common.Address, error) {
	return _BillingManager.Contract.GetDepositAssetTokenAddr(&_BillingManager.CallOpts, _depositAssetKey)
}

// GetDepositAssetTokenAddr is a free data retrieval call binding the contract method 0xf2f3a61f.
//
// Solidity: function getDepositAssetTokenAddr(string _depositAssetKey) view returns(address)
func (_BillingManager *BillingManagerCallerSession) GetDepositAssetTokenAddr(_depositAssetKey string) (common.Address, error) {
	return _BillingManager.Contract.GetDepositAssetTokenAddr(&_BillingManager.CallOpts, _depositAssetKey)
}

// GetDepositAssetsInfo is a free data retrieval call binding the contract method 0x37913512.
//
// Solidity: function getDepositAssetsInfo(string[] _depositAssetKeysArr) view returns((string,(address,uint256,uint256,bool,bool))[] _depositAssetsInfoArr)
func (_BillingManager *BillingManagerCaller) GetDepositAssetsInfo(opts *bind.CallOpts, _depositAssetKeysArr []string) ([]IBillingManagerDepositAssetInfo, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "getDepositAssetsInfo", _depositAssetKeysArr)

	if err != nil {
		return *new([]IBillingManagerDepositAssetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBillingManagerDepositAssetInfo)).(*[]IBillingManagerDepositAssetInfo)

	return out0, err

}

// GetDepositAssetsInfo is a free data retrieval call binding the contract method 0x37913512.
//
// Solidity: function getDepositAssetsInfo(string[] _depositAssetKeysArr) view returns((string,(address,uint256,uint256,bool,bool))[] _depositAssetsInfoArr)
func (_BillingManager *BillingManagerSession) GetDepositAssetsInfo(_depositAssetKeysArr []string) ([]IBillingManagerDepositAssetInfo, error) {
	return _BillingManager.Contract.GetDepositAssetsInfo(&_BillingManager.CallOpts, _depositAssetKeysArr)
}

// GetDepositAssetsInfo is a free data retrieval call binding the contract method 0x37913512.
//
// Solidity: function getDepositAssetsInfo(string[] _depositAssetKeysArr) view returns((string,(address,uint256,uint256,bool,bool))[] _depositAssetsInfoArr)
func (_BillingManager *BillingManagerCallerSession) GetDepositAssetsInfo(_depositAssetKeysArr []string) ([]IBillingManagerDepositAssetInfo, error) {
	return _BillingManager.Contract.GetDepositAssetsInfo(&_BillingManager.CallOpts, _depositAssetKeysArr)
}

// GetInjector is a free data retrieval call binding the contract method 0x3e3b5b19.
//
// Solidity: function getInjector() view returns(address injector_)
func (_BillingManager *BillingManagerCaller) GetInjector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "getInjector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInjector is a free data retrieval call binding the contract method 0x3e3b5b19.
//
// Solidity: function getInjector() view returns(address injector_)
func (_BillingManager *BillingManagerSession) GetInjector() (common.Address, error) {
	return _BillingManager.Contract.GetInjector(&_BillingManager.CallOpts)
}

// GetInjector is a free data retrieval call binding the contract method 0x3e3b5b19.
//
// Solidity: function getInjector() view returns(address injector_)
func (_BillingManager *BillingManagerCallerSession) GetInjector() (common.Address, error) {
	return _BillingManager.Contract.GetInjector(&_BillingManager.CallOpts)
}

// GetSupportedDepositAssetKeys is a free data retrieval call binding the contract method 0xa266f963.
//
// Solidity: function getSupportedDepositAssetKeys() view returns(string[])
func (_BillingManager *BillingManagerCaller) GetSupportedDepositAssetKeys(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "getSupportedDepositAssetKeys")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetSupportedDepositAssetKeys is a free data retrieval call binding the contract method 0xa266f963.
//
// Solidity: function getSupportedDepositAssetKeys() view returns(string[])
func (_BillingManager *BillingManagerSession) GetSupportedDepositAssetKeys() ([]string, error) {
	return _BillingManager.Contract.GetSupportedDepositAssetKeys(&_BillingManager.CallOpts)
}

// GetSupportedDepositAssetKeys is a free data retrieval call binding the contract method 0xa266f963.
//
// Solidity: function getSupportedDepositAssetKeys() view returns(string[])
func (_BillingManager *BillingManagerCallerSession) GetSupportedDepositAssetKeys() ([]string, error) {
	return _BillingManager.Contract.GetSupportedDepositAssetKeys(&_BillingManager.CallOpts)
}

// GetTotalDepositAssetAmount is a free data retrieval call binding the contract method 0xad6981b0.
//
// Solidity: function getTotalDepositAssetAmount(string _depositAssetKey) view returns(uint256)
func (_BillingManager *BillingManagerCaller) GetTotalDepositAssetAmount(opts *bind.CallOpts, _depositAssetKey string) (*big.Int, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "getTotalDepositAssetAmount", _depositAssetKey)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalDepositAssetAmount is a free data retrieval call binding the contract method 0xad6981b0.
//
// Solidity: function getTotalDepositAssetAmount(string _depositAssetKey) view returns(uint256)
func (_BillingManager *BillingManagerSession) GetTotalDepositAssetAmount(_depositAssetKey string) (*big.Int, error) {
	return _BillingManager.Contract.GetTotalDepositAssetAmount(&_BillingManager.CallOpts, _depositAssetKey)
}

// GetTotalDepositAssetAmount is a free data retrieval call binding the contract method 0xad6981b0.
//
// Solidity: function getTotalDepositAssetAmount(string _depositAssetKey) view returns(uint256)
func (_BillingManager *BillingManagerCallerSession) GetTotalDepositAssetAmount(_depositAssetKey string) (*big.Int, error) {
	return _BillingManager.Contract.GetTotalDepositAssetAmount(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsDepositAssetEnabled is a free data retrieval call binding the contract method 0x2b888682.
//
// Solidity: function isDepositAssetEnabled(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCaller) IsDepositAssetEnabled(opts *bind.CallOpts, _depositAssetKey string) (bool, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "isDepositAssetEnabled", _depositAssetKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDepositAssetEnabled is a free data retrieval call binding the contract method 0x2b888682.
//
// Solidity: function isDepositAssetEnabled(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerSession) IsDepositAssetEnabled(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsDepositAssetEnabled(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsDepositAssetEnabled is a free data retrieval call binding the contract method 0x2b888682.
//
// Solidity: function isDepositAssetEnabled(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCallerSession) IsDepositAssetEnabled(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsDepositAssetEnabled(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsDepositAssetPermitable is a free data retrieval call binding the contract method 0xc4710204.
//
// Solidity: function isDepositAssetPermitable(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCaller) IsDepositAssetPermitable(opts *bind.CallOpts, _depositAssetKey string) (bool, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "isDepositAssetPermitable", _depositAssetKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDepositAssetPermitable is a free data retrieval call binding the contract method 0xc4710204.
//
// Solidity: function isDepositAssetPermitable(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerSession) IsDepositAssetPermitable(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsDepositAssetPermitable(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsDepositAssetPermitable is a free data retrieval call binding the contract method 0xc4710204.
//
// Solidity: function isDepositAssetPermitable(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCallerSession) IsDepositAssetPermitable(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsDepositAssetPermitable(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsDepositAssetSupported is a free data retrieval call binding the contract method 0x606a679f.
//
// Solidity: function isDepositAssetSupported(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCaller) IsDepositAssetSupported(opts *bind.CallOpts, _depositAssetKey string) (bool, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "isDepositAssetSupported", _depositAssetKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDepositAssetSupported is a free data retrieval call binding the contract method 0x606a679f.
//
// Solidity: function isDepositAssetSupported(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerSession) IsDepositAssetSupported(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsDepositAssetSupported(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsDepositAssetSupported is a free data retrieval call binding the contract method 0x606a679f.
//
// Solidity: function isDepositAssetSupported(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCallerSession) IsDepositAssetSupported(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsDepositAssetSupported(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsNativeDepositAsset is a free data retrieval call binding the contract method 0xafb3f30a.
//
// Solidity: function isNativeDepositAsset(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCaller) IsNativeDepositAsset(opts *bind.CallOpts, _depositAssetKey string) (bool, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "isNativeDepositAsset", _depositAssetKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsNativeDepositAsset is a free data retrieval call binding the contract method 0xafb3f30a.
//
// Solidity: function isNativeDepositAsset(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerSession) IsNativeDepositAsset(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsNativeDepositAsset(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsNativeDepositAsset is a free data retrieval call binding the contract method 0xafb3f30a.
//
// Solidity: function isNativeDepositAsset(string _depositAssetKey) view returns(bool)
func (_BillingManager *BillingManagerCallerSession) IsNativeDepositAsset(_depositAssetKey string) (bool, error) {
	return _BillingManager.Contract.IsNativeDepositAsset(&_BillingManager.CallOpts, _depositAssetKey)
}

// IsUserNonceUsed is a free data retrieval call binding the contract method 0xf6c36f05.
//
// Solidity: function isUserNonceUsed(address _userAddr, uint256 _nonce) view returns(bool)
func (_BillingManager *BillingManagerCaller) IsUserNonceUsed(opts *bind.CallOpts, _userAddr common.Address, _nonce *big.Int) (bool, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "isUserNonceUsed", _userAddr, _nonce)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUserNonceUsed is a free data retrieval call binding the contract method 0xf6c36f05.
//
// Solidity: function isUserNonceUsed(address _userAddr, uint256 _nonce) view returns(bool)
func (_BillingManager *BillingManagerSession) IsUserNonceUsed(_userAddr common.Address, _nonce *big.Int) (bool, error) {
	return _BillingManager.Contract.IsUserNonceUsed(&_BillingManager.CallOpts, _userAddr, _nonce)
}

// IsUserNonceUsed is a free data retrieval call binding the contract method 0xf6c36f05.
//
// Solidity: function isUserNonceUsed(address _userAddr, uint256 _nonce) view returns(bool)
func (_BillingManager *BillingManagerCallerSession) IsUserNonceUsed(_userAddr common.Address, _nonce *big.Int) (bool, error) {
	return _BillingManager.Contract.IsUserNonceUsed(&_BillingManager.CallOpts, _userAddr, _nonce)
}

// NativeDepositAssetKey is a free data retrieval call binding the contract method 0x33c25326.
//
// Solidity: function nativeDepositAssetKey() view returns(string)
func (_BillingManager *BillingManagerCaller) NativeDepositAssetKey(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "nativeDepositAssetKey")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NativeDepositAssetKey is a free data retrieval call binding the contract method 0x33c25326.
//
// Solidity: function nativeDepositAssetKey() view returns(string)
func (_BillingManager *BillingManagerSession) NativeDepositAssetKey() (string, error) {
	return _BillingManager.Contract.NativeDepositAssetKey(&_BillingManager.CallOpts)
}

// NativeDepositAssetKey is a free data retrieval call binding the contract method 0x33c25326.
//
// Solidity: function nativeDepositAssetKey() view returns(string)
func (_BillingManager *BillingManagerCallerSession) NativeDepositAssetKey() (string, error) {
	return _BillingManager.Contract.NativeDepositAssetKey(&_BillingManager.CallOpts)
}

// NerifTokenDepositAssetKey is a free data retrieval call binding the contract method 0x05e5d065.
//
// Solidity: function nerifTokenDepositAssetKey() view returns(string)
func (_BillingManager *BillingManagerCaller) NerifTokenDepositAssetKey(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BillingManager.contract.Call(opts, &out, "nerifTokenDepositAssetKey")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NerifTokenDepositAssetKey is a free data retrieval call binding the contract method 0x05e5d065.
//
// Solidity: function nerifTokenDepositAssetKey() view returns(string)
func (_BillingManager *BillingManagerSession) NerifTokenDepositAssetKey() (string, error) {
	return _BillingManager.Contract.NerifTokenDepositAssetKey(&_BillingManager.CallOpts)
}

// NerifTokenDepositAssetKey is a free data retrieval call binding the contract method 0x05e5d065.
//
// Solidity: function nerifTokenDepositAssetKey() view returns(string)
func (_BillingManager *BillingManagerCallerSession) NerifTokenDepositAssetKey() (string, error) {
	return _BillingManager.Contract.NerifTokenDepositAssetKey(&_BillingManager.CallOpts)
}

// AddDepositAssets is a paid mutator transaction binding the contract method 0x7c1c6fba.
//
// Solidity: function addDepositAssets((string,(address,uint256,uint256,bool,bool))[] _depositAssetInfoArr) returns()
func (_BillingManager *BillingManagerTransactor) AddDepositAssets(opts *bind.TransactOpts, _depositAssetInfoArr []IBillingManagerDepositAssetInfo) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "addDepositAssets", _depositAssetInfoArr)
}

// AddDepositAssets is a paid mutator transaction binding the contract method 0x7c1c6fba.
//
// Solidity: function addDepositAssets((string,(address,uint256,uint256,bool,bool))[] _depositAssetInfoArr) returns()
func (_BillingManager *BillingManagerSession) AddDepositAssets(_depositAssetInfoArr []IBillingManagerDepositAssetInfo) (*types.Transaction, error) {
	return _BillingManager.Contract.AddDepositAssets(&_BillingManager.TransactOpts, _depositAssetInfoArr)
}

// AddDepositAssets is a paid mutator transaction binding the contract method 0x7c1c6fba.
//
// Solidity: function addDepositAssets((string,(address,uint256,uint256,bool,bool))[] _depositAssetInfoArr) returns()
func (_BillingManager *BillingManagerTransactorSession) AddDepositAssets(_depositAssetInfoArr []IBillingManagerDepositAssetInfo) (*types.Transaction, error) {
	return _BillingManager.Contract.AddDepositAssets(&_BillingManager.TransactOpts, _depositAssetInfoArr)
}

// AddSlashedTokens is a paid mutator transaction binding the contract method 0xddbb4e85.
//
// Solidity: function addSlashedTokens(string _depositAssetKey, uint256 _tokensAmount) returns()
func (_BillingManager *BillingManagerTransactor) AddSlashedTokens(opts *bind.TransactOpts, _depositAssetKey string, _tokensAmount *big.Int) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "addSlashedTokens", _depositAssetKey, _tokensAmount)
}

// AddSlashedTokens is a paid mutator transaction binding the contract method 0xddbb4e85.
//
// Solidity: function addSlashedTokens(string _depositAssetKey, uint256 _tokensAmount) returns()
func (_BillingManager *BillingManagerSession) AddSlashedTokens(_depositAssetKey string, _tokensAmount *big.Int) (*types.Transaction, error) {
	return _BillingManager.Contract.AddSlashedTokens(&_BillingManager.TransactOpts, _depositAssetKey, _tokensAmount)
}

// AddSlashedTokens is a paid mutator transaction binding the contract method 0xddbb4e85.
//
// Solidity: function addSlashedTokens(string _depositAssetKey, uint256 _tokensAmount) returns()
func (_BillingManager *BillingManagerTransactorSession) AddSlashedTokens(_depositAssetKey string, _tokensAmount *big.Int) (*types.Transaction, error) {
	return _BillingManager.Contract.AddSlashedTokens(&_BillingManager.TransactOpts, _depositAssetKey, _tokensAmount)
}

// Deposit is a paid mutator transaction binding the contract method 0x2a48ac9a.
//
// Solidity: function deposit(string _depositAssetKey, address _recipientAddr, uint256 _depositAmount) payable returns()
func (_BillingManager *BillingManagerTransactor) Deposit(opts *bind.TransactOpts, _depositAssetKey string, _recipientAddr common.Address, _depositAmount *big.Int) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "deposit", _depositAssetKey, _recipientAddr, _depositAmount)
}

// Deposit is a paid mutator transaction binding the contract method 0x2a48ac9a.
//
// Solidity: function deposit(string _depositAssetKey, address _recipientAddr, uint256 _depositAmount) payable returns()
func (_BillingManager *BillingManagerSession) Deposit(_depositAssetKey string, _recipientAddr common.Address, _depositAmount *big.Int) (*types.Transaction, error) {
	return _BillingManager.Contract.Deposit(&_BillingManager.TransactOpts, _depositAssetKey, _recipientAddr, _depositAmount)
}

// Deposit is a paid mutator transaction binding the contract method 0x2a48ac9a.
//
// Solidity: function deposit(string _depositAssetKey, address _recipientAddr, uint256 _depositAmount) payable returns()
func (_BillingManager *BillingManagerTransactorSession) Deposit(_depositAssetKey string, _recipientAddr common.Address, _depositAmount *big.Int) (*types.Transaction, error) {
	return _BillingManager.Contract.Deposit(&_BillingManager.TransactOpts, _depositAssetKey, _recipientAddr, _depositAmount)
}

// DepositWithPermit is a paid mutator transaction binding the contract method 0xdc0ffd24.
//
// Solidity: function depositWithPermit(string _depositAssetKey, address _recipientAddr, uint256 _depositAmount, (uint256,uint8,bytes32,bytes32) _sigData) returns()
func (_BillingManager *BillingManagerTransactor) DepositWithPermit(opts *bind.TransactOpts, _depositAssetKey string, _recipientAddr common.Address, _depositAmount *big.Int, _sigData IBillingManagerSigData) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "depositWithPermit", _depositAssetKey, _recipientAddr, _depositAmount, _sigData)
}

// DepositWithPermit is a paid mutator transaction binding the contract method 0xdc0ffd24.
//
// Solidity: function depositWithPermit(string _depositAssetKey, address _recipientAddr, uint256 _depositAmount, (uint256,uint8,bytes32,bytes32) _sigData) returns()
func (_BillingManager *BillingManagerSession) DepositWithPermit(_depositAssetKey string, _recipientAddr common.Address, _depositAmount *big.Int, _sigData IBillingManagerSigData) (*types.Transaction, error) {
	return _BillingManager.Contract.DepositWithPermit(&_BillingManager.TransactOpts, _depositAssetKey, _recipientAddr, _depositAmount, _sigData)
}

// DepositWithPermit is a paid mutator transaction binding the contract method 0xdc0ffd24.
//
// Solidity: function depositWithPermit(string _depositAssetKey, address _recipientAddr, uint256 _depositAmount, (uint256,uint8,bytes32,bytes32) _sigData) returns()
func (_BillingManager *BillingManagerTransactorSession) DepositWithPermit(_depositAssetKey string, _recipientAddr common.Address, _depositAmount *big.Int, _sigData IBillingManagerSigData) (*types.Transaction, error) {
	return _BillingManager.Contract.DepositWithPermit(&_BillingManager.TransactOpts, _depositAssetKey, _recipientAddr, _depositAmount, _sigData)
}

// Initialize is a paid mutator transaction binding the contract method 0xd0d16504.
//
// Solidity: function initialize((string,(address,uint256,uint256,bool,bool)) _nativeDepositAssetInfo, (string,(address,uint256,uint256,bool,bool)) _nerifTokenDepositAssetInfo) returns()
func (_BillingManager *BillingManagerTransactor) Initialize(opts *bind.TransactOpts, _nativeDepositAssetInfo IBillingManagerDepositAssetInfo, _nerifTokenDepositAssetInfo IBillingManagerDepositAssetInfo) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "initialize", _nativeDepositAssetInfo, _nerifTokenDepositAssetInfo)
}

// Initialize is a paid mutator transaction binding the contract method 0xd0d16504.
//
// Solidity: function initialize((string,(address,uint256,uint256,bool,bool)) _nativeDepositAssetInfo, (string,(address,uint256,uint256,bool,bool)) _nerifTokenDepositAssetInfo) returns()
func (_BillingManager *BillingManagerSession) Initialize(_nativeDepositAssetInfo IBillingManagerDepositAssetInfo, _nerifTokenDepositAssetInfo IBillingManagerDepositAssetInfo) (*types.Transaction, error) {
	return _BillingManager.Contract.Initialize(&_BillingManager.TransactOpts, _nativeDepositAssetInfo, _nerifTokenDepositAssetInfo)
}

// Initialize is a paid mutator transaction binding the contract method 0xd0d16504.
//
// Solidity: function initialize((string,(address,uint256,uint256,bool,bool)) _nativeDepositAssetInfo, (string,(address,uint256,uint256,bool,bool)) _nerifTokenDepositAssetInfo) returns()
func (_BillingManager *BillingManagerTransactorSession) Initialize(_nativeDepositAssetInfo IBillingManagerDepositAssetInfo, _nerifTokenDepositAssetInfo IBillingManagerDepositAssetInfo) (*types.Transaction, error) {
	return _BillingManager.Contract.Initialize(&_BillingManager.TransactOpts, _nativeDepositAssetInfo, _nerifTokenDepositAssetInfo)
}

// SetDependencies is a paid mutator transaction binding the contract method 0x69130451.
//
// Solidity: function setDependencies(address _contractsRegistryAddr, bytes ) returns()
func (_BillingManager *BillingManagerTransactor) SetDependencies(opts *bind.TransactOpts, _contractsRegistryAddr common.Address, arg1 []byte) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "setDependencies", _contractsRegistryAddr, arg1)
}

// SetDependencies is a paid mutator transaction binding the contract method 0x69130451.
//
// Solidity: function setDependencies(address _contractsRegistryAddr, bytes ) returns()
func (_BillingManager *BillingManagerSession) SetDependencies(_contractsRegistryAddr common.Address, arg1 []byte) (*types.Transaction, error) {
	return _BillingManager.Contract.SetDependencies(&_BillingManager.TransactOpts, _contractsRegistryAddr, arg1)
}

// SetDependencies is a paid mutator transaction binding the contract method 0x69130451.
//
// Solidity: function setDependencies(address _contractsRegistryAddr, bytes ) returns()
func (_BillingManager *BillingManagerTransactorSession) SetDependencies(_contractsRegistryAddr common.Address, arg1 []byte) (*types.Transaction, error) {
	return _BillingManager.Contract.SetDependencies(&_BillingManager.TransactOpts, _contractsRegistryAddr, arg1)
}

// SetInjector is a paid mutator transaction binding the contract method 0x8cb941cc.
//
// Solidity: function setInjector(address injector_) returns()
func (_BillingManager *BillingManagerTransactor) SetInjector(opts *bind.TransactOpts, injector_ common.Address) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "setInjector", injector_)
}

// SetInjector is a paid mutator transaction binding the contract method 0x8cb941cc.
//
// Solidity: function setInjector(address injector_) returns()
func (_BillingManager *BillingManagerSession) SetInjector(injector_ common.Address) (*types.Transaction, error) {
	return _BillingManager.Contract.SetInjector(&_BillingManager.TransactOpts, injector_)
}

// SetInjector is a paid mutator transaction binding the contract method 0x8cb941cc.
//
// Solidity: function setInjector(address injector_) returns()
func (_BillingManager *BillingManagerTransactorSession) SetInjector(injector_ common.Address) (*types.Transaction, error) {
	return _BillingManager.Contract.SetInjector(&_BillingManager.TransactOpts, injector_)
}

// UpdateDepositAssetEnabledStatus is a paid mutator transaction binding the contract method 0xc172bfd7.
//
// Solidity: function updateDepositAssetEnabledStatus(string _depositAssetKey, bool _newEnabledStatus) returns()
func (_BillingManager *BillingManagerTransactor) UpdateDepositAssetEnabledStatus(opts *bind.TransactOpts, _depositAssetKey string, _newEnabledStatus bool) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "updateDepositAssetEnabledStatus", _depositAssetKey, _newEnabledStatus)
}

// UpdateDepositAssetEnabledStatus is a paid mutator transaction binding the contract method 0xc172bfd7.
//
// Solidity: function updateDepositAssetEnabledStatus(string _depositAssetKey, bool _newEnabledStatus) returns()
func (_BillingManager *BillingManagerSession) UpdateDepositAssetEnabledStatus(_depositAssetKey string, _newEnabledStatus bool) (*types.Transaction, error) {
	return _BillingManager.Contract.UpdateDepositAssetEnabledStatus(&_BillingManager.TransactOpts, _depositAssetKey, _newEnabledStatus)
}

// UpdateDepositAssetEnabledStatus is a paid mutator transaction binding the contract method 0xc172bfd7.
//
// Solidity: function updateDepositAssetEnabledStatus(string _depositAssetKey, bool _newEnabledStatus) returns()
func (_BillingManager *BillingManagerTransactorSession) UpdateDepositAssetEnabledStatus(_depositAssetKey string, _newEnabledStatus bool) (*types.Transaction, error) {
	return _BillingManager.Contract.UpdateDepositAssetEnabledStatus(&_BillingManager.TransactOpts, _depositAssetKey, _newEnabledStatus)
}

// UpdateWorkflowExecutionDiscount is a paid mutator transaction binding the contract method 0xc66ae1e8.
//
// Solidity: function updateWorkflowExecutionDiscount(string _depositAssetKey, uint256 _newWorkflowExecutionDiscount) returns()
func (_BillingManager *BillingManagerTransactor) UpdateWorkflowExecutionDiscount(opts *bind.TransactOpts, _depositAssetKey string, _newWorkflowExecutionDiscount *big.Int) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "updateWorkflowExecutionDiscount", _depositAssetKey, _newWorkflowExecutionDiscount)
}

// UpdateWorkflowExecutionDiscount is a paid mutator transaction binding the contract method 0xc66ae1e8.
//
// Solidity: function updateWorkflowExecutionDiscount(string _depositAssetKey, uint256 _newWorkflowExecutionDiscount) returns()
func (_BillingManager *BillingManagerSession) UpdateWorkflowExecutionDiscount(_depositAssetKey string, _newWorkflowExecutionDiscount *big.Int) (*types.Transaction, error) {
	return _BillingManager.Contract.UpdateWorkflowExecutionDiscount(&_BillingManager.TransactOpts, _depositAssetKey, _newWorkflowExecutionDiscount)
}

// UpdateWorkflowExecutionDiscount is a paid mutator transaction binding the contract method 0xc66ae1e8.
//
// Solidity: function updateWorkflowExecutionDiscount(string _depositAssetKey, uint256 _newWorkflowExecutionDiscount) returns()
func (_BillingManager *BillingManagerTransactorSession) UpdateWorkflowExecutionDiscount(_depositAssetKey string, _newWorkflowExecutionDiscount *big.Int) (*types.Transaction, error) {
	return _BillingManager.Contract.UpdateWorkflowExecutionDiscount(&_BillingManager.TransactOpts, _depositAssetKey, _newWorkflowExecutionDiscount)
}

// WithdrawFunds is a paid mutator transaction binding the contract method 0xcf73d870.
//
// Solidity: function withdrawFunds((string[],uint256[],uint256,(uint256,uint8,bytes32,bytes32)) _withdrawData) returns()
func (_BillingManager *BillingManagerTransactor) WithdrawFunds(opts *bind.TransactOpts, _withdrawData IBillingManagerWithdrawData) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "withdrawFunds", _withdrawData)
}

// WithdrawFunds is a paid mutator transaction binding the contract method 0xcf73d870.
//
// Solidity: function withdrawFunds((string[],uint256[],uint256,(uint256,uint8,bytes32,bytes32)) _withdrawData) returns()
func (_BillingManager *BillingManagerSession) WithdrawFunds(_withdrawData IBillingManagerWithdrawData) (*types.Transaction, error) {
	return _BillingManager.Contract.WithdrawFunds(&_BillingManager.TransactOpts, _withdrawData)
}

// WithdrawFunds is a paid mutator transaction binding the contract method 0xcf73d870.
//
// Solidity: function withdrawFunds((string[],uint256[],uint256,(uint256,uint8,bytes32,bytes32)) _withdrawData) returns()
func (_BillingManager *BillingManagerTransactorSession) WithdrawFunds(_withdrawData IBillingManagerWithdrawData) (*types.Transaction, error) {
	return _BillingManager.Contract.WithdrawFunds(&_BillingManager.TransactOpts, _withdrawData)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xa31bedd1.
//
// Solidity: function withdrawRewards((string[],uint256[],uint256,(uint256,uint8,bytes32,bytes32)) _withdrawData) returns()
func (_BillingManager *BillingManagerTransactor) WithdrawRewards(opts *bind.TransactOpts, _withdrawData IBillingManagerWithdrawData) (*types.Transaction, error) {
	return _BillingManager.contract.Transact(opts, "withdrawRewards", _withdrawData)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xa31bedd1.
//
// Solidity: function withdrawRewards((string[],uint256[],uint256,(uint256,uint8,bytes32,bytes32)) _withdrawData) returns()
func (_BillingManager *BillingManagerSession) WithdrawRewards(_withdrawData IBillingManagerWithdrawData) (*types.Transaction, error) {
	return _BillingManager.Contract.WithdrawRewards(&_BillingManager.TransactOpts, _withdrawData)
}

// WithdrawRewards is a paid mutator transaction binding the contract method 0xa31bedd1.
//
// Solidity: function withdrawRewards((string[],uint256[],uint256,(uint256,uint8,bytes32,bytes32)) _withdrawData) returns()
func (_BillingManager *BillingManagerTransactorSession) WithdrawRewards(_withdrawData IBillingManagerWithdrawData) (*types.Transaction, error) {
	return _BillingManager.Contract.WithdrawRewards(&_BillingManager.TransactOpts, _withdrawData)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BillingManager *BillingManagerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BillingManager.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BillingManager *BillingManagerSession) Receive() (*types.Transaction, error) {
	return _BillingManager.Contract.Receive(&_BillingManager.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BillingManager *BillingManagerTransactorSession) Receive() (*types.Transaction, error) {
	return _BillingManager.Contract.Receive(&_BillingManager.TransactOpts)
}

// BillingManagerAssetDepositedIterator is returned from FilterAssetDeposited and is used to iterate over the raw logs and unpacked data for AssetDeposited events raised by the BillingManager contract.
type BillingManagerAssetDepositedIterator struct {
	Event *BillingManagerAssetDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerAssetDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerAssetDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerAssetDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerAssetDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerAssetDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerAssetDeposited represents a AssetDeposited event raised by the BillingManager contract.
type BillingManagerAssetDeposited struct {
	DepositAssetKey  common.Hash
	TokensSender     common.Address
	DepositRecipient common.Address
	DepositAmount    *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAssetDeposited is a free log retrieval operation binding the contract event 0xfbc2fad7e5ffeb083133f666db8691af5364707e2b5bf9d1f6f93834433aeca4.
//
// Solidity: event AssetDeposited(string indexed depositAssetKey, address tokensSender, address depositRecipient, uint256 depositAmount)
func (_BillingManager *BillingManagerFilterer) FilterAssetDeposited(opts *bind.FilterOpts, depositAssetKey []string) (*BillingManagerAssetDepositedIterator, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "AssetDeposited", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerAssetDepositedIterator{contract: _BillingManager.contract, event: "AssetDeposited", logs: logs, sub: sub}, nil
}

// WatchAssetDeposited is a free log subscription operation binding the contract event 0xfbc2fad7e5ffeb083133f666db8691af5364707e2b5bf9d1f6f93834433aeca4.
//
// Solidity: event AssetDeposited(string indexed depositAssetKey, address tokensSender, address depositRecipient, uint256 depositAmount)
func (_BillingManager *BillingManagerFilterer) WatchAssetDeposited(opts *bind.WatchOpts, sink chan<- *BillingManagerAssetDeposited, depositAssetKey []string) (event.Subscription, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "AssetDeposited", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerAssetDeposited)
				if err := _BillingManager.contract.UnpackLog(event, "AssetDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetDeposited is a log parse operation binding the contract event 0xfbc2fad7e5ffeb083133f666db8691af5364707e2b5bf9d1f6f93834433aeca4.
//
// Solidity: event AssetDeposited(string indexed depositAssetKey, address tokensSender, address depositRecipient, uint256 depositAmount)
func (_BillingManager *BillingManagerFilterer) ParseAssetDeposited(log types.Log) (*BillingManagerAssetDeposited, error) {
	event := new(BillingManagerAssetDeposited)
	if err := _BillingManager.contract.UnpackLog(event, "AssetDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerDepositAssetAddedIterator is returned from FilterDepositAssetAdded and is used to iterate over the raw logs and unpacked data for DepositAssetAdded events raised by the BillingManager contract.
type BillingManagerDepositAssetAddedIterator struct {
	Event *BillingManagerDepositAssetAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerDepositAssetAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerDepositAssetAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerDepositAssetAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerDepositAssetAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerDepositAssetAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerDepositAssetAdded represents a DepositAssetAdded event raised by the BillingManager contract.
type BillingManagerDepositAssetAdded struct {
	DepositAssetKey  string
	DepositAssetData IBillingManagerDepositAssetData
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDepositAssetAdded is a free log retrieval operation binding the contract event 0x310a01f49fbf43988aa0ce4a44296f5fc9f1fe442769d2416f1965d6a1cd236e.
//
// Solidity: event DepositAssetAdded(string depositAssetKey, (address,uint256,uint256,bool,bool) depositAssetData)
func (_BillingManager *BillingManagerFilterer) FilterDepositAssetAdded(opts *bind.FilterOpts) (*BillingManagerDepositAssetAddedIterator, error) {

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "DepositAssetAdded")
	if err != nil {
		return nil, err
	}
	return &BillingManagerDepositAssetAddedIterator{contract: _BillingManager.contract, event: "DepositAssetAdded", logs: logs, sub: sub}, nil
}

// WatchDepositAssetAdded is a free log subscription operation binding the contract event 0x310a01f49fbf43988aa0ce4a44296f5fc9f1fe442769d2416f1965d6a1cd236e.
//
// Solidity: event DepositAssetAdded(string depositAssetKey, (address,uint256,uint256,bool,bool) depositAssetData)
func (_BillingManager *BillingManagerFilterer) WatchDepositAssetAdded(opts *bind.WatchOpts, sink chan<- *BillingManagerDepositAssetAdded) (event.Subscription, error) {

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "DepositAssetAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerDepositAssetAdded)
				if err := _BillingManager.contract.UnpackLog(event, "DepositAssetAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositAssetAdded is a log parse operation binding the contract event 0x310a01f49fbf43988aa0ce4a44296f5fc9f1fe442769d2416f1965d6a1cd236e.
//
// Solidity: event DepositAssetAdded(string depositAssetKey, (address,uint256,uint256,bool,bool) depositAssetData)
func (_BillingManager *BillingManagerFilterer) ParseDepositAssetAdded(log types.Log) (*BillingManagerDepositAssetAdded, error) {
	event := new(BillingManagerDepositAssetAdded)
	if err := _BillingManager.contract.UnpackLog(event, "DepositAssetAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerDepositAssetEnabledStatusUpdatedIterator is returned from FilterDepositAssetEnabledStatusUpdated and is used to iterate over the raw logs and unpacked data for DepositAssetEnabledStatusUpdated events raised by the BillingManager contract.
type BillingManagerDepositAssetEnabledStatusUpdatedIterator struct {
	Event *BillingManagerDepositAssetEnabledStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerDepositAssetEnabledStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerDepositAssetEnabledStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerDepositAssetEnabledStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerDepositAssetEnabledStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerDepositAssetEnabledStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerDepositAssetEnabledStatusUpdated represents a DepositAssetEnabledStatusUpdated event raised by the BillingManager contract.
type BillingManagerDepositAssetEnabledStatusUpdated struct {
	DepositAssetKey  common.Hash
	NewEnabledStatus bool
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDepositAssetEnabledStatusUpdated is a free log retrieval operation binding the contract event 0x838dfb07f2f9eda916131303b1c93fcdb2d1f0cfae1f651eee30c8bd44091356.
//
// Solidity: event DepositAssetEnabledStatusUpdated(string indexed depositAssetKey, bool newEnabledStatus)
func (_BillingManager *BillingManagerFilterer) FilterDepositAssetEnabledStatusUpdated(opts *bind.FilterOpts, depositAssetKey []string) (*BillingManagerDepositAssetEnabledStatusUpdatedIterator, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "DepositAssetEnabledStatusUpdated", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerDepositAssetEnabledStatusUpdatedIterator{contract: _BillingManager.contract, event: "DepositAssetEnabledStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchDepositAssetEnabledStatusUpdated is a free log subscription operation binding the contract event 0x838dfb07f2f9eda916131303b1c93fcdb2d1f0cfae1f651eee30c8bd44091356.
//
// Solidity: event DepositAssetEnabledStatusUpdated(string indexed depositAssetKey, bool newEnabledStatus)
func (_BillingManager *BillingManagerFilterer) WatchDepositAssetEnabledStatusUpdated(opts *bind.WatchOpts, sink chan<- *BillingManagerDepositAssetEnabledStatusUpdated, depositAssetKey []string) (event.Subscription, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "DepositAssetEnabledStatusUpdated", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerDepositAssetEnabledStatusUpdated)
				if err := _BillingManager.contract.UnpackLog(event, "DepositAssetEnabledStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositAssetEnabledStatusUpdated is a log parse operation binding the contract event 0x838dfb07f2f9eda916131303b1c93fcdb2d1f0cfae1f651eee30c8bd44091356.
//
// Solidity: event DepositAssetEnabledStatusUpdated(string indexed depositAssetKey, bool newEnabledStatus)
func (_BillingManager *BillingManagerFilterer) ParseDepositAssetEnabledStatusUpdated(log types.Log) (*BillingManagerDepositAssetEnabledStatusUpdated, error) {
	event := new(BillingManagerDepositAssetEnabledStatusUpdated)
	if err := _BillingManager.contract.UnpackLog(event, "DepositAssetEnabledStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BillingManager contract.
type BillingManagerEIP712DomainChangedIterator struct {
	Event *BillingManagerEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerEIP712DomainChanged represents a EIP712DomainChanged event raised by the BillingManager contract.
type BillingManagerEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BillingManager *BillingManagerFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BillingManagerEIP712DomainChangedIterator, error) {

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BillingManagerEIP712DomainChangedIterator{contract: _BillingManager.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BillingManager *BillingManagerFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BillingManagerEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerEIP712DomainChanged)
				if err := _BillingManager.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BillingManager *BillingManagerFilterer) ParseEIP712DomainChanged(log types.Log) (*BillingManagerEIP712DomainChanged, error) {
	event := new(BillingManagerEIP712DomainChanged)
	if err := _BillingManager.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerFundsWithdrawnIterator is returned from FilterFundsWithdrawn and is used to iterate over the raw logs and unpacked data for FundsWithdrawn events raised by the BillingManager contract.
type BillingManagerFundsWithdrawnIterator struct {
	Event *BillingManagerFundsWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerFundsWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerFundsWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerFundsWithdrawn represents a FundsWithdrawn event raised by the BillingManager contract.
type BillingManagerFundsWithdrawn struct {
	UserAddr         common.Address
	DepositAssetKeys []string
	WithdrawnAmounts []*big.Int
	Nonce            *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawn is a free log retrieval operation binding the contract event 0xe44521e154242882dc836ab52e9e6311da8aaefe10bbd7628128d574d0783f22.
//
// Solidity: event FundsWithdrawn(address indexed userAddr, string[] depositAssetKeys, uint256[] withdrawnAmounts, uint256 nonce)
func (_BillingManager *BillingManagerFilterer) FilterFundsWithdrawn(opts *bind.FilterOpts, userAddr []common.Address) (*BillingManagerFundsWithdrawnIterator, error) {

	var userAddrRule []interface{}
	for _, userAddrItem := range userAddr {
		userAddrRule = append(userAddrRule, userAddrItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "FundsWithdrawn", userAddrRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerFundsWithdrawnIterator{contract: _BillingManager.contract, event: "FundsWithdrawn", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawn is a free log subscription operation binding the contract event 0xe44521e154242882dc836ab52e9e6311da8aaefe10bbd7628128d574d0783f22.
//
// Solidity: event FundsWithdrawn(address indexed userAddr, string[] depositAssetKeys, uint256[] withdrawnAmounts, uint256 nonce)
func (_BillingManager *BillingManagerFilterer) WatchFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *BillingManagerFundsWithdrawn, userAddr []common.Address) (event.Subscription, error) {

	var userAddrRule []interface{}
	for _, userAddrItem := range userAddr {
		userAddrRule = append(userAddrRule, userAddrItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "FundsWithdrawn", userAddrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerFundsWithdrawn)
				if err := _BillingManager.contract.UnpackLog(event, "FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsWithdrawn is a log parse operation binding the contract event 0xe44521e154242882dc836ab52e9e6311da8aaefe10bbd7628128d574d0783f22.
//
// Solidity: event FundsWithdrawn(address indexed userAddr, string[] depositAssetKeys, uint256[] withdrawnAmounts, uint256 nonce)
func (_BillingManager *BillingManagerFilterer) ParseFundsWithdrawn(log types.Log) (*BillingManagerFundsWithdrawn, error) {
	event := new(BillingManagerFundsWithdrawn)
	if err := _BillingManager.contract.UnpackLog(event, "FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BillingManager contract.
type BillingManagerInitializedIterator struct {
	Event *BillingManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerInitialized represents a Initialized event raised by the BillingManager contract.
type BillingManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BillingManager *BillingManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*BillingManagerInitializedIterator, error) {

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BillingManagerInitializedIterator{contract: _BillingManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BillingManager *BillingManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BillingManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerInitialized)
				if err := _BillingManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BillingManager *BillingManagerFilterer) ParseInitialized(log types.Log) (*BillingManagerInitialized, error) {
	event := new(BillingManagerInitialized)
	if err := _BillingManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerNetworkWithdrawCompletedIterator is returned from FilterNetworkWithdrawCompleted and is used to iterate over the raw logs and unpacked data for NetworkWithdrawCompleted events raised by the BillingManager contract.
type BillingManagerNetworkWithdrawCompletedIterator struct {
	Event *BillingManagerNetworkWithdrawCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerNetworkWithdrawCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerNetworkWithdrawCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerNetworkWithdrawCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerNetworkWithdrawCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerNetworkWithdrawCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerNetworkWithdrawCompleted represents a NetworkWithdrawCompleted event raised by the BillingManager contract.
type BillingManagerNetworkWithdrawCompleted struct {
	DepositAssetKey  common.Hash
	UserAddr         common.Address
	AmountToWithdraw *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterNetworkWithdrawCompleted is a free log retrieval operation binding the contract event 0xf72e4018008bb0ada87515fbd23be8639327f3e5c56c767bade1791a8cf98aaa.
//
// Solidity: event NetworkWithdrawCompleted(string indexed depositAssetKey, address indexed userAddr, uint256 amountToWithdraw)
func (_BillingManager *BillingManagerFilterer) FilterNetworkWithdrawCompleted(opts *bind.FilterOpts, depositAssetKey []string, userAddr []common.Address) (*BillingManagerNetworkWithdrawCompletedIterator, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}
	var userAddrRule []interface{}
	for _, userAddrItem := range userAddr {
		userAddrRule = append(userAddrRule, userAddrItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "NetworkWithdrawCompleted", depositAssetKeyRule, userAddrRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerNetworkWithdrawCompletedIterator{contract: _BillingManager.contract, event: "NetworkWithdrawCompleted", logs: logs, sub: sub}, nil
}

// WatchNetworkWithdrawCompleted is a free log subscription operation binding the contract event 0xf72e4018008bb0ada87515fbd23be8639327f3e5c56c767bade1791a8cf98aaa.
//
// Solidity: event NetworkWithdrawCompleted(string indexed depositAssetKey, address indexed userAddr, uint256 amountToWithdraw)
func (_BillingManager *BillingManagerFilterer) WatchNetworkWithdrawCompleted(opts *bind.WatchOpts, sink chan<- *BillingManagerNetworkWithdrawCompleted, depositAssetKey []string, userAddr []common.Address) (event.Subscription, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}
	var userAddrRule []interface{}
	for _, userAddrItem := range userAddr {
		userAddrRule = append(userAddrRule, userAddrItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "NetworkWithdrawCompleted", depositAssetKeyRule, userAddrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerNetworkWithdrawCompleted)
				if err := _BillingManager.contract.UnpackLog(event, "NetworkWithdrawCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNetworkWithdrawCompleted is a log parse operation binding the contract event 0xf72e4018008bb0ada87515fbd23be8639327f3e5c56c767bade1791a8cf98aaa.
//
// Solidity: event NetworkWithdrawCompleted(string indexed depositAssetKey, address indexed userAddr, uint256 amountToWithdraw)
func (_BillingManager *BillingManagerFilterer) ParseNetworkWithdrawCompleted(log types.Log) (*BillingManagerNetworkWithdrawCompleted, error) {
	event := new(BillingManagerNetworkWithdrawCompleted)
	if err := _BillingManager.contract.UnpackLog(event, "NetworkWithdrawCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerRewardsWithdrawnIterator is returned from FilterRewardsWithdrawn and is used to iterate over the raw logs and unpacked data for RewardsWithdrawn events raised by the BillingManager contract.
type BillingManagerRewardsWithdrawnIterator struct {
	Event *BillingManagerRewardsWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerRewardsWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerRewardsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerRewardsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerRewardsWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerRewardsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerRewardsWithdrawn represents a RewardsWithdrawn event raised by the BillingManager contract.
type BillingManagerRewardsWithdrawn struct {
	UserAddr         common.Address
	DepositAssetKeys []string
	RewardsAmounts   []*big.Int
	Nonce            *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterRewardsWithdrawn is a free log retrieval operation binding the contract event 0xa64ae220bd0f63177c615d6b1cbfe169d8299b200063be77f3a511eaab5ce029.
//
// Solidity: event RewardsWithdrawn(address indexed userAddr, string[] depositAssetKeys, uint256[] rewardsAmounts, uint256 nonce)
func (_BillingManager *BillingManagerFilterer) FilterRewardsWithdrawn(opts *bind.FilterOpts, userAddr []common.Address) (*BillingManagerRewardsWithdrawnIterator, error) {

	var userAddrRule []interface{}
	for _, userAddrItem := range userAddr {
		userAddrRule = append(userAddrRule, userAddrItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "RewardsWithdrawn", userAddrRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerRewardsWithdrawnIterator{contract: _BillingManager.contract, event: "RewardsWithdrawn", logs: logs, sub: sub}, nil
}

// WatchRewardsWithdrawn is a free log subscription operation binding the contract event 0xa64ae220bd0f63177c615d6b1cbfe169d8299b200063be77f3a511eaab5ce029.
//
// Solidity: event RewardsWithdrawn(address indexed userAddr, string[] depositAssetKeys, uint256[] rewardsAmounts, uint256 nonce)
func (_BillingManager *BillingManagerFilterer) WatchRewardsWithdrawn(opts *bind.WatchOpts, sink chan<- *BillingManagerRewardsWithdrawn, userAddr []common.Address) (event.Subscription, error) {

	var userAddrRule []interface{}
	for _, userAddrItem := range userAddr {
		userAddrRule = append(userAddrRule, userAddrItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "RewardsWithdrawn", userAddrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerRewardsWithdrawn)
				if err := _BillingManager.contract.UnpackLog(event, "RewardsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsWithdrawn is a log parse operation binding the contract event 0xa64ae220bd0f63177c615d6b1cbfe169d8299b200063be77f3a511eaab5ce029.
//
// Solidity: event RewardsWithdrawn(address indexed userAddr, string[] depositAssetKeys, uint256[] rewardsAmounts, uint256 nonce)
func (_BillingManager *BillingManagerFilterer) ParseRewardsWithdrawn(log types.Log) (*BillingManagerRewardsWithdrawn, error) {
	event := new(BillingManagerRewardsWithdrawn)
	if err := _BillingManager.contract.UnpackLog(event, "RewardsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerSlashedTokensAddedIterator is returned from FilterSlashedTokensAdded and is used to iterate over the raw logs and unpacked data for SlashedTokensAdded events raised by the BillingManager contract.
type BillingManagerSlashedTokensAddedIterator struct {
	Event *BillingManagerSlashedTokensAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerSlashedTokensAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerSlashedTokensAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerSlashedTokensAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerSlashedTokensAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerSlashedTokensAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerSlashedTokensAdded represents a SlashedTokensAdded event raised by the BillingManager contract.
type BillingManagerSlashedTokensAdded struct {
	DepositAssetKey common.Hash
	TokensAmount    *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSlashedTokensAdded is a free log retrieval operation binding the contract event 0x0c2c42de19ca2e66a35c4997cc767a0b919ea27b5467b42d4d8f8f08ead20980.
//
// Solidity: event SlashedTokensAdded(string indexed depositAssetKey, uint256 tokensAmount)
func (_BillingManager *BillingManagerFilterer) FilterSlashedTokensAdded(opts *bind.FilterOpts, depositAssetKey []string) (*BillingManagerSlashedTokensAddedIterator, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "SlashedTokensAdded", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerSlashedTokensAddedIterator{contract: _BillingManager.contract, event: "SlashedTokensAdded", logs: logs, sub: sub}, nil
}

// WatchSlashedTokensAdded is a free log subscription operation binding the contract event 0x0c2c42de19ca2e66a35c4997cc767a0b919ea27b5467b42d4d8f8f08ead20980.
//
// Solidity: event SlashedTokensAdded(string indexed depositAssetKey, uint256 tokensAmount)
func (_BillingManager *BillingManagerFilterer) WatchSlashedTokensAdded(opts *bind.WatchOpts, sink chan<- *BillingManagerSlashedTokensAdded, depositAssetKey []string) (event.Subscription, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "SlashedTokensAdded", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerSlashedTokensAdded)
				if err := _BillingManager.contract.UnpackLog(event, "SlashedTokensAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashedTokensAdded is a log parse operation binding the contract event 0x0c2c42de19ca2e66a35c4997cc767a0b919ea27b5467b42d4d8f8f08ead20980.
//
// Solidity: event SlashedTokensAdded(string indexed depositAssetKey, uint256 tokensAmount)
func (_BillingManager *BillingManagerFilterer) ParseSlashedTokensAdded(log types.Log) (*BillingManagerSlashedTokensAdded, error) {
	event := new(BillingManagerSlashedTokensAdded)
	if err := _BillingManager.contract.UnpackLog(event, "SlashedTokensAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BillingManagerWorkflowExecutionDiscountUpdatedIterator is returned from FilterWorkflowExecutionDiscountUpdated and is used to iterate over the raw logs and unpacked data for WorkflowExecutionDiscountUpdated events raised by the BillingManager contract.
type BillingManagerWorkflowExecutionDiscountUpdatedIterator struct {
	Event *BillingManagerWorkflowExecutionDiscountUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BillingManagerWorkflowExecutionDiscountUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BillingManagerWorkflowExecutionDiscountUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BillingManagerWorkflowExecutionDiscountUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BillingManagerWorkflowExecutionDiscountUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BillingManagerWorkflowExecutionDiscountUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BillingManagerWorkflowExecutionDiscountUpdated represents a WorkflowExecutionDiscountUpdated event raised by the BillingManager contract.
type BillingManagerWorkflowExecutionDiscountUpdated struct {
	DepositAssetKey               common.Hash
	NewWorkflowExecutionDiscount  *big.Int
	PrevWorkflowExecutionDiscount *big.Int
	Raw                           types.Log // Blockchain specific contextual infos
}

// FilterWorkflowExecutionDiscountUpdated is a free log retrieval operation binding the contract event 0x70c21b53e4a29c6a334ae8d8d80a885023e4749ee873d6594b3f6cbb66140b6b.
//
// Solidity: event WorkflowExecutionDiscountUpdated(string indexed depositAssetKey, uint256 newWorkflowExecutionDiscount, uint256 prevWorkflowExecutionDiscount)
func (_BillingManager *BillingManagerFilterer) FilterWorkflowExecutionDiscountUpdated(opts *bind.FilterOpts, depositAssetKey []string) (*BillingManagerWorkflowExecutionDiscountUpdatedIterator, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.FilterLogs(opts, "WorkflowExecutionDiscountUpdated", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return &BillingManagerWorkflowExecutionDiscountUpdatedIterator{contract: _BillingManager.contract, event: "WorkflowExecutionDiscountUpdated", logs: logs, sub: sub}, nil
}

// WatchWorkflowExecutionDiscountUpdated is a free log subscription operation binding the contract event 0x70c21b53e4a29c6a334ae8d8d80a885023e4749ee873d6594b3f6cbb66140b6b.
//
// Solidity: event WorkflowExecutionDiscountUpdated(string indexed depositAssetKey, uint256 newWorkflowExecutionDiscount, uint256 prevWorkflowExecutionDiscount)
func (_BillingManager *BillingManagerFilterer) WatchWorkflowExecutionDiscountUpdated(opts *bind.WatchOpts, sink chan<- *BillingManagerWorkflowExecutionDiscountUpdated, depositAssetKey []string) (event.Subscription, error) {

	var depositAssetKeyRule []interface{}
	for _, depositAssetKeyItem := range depositAssetKey {
		depositAssetKeyRule = append(depositAssetKeyRule, depositAssetKeyItem)
	}

	logs, sub, err := _BillingManager.contract.WatchLogs(opts, "WorkflowExecutionDiscountUpdated", depositAssetKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BillingManagerWorkflowExecutionDiscountUpdated)
				if err := _BillingManager.contract.UnpackLog(event, "WorkflowExecutionDiscountUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowExecutionDiscountUpdated is a log parse operation binding the contract event 0x70c21b53e4a29c6a334ae8d8d80a885023e4749ee873d6594b3f6cbb66140b6b.
//
// Solidity: event WorkflowExecutionDiscountUpdated(string indexed depositAssetKey, uint256 newWorkflowExecutionDiscount, uint256 prevWorkflowExecutionDiscount)
func (_BillingManager *BillingManagerFilterer) ParseWorkflowExecutionDiscountUpdated(log types.Log) (*BillingManagerWorkflowExecutionDiscountUpdated, error) {
	event := new(BillingManagerWorkflowExecutionDiscountUpdated)
	if err := _BillingManager.contract.UnpackLog(event, "WorkflowExecutionDiscountUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
