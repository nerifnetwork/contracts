// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRegistryBaseWorkflowInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryBaseWorkflowInfo struct {
	Id     *big.Int
	Owner  common.Address
	Hash   []byte
	Status uint8
}

// IRegistryDepositAssetInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryDepositAssetInfo struct {
	DepositAssetKey        string
	DepositAssetTotalSpent *big.Int
}

// IRegistryGatewayInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryGatewayInfo struct {
	GatewayOwner common.Address
	Gateway      common.Address
}

// IRegistryRegisterWorkflowInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryRegisterWorkflowInfo struct {
	Id             *big.Int
	WorkflowOwner  common.Address
	Hash           []byte
	RequireGateway bool
	DeployGateway  bool
}

// IRegistryWorkflowInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryWorkflowInfo struct {
	BaseInfo          IRegistryBaseWorkflowInfo
	DepositAssetKeys  []string
	DepositAssetsInfo []IRegistryDepositAssetInfo
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"GatewaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workflowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workflowExecutionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Performance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"WorkflowRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"activateWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployAndSetGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"}],\"name\":\"getBaseWorkflowInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structIRegistry.BaseWorkflowInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getGatewaysInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gatewayOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"internalType\":\"structIRegistry.GatewayInfo[]\",\"name\":\"_gatewaysInfoArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInjector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"injector_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalGatewaysCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWorkflowsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"}],\"name\":\"getWorkflowDepositAssetKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_depositAssetKeys\",\"type\":\"string[]\"}],\"name\":\"getWorkflowDepositAssetsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAssetTotalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structIRegistry.DepositAssetInfo[]\",\"name\":\"_depositAssetsArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"}],\"name\":\"getWorkflowInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structIRegistry.BaseWorkflowInfo\",\"name\":\"baseInfo\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"depositAssetKeys\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAssetTotalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structIRegistry.DepositAssetInfo[]\",\"name\":\"depositAssetsInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"structIRegistry.WorkflowInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWorkflowOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWorkflowStatus\",\"outputs\":[{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getWorkflowsInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structIRegistry.BaseWorkflowInfo\",\"name\":\"baseInfo\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"depositAssetKeys\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAssetTotalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structIRegistry.DepositAssetInfo[]\",\"name\":\"depositAssetsInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"structIRegistry.WorkflowInfo[]\",\"name\":\"_workflowsInfoArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isWorkflowExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWorkflowsPerAccount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"pauseWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_workflowExecutionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"workflowOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"requireGateway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deployGateway\",\"type\":\"bool\"}],\"internalType\":\"structIRegistry.RegisterWorkflowInfo[]\",\"name\":\"_registerWorkflowInfoArr\",\"type\":\"tuple[]\"}],\"name\":\"registerWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"resumeWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractsRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"injector_\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"name\":\"setMaxWorkflowsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_depositAssetKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_workflowExecutionAmount\",\"type\":\"uint256\"}],\"name\":\"updateWorkflowTotalSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workflowsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612de6806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063a3190a36116100f9578063c5dc43a711610097578063df7459f011610071578063df7459f01461046f578063e1d1dffe1461048f578063eeed0b1814610497578063fdf1641f146104aa57600080fd5b8063c5dc43a714610408578063c5fd64d81461043b578063d69cd2751461044357600080fd5b8063bda009fe116100d3578063bda009fe146103a1578063c17fc3eb146103cd578063c1f9138c146103ed578063c48223191461040057600080fd5b8063a3190a3614610346578063abad5c1a14610366578063ae09340f1461038e57600080fd5b806374e90f311161016657806390646b4a1161014057806390646b4a146102dd57806395f5dae4146102f05780639b2bfaa314610310578063a3089ffe1461033357600080fd5b806374e90f31146102a45780637a03f9b5146102b75780638cb941cc146102ca57600080fd5b806344ab987d116101a257806344ab987d146102305780634b3225601461024357806369130451146102635780636b6995451461027657600080fd5b80630bdeec8f146101c957806313750946146101f25780633e3b5b1914610207575b600080fd5b6101dc6101d73660046122e5565b6104bd565b6040516101e9919061234e565b60405180910390f35b6102056102003660046123b0565b6104e0565b005b600080516020612d91833981519152545b6040516001600160a01b0390911681526020016101e9565b61020561023e3660046123b0565b61060a565b6102566102513660046122e5565b610634565b6040516101e99190612459565b61020561027136600461251e565b610740565b610296610284366004612581565b60066020526000908152604090205481565b6040519081526020016101e9565b6102056102b23660046125e9565b610894565b6102056102c536600461262a565b610e51565b6102056102d8366004612581565b611182565b6102056102eb366004612581565b6111a3565b6103036102fe3660046126cc565b6111ad565b6040516101e991906127ed565b61032361031e3660046122e5565b611291565b60405190151581526020016101e9565b6102056103413660046125e9565b6112c2565b6103596103543660046126cc565b611525565b6040516101e99190612842565b60025461037b90600160a01b900461ffff1681565b60405161ffff90911681526020016101e9565b61020561039c3660046128b1565b61162b565b6102186103af366004612581565b6001600160a01b039081166000908152600860205260409020541690565b6103e06103db3660046128fe565b61170a565b6040516101e991906129cc565b6102056103fb3660046125e9565b61182a565b6102966118bd565b61042e6104163660046122e5565b60009081526007602052604090206003015460ff1690565b6040516101e991906129df565b6102186118ce565b6102186104513660046122e5565b6000908152600760205260409020600101546001600160a01b031690565b61048261047d3660046122e5565b6118d9565b6040516101e991906129ed565b600354610296565b6102056104a53660046125e9565b611920565b6102056104b83660046125e9565b611994565b60008181526007602052604090206060906104da90600401611a08565b92915050565b600054610100900460ff16158080156105005750600054600160ff909116105b8061051a5750303b15801561051a575060005460ff166001145b6105825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105a5576000805461ff0019166101001790555b6002805461ffff60a01b1916600160a01b61ffff8516021790558015610606576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b610612611ae5565b6002805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b61063c61227d565b60008281526007602090815260409182902082516080810184528154815260018201546001600160a01b031692810192909252600281018054929391929184019161068690612a00565b80601f01602080910402602001604051908101604052809291908181526020018280546106b290612a00565b80156106ff5780601f106106d4576101008083540402835291602001916106ff565b820191906000526020600020905b8154815290600101906020018083116106e257829003601f168201915b5050509183525050600382015460209091019060ff166004811115610726576107266123d4565b6004811115610737576107376123d4565b90525092915050565b610748611ba9565b600082905080600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b031663fabf588e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190612a3a565b600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b03166348197f776040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190612a3a565b600280546001600160a01b0319166001600160a01b03929092169190911790555033600080516020612d91833981519152555050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663b834f6fb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c9190612a65565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316637ac3c02f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190612a3a565b90508180156109a15750600254600160a01b900461ffff1615155b15610a305760025433600090815260066020526040902054600160a01b90910461ffff16906109d1908590612a98565b1115610a305760405162461bcd60e51b815260206004820152602860248201527f52656769737472793a2072656163686564206d617820776f726b666c6f777320604482015267636170616369747960c01b6064820152608401610579565b60005b83811015610e4a5736858583818110610a4e57610a4e612aab565b9050602002810190610a609190612ac1565b905083610a78576001600160a01b0383163314610a94565b33610a896040830160208401612581565b6001600160a01b0316145b610ae05760405162461bcd60e51b815260206004820181905260248201527f52656769737472793a206e6f7420612073656e646572206f72207369676e65726044820152606401610579565b610af06080820160608301612ae1565b15610bc7576000600881610b0a6040850160208601612581565b6001600160a01b039081168252602082019290925260400160002054169050610b3960a0830160808401612ae1565b8015610b4c57506001600160a01b038116155b15610b6f57610b69610b646040840160208501612581565b611c2d565b50610bc5565b6001600160a01b038116610bc55760405162461bcd60e51b815260206004820152601b60248201527f52656769737472793a2067617465776179206e6f7420666f756e6400000000006044820152606401610579565b505b803560009081526007602052604081206003015460ff166004811115610bef57610bef6123d4565b14610c4c5760405162461bcd60e51b815260206004820152602760248201527f52656769737472793a20776f726b666c6f7720696420697320616c72656164796044820152662065786973747360c81b6064820152608401610579565b604051806080016040528082600001358152602001826020016020810190610c749190612581565b6001600160a01b03168152602001610c8f6040840184612afe565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200185610cd5576002610cd8565b60015b6004811115610ce957610ce96123d4565b9052813560009081526007602090815260409182902083518155908301516001820180546001600160a01b0319166001600160a01b03909216919091179055908201516002820190610d3b9082612b92565b50606082015160038201805460ff19166001836004811115610d5f57610d5f6123d4565b02179055506006915060009050610d7c6040840160208501612581565b6001600160a01b0316815260208101919091526040016000908120805491610da383612c51565b90915550506003805460018101825560009190915281357fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909101557f475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c610e106040830160208401612581565b8235610e1f6040850185612afe565b604051610e2f9493929190612c93565b60405180910390a15080610e4281612c51565b915050610a33565b5050505050565b610e59611ae5565b610e668660026001611cad565b600254604051634a686e4960e01b81526004810187905287916001600160a01b031690634a686e4990602401602060405180830381865afa158015610eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed39190612cc5565b148015610f5c57506002546040516307105e9760e41b8152600481018790526001916001600160a01b031690637105e97090602401602060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190612cde565b6002811115610f5a57610f5a6123d4565b145b610fb85760405162461bcd60e51b815260206004820152602760248201527f52656769737472793a20696e76616c696420776f726b666c6f772065786563756044820152661d1a5bdb88125160ca1b6064820152608401610579565b6001600160a01b038116300361101c5760405162461bcd60e51b8152602060048201526024808201527f52656769737472793a206f7065726174696f6e206973206e6f74207065726d696044820152631d1d195960e21b6064820152608401610579565b6000868152600760209081526040808320600101546001600160a01b03908116845260089092529091205416806110955760405162461bcd60e51b815260206004820152601e60248201527f52656769737472793a207a65726f2067617465776179206164647265737300006044820152606401610579565b600061113386836040518060400160405280601e81526020017f706572666f726d2875696e743235362c616464726573732c62797465732900008152508b878a8a6040516024016110e99493929190612cff565b60408051601f19818403018152908290529161110491612d2a565b6040519081900390206020820180516001600160e01b03166001600160e01b0319909216919091179052611d40565b604080518a8152602081018a90528215158183015290519192507fc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105919081900360600190a15050505050505050565b61118a611ba9565b6111a081600080516020612d9183398151915255565b50565b6111a03382611d8c565b606060006111c16003805490508585611e1d565b90506111cd8482612d3c565b6001600160401b038111156111e4576111e4612481565b60405190808252806020026020018201604052801561121d57816020015b61120a6122be565b8152602001906001900390816112025790505b509150835b81811015611289576112506003828154811061124057611240612aab565b90600052602060002001546118d9565b8361125b8784612d3c565b8151811061126b5761126b612aab565b6020026020010181905250808061128190612c51565b915050611222565b505092915050565b60008060008381526007602052604090206003015460ff1660048111156112ba576112ba6123d4565b141592915050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663b834f6fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133a9190612a65565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316637ac3c02f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b49190612a3a565b905060005b83811015610e4a576113e28585838181106113d6576113d6612aab565b90506020020135611e48565b600061141e8686848181106113f9576113f9612aab565b905060200201356000908152600760205260409020600101546001600160a01b031690565b905083611436576001600160a01b0383163314611443565b6001600160a01b03811633145b6114a05760405162461bcd60e51b815260206004820152602860248201527f52656769737472793a206e6f74206120776f726b666c6f77206f776e6572206f604482015267391039b4b3b732b960c11b6064820152608401610579565b6114c58686848181106114b5576114b5612aab565b9050602002013560046000611cad565b6114e88686848181106114da576114da612aab565b905060200201356004611ea7565b6001600160a01b038116600090815260066020526040812080549161150c83612d4f565b919050555050808061151d90612c51565b9150506113b9565b6060600061153d6115366004611f0b565b8585611e1d565b90506115498482612d3c565b6001600160401b0381111561156057611560612481565b6040519080825280602002602001820160405280156115a557816020015b604080518082019091526000808252602082015281526020019060019003908161157e5790505b509150835b818110156112895760006115bf600483611f15565b6040805180820182526001600160a01b03808416808352600090815260086020908152939020541691810191909152909150846115fc8885612d3c565b8151811061160c5761160c612aab565b602002602001018190525050808061162390612c51565b9150506115aa565b8161163581611e48565b6002546001600160a01b031633146116a15760405162461bcd60e51b815260206004820152602960248201527f52656769737472793a2073656e646572206973206e6f7420612062696c6c696e604482015268339036b0b730b3b2b960b91b6064820152608401610579565b60008381526007602052604090206116bc9060040185611f21565b508160076000858152602001908152602001600020600601856040516116e29190612d2a565b908152602001604051809103902060008282546116ff9190612a98565b909155505050505050565b606081516001600160401b0381111561172557611725612481565b60405190808252806020026020018201604052801561176b57816020015b6040805180820190915260608152600060208201528152602001906001900390816117435790505b50905060005b825181101561182357604051806040016040528084838151811061179757611797612aab565b60200260200101518152602001600760008781526020019081526020016000206006018584815181106117cc576117cc612aab565b60200260200101516040516117e19190612d2a565b90815260200160405180910390205481525082828151811061180557611805612aab565b6020026020010181905250808061181b90612c51565b915050611771565b5092915050565b611832611f83565b60005b818110156118b85761185e83838381811061185257611852612aab565b90506020020135612046565b61188383838381811061187357611873612aab565b9050602002013560026001611cad565b6118a683838381811061189857611898612aab565b905060200201356003611ea7565b806118b081612c51565b915050611835565b505050565b60006118c96004611f0b565b905090565b60006118c933611c2d565b6118e16122be565b60006118ec836104bd565b9050604051806060016040528061190285610634565b8152602001828152602001611917858461170a565b90529392505050565b611928611f83565b611930611ae5565b60005b818110156118b85761195f83838381811061195057611950612aab565b90506020020135600180611cad565b61198283838381811061197457611974612aab565b905060200201356002611ea7565b8061198c81612c51565b915050611933565b61199c611f83565b60005b818110156118b8576119bc83838381811061185257611852612aab565b6119e18383838181106119d1576119d1612aab565b9050602002013560036001611cad565b6119f683838381811061197457611974612aab565b80611a0081612c51565b91505061199f565b606081600001805480602002602001604051908101604052809291908181526020016000905b82821015611ada578382906000526020600020018054611a4d90612a00565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7990612a00565b8015611ac65780601f10611a9b57610100808354040283529160200191611ac6565b820191906000526020600020905b815481529060010190602001808311611aa957829003601f168201915b505050505081526020019060010190611a2e565b505050509050919050565b60005460408051637ac3c02f60e01b8152905133926201000090046001600160a01b031691637ac3c02f9160048083019260209291908290030181865afa158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b589190612a3a565b6001600160a01b031614611ba75760405162461bcd60e51b81526020600482015260166024820152752932b3b4b9ba393c9d102737ba10309039b4b3b732b960511b6044820152606401610579565b565b6000611bc1600080516020612d918339815191525490565b90506001600160a01b0381161580611be157506001600160a01b03811633145b6111a05760405162461bcd60e51b815260206004820152601a60248201527f446570656e64616e743a206e6f7420616e20696e6a6563746f720000000000006044820152606401610579565b60015460405163257e6bf960e21b81526001600160a01b03838116600483015260009283929116906395f9afe4906024016020604051808303816000875af1158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca19190612a3a565b90506104da8382611d8c565b801515826004811115611cc257611cc26123d4565b60008581526007602052604090206003015460ff166004811115611ce857611ce86123d4565b14146118b85760405162461bcd60e51b815260206004820152602160248201527f52656769737472793a20696e76616c696420776f726b666c6f772073746174756044820152607360f81b6064820152608401610579565b60005a611388811015611d5257600080fd5b611388810390508460408204820311611d6a57600080fd5b50823b611d7657600080fd5b60008083516020850160008789f1949350505050565b6001600160a01b03811615611dac57611da66004836120c2565b50611db9565b611db76004836120d7565b505b6001600160a01b0382811660008181526008602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527f812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba35491016105fd565b6000611e298284612a98565b905083811115611e365750825b80831115611e415750815b9392505050565b611e5181611291565b6111a05760405162461bcd60e51b815260206004820152602160248201527f52656769737472793a20776f726b666c6f7720646f6573206e6f7420657869736044820152601d60fa1b6064820152608401610579565b6000828152600760205260409020600301805482919060ff19166001836004811115611ed557611ed56123d4565b02179055507f873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa82826040516105fd929190612d66565b60006104da825490565b6000611e4183836120ec565b6000611f2d8383612116565b611f7b57825460018101845560008481526020902001611f4d8382612b92565b5082546040516001850190611f63908590612d2a565b908152604051908190036020019020555060016104da565b5060006104da565b600060029054906101000a90046001600160a01b03166001600160a01b031663b834f6fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190612a65565b611ba75760405162461bcd60e51b815260206004820152601a60248201527f52656769737472793a206e6f742061206d61696e20636861696e0000000000006044820152606401610579565b6000818152600760205260409020600101546001600160a01b031633146111a05760405162461bcd60e51b815260206004820152602a60248201527f52656769737472793a2073656e646572206973206e6f742074686520776f726b604482015269333637bb9037bbb732b960b11b6064820152608401610579565b6000611e41836001600160a01b038416612143565b6000611e41836001600160a01b03841661218a565b600082600001828154811061210357612103612aab565b9060005260206000200154905092915050565b6000826001018260405161212a9190612d2a565b9081526040519081900360200190205415159392505050565b6000818152600183016020526040812054611f7b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104da565b600081815260018301602052604081205480156122735760006121ae600183612d3c565b85549091506000906121c290600190612d3c565b90508181146122275760008660000182815481106121e2576121e2612aab565b906000526020600020015490508087600001848154811061220557612205612aab565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061223857612238612d7a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104da565b60009150506104da565b60405180608001604052806000815260200160006001600160a01b0316815260200160608152602001600060048111156122b9576122b96123d4565b905290565b60405180606001604052806122d161227d565b815260200160608152602001606081525090565b6000602082840312156122f757600080fd5b5035919050565b60005b83811015612319578181015183820152602001612301565b50506000910152565b6000815180845261233a8160208601602086016122fe565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156123a357603f19888603018452612391858351612322565b94509285019290850190600101612375565b5092979650505050505050565b6000602082840312156123c257600080fd5b813561ffff81168114611e4157600080fd5b634e487b7160e01b600052602160045260246000fd5b6005811061240857634e487b7160e01b600052602160045260246000fd5b9052565b8051825260018060a01b036020820151166020830152600060408201516080604085015261243d6080850182612322565b9050606083015161245160608601826123ea565b509392505050565b602081526000611e41602083018461240c565b6001600160a01b03811681146111a057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156124bf576124bf612481565b604052919050565b60006001600160401b038311156124e0576124e0612481565b6124f3601f8401601f1916602001612497565b905082815283838301111561250757600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561253157600080fd5b823561253c8161246c565b915060208301356001600160401b0381111561255757600080fd5b8301601f8101851361256857600080fd5b612577858235602084016124c7565b9150509250929050565b60006020828403121561259357600080fd5b8135611e418161246c565b60008083601f8401126125b057600080fd5b5081356001600160401b038111156125c757600080fd5b6020830191508360208260051b85010111156125e257600080fd5b9250929050565b600080602083850312156125fc57600080fd5b82356001600160401b0381111561261257600080fd5b61261e8582860161259e565b90969095509350505050565b60008060008060008060a0878903121561264357600080fd5b86359550602087013594506040870135935060608701356001600160401b038082111561266f57600080fd5b818901915089601f83011261268357600080fd5b81358181111561269257600080fd5b8a60208285010111156126a457600080fd5b60208301955080945050505060808701356126be8161246c565b809150509295509295509295565b600080604083850312156126df57600080fd5b50508035926020909101359150565b600081518084526020808501808196508360051b8101915082860160005b8581101561274c57828403895281516040815181875261272e82880182612322565b9288015196880196909652509885019893509084019060010161270c565b5091979650505050505050565b600081516060845261276e606085018261240c565b9050602080840151858303828701528281518085528385019150838160051b860101848401935060005b828110156127c657601f198783030184526127b4828651612322565b94860194938601939150600101612798565b506040880151955088810360408a01526127e081876126ee565b9998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156123a357603f19888603018452612830858351612759565b94509285019290850190600101612814565b602080825282518282018190526000919060409081850190868401855b8281101561274c57815180516001600160a01b039081168652908701511686850152928401929085019060010161285f565b600082601f8301126128a257600080fd5b611e41838335602085016124c7565b6000806000606084860312156128c657600080fd5b83356001600160401b038111156128dc57600080fd5b6128e886828701612891565b9660208601359650604090950135949350505050565b6000806040838503121561291157600080fd5b823591506020808401356001600160401b038082111561293057600080fd5b818601915086601f83011261294457600080fd5b81358181111561295657612956612481565b8060051b612965858201612497565b918252838101850191858101908a84111561297f57600080fd5b86860192505b838310156129bb5782358581111561299d5760008081fd5b6129ab8c89838a0101612891565b8352509186019190860190612985565b809750505050505050509250929050565b602081526000611e4160208301846126ee565b602081016104da82846123ea565b602081526000611e416020830184612759565b600181811c90821680612a1457607f821691505b602082108103612a3457634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612a4c57600080fd5b8151611e418161246c565b80151581146111a057600080fd5b600060208284031215612a7757600080fd5b8151611e4181612a57565b634e487b7160e01b600052601160045260246000fd5b808201808211156104da576104da612a82565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112612ad757600080fd5b9190910192915050565b600060208284031215612af357600080fd5b8135611e4181612a57565b6000808335601e19843603018112612b1557600080fd5b8301803591506001600160401b03821115612b2f57600080fd5b6020019150368190038213156125e257600080fd5b601f8211156118b857600081815260208120601f850160051c81016020861015612b6b5750805b601f850160051c820191505b81811015612b8a57828155600101612b77565b505050505050565b81516001600160401b03811115612bab57612bab612481565b612bbf81612bb98454612a00565b84612b44565b602080601f831160018114612bf45760008415612bdc5750858301515b600019600386901b1c1916600185901b178555612b8a565b600085815260208120601f198616915b82811015612c2357888601518255948401946001909101908401612c04565b5085821015612c415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201612c6357612c63612a82565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000612cbb606083018486612c6a565b9695505050505050565b600060208284031215612cd757600080fd5b5051919050565b600060208284031215612cf057600080fd5b815160038110611e4157600080fd5b8481526001600160a01b0384166020820152606060408201819052600090612cbb9083018486612c6a565b60008251612ad78184602087016122fe565b818103818111156104da576104da612a82565b600081612d5e57612d5e612a82565b506000190190565b82815260408101611e4160208301846123ea565b634e487b7160e01b600052603160045260246000fdfe3d1f25f1ac447e55e7fec744471c4dab1c6a2b6ffb897825f9ea3d2e8c9be583a26469706673582212205cdbceac0c0a4dba4ddb595acb7dd00cc52e9454a1473c6094997726749cdb8a64736f6c63430008120033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// GetBaseWorkflowInfo is a free data retrieval call binding the contract method 0x4b322560.
//
// Solidity: function getBaseWorkflowInfo(uint256 _workflowId) view returns((uint256,address,bytes,uint8))
func (_Registry *RegistryCaller) GetBaseWorkflowInfo(opts *bind.CallOpts, _workflowId *big.Int) (IRegistryBaseWorkflowInfo, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getBaseWorkflowInfo", _workflowId)

	if err != nil {
		return *new(IRegistryBaseWorkflowInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryBaseWorkflowInfo)).(*IRegistryBaseWorkflowInfo)

	return out0, err

}

// GetBaseWorkflowInfo is a free data retrieval call binding the contract method 0x4b322560.
//
// Solidity: function getBaseWorkflowInfo(uint256 _workflowId) view returns((uint256,address,bytes,uint8))
func (_Registry *RegistrySession) GetBaseWorkflowInfo(_workflowId *big.Int) (IRegistryBaseWorkflowInfo, error) {
	return _Registry.Contract.GetBaseWorkflowInfo(&_Registry.CallOpts, _workflowId)
}

// GetBaseWorkflowInfo is a free data retrieval call binding the contract method 0x4b322560.
//
// Solidity: function getBaseWorkflowInfo(uint256 _workflowId) view returns((uint256,address,bytes,uint8))
func (_Registry *RegistryCallerSession) GetBaseWorkflowInfo(_workflowId *big.Int) (IRegistryBaseWorkflowInfo, error) {
	return _Registry.Contract.GetBaseWorkflowInfo(&_Registry.CallOpts, _workflowId)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _userAddr) view returns(address)
func (_Registry *RegistryCaller) GetGateway(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getGateway", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _userAddr) view returns(address)
func (_Registry *RegistrySession) GetGateway(_userAddr common.Address) (common.Address, error) {
	return _Registry.Contract.GetGateway(&_Registry.CallOpts, _userAddr)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _userAddr) view returns(address)
func (_Registry *RegistryCallerSession) GetGateway(_userAddr common.Address) (common.Address, error) {
	return _Registry.Contract.GetGateway(&_Registry.CallOpts, _userAddr)
}

// GetGatewaysInfo is a free data retrieval call binding the contract method 0xa3190a36.
//
// Solidity: function getGatewaysInfo(uint256 _offset, uint256 _limit) view returns((address,address)[] _gatewaysInfoArr)
func (_Registry *RegistryCaller) GetGatewaysInfo(opts *bind.CallOpts, _offset *big.Int, _limit *big.Int) ([]IRegistryGatewayInfo, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getGatewaysInfo", _offset, _limit)

	if err != nil {
		return *new([]IRegistryGatewayInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRegistryGatewayInfo)).(*[]IRegistryGatewayInfo)

	return out0, err

}

// GetGatewaysInfo is a free data retrieval call binding the contract method 0xa3190a36.
//
// Solidity: function getGatewaysInfo(uint256 _offset, uint256 _limit) view returns((address,address)[] _gatewaysInfoArr)
func (_Registry *RegistrySession) GetGatewaysInfo(_offset *big.Int, _limit *big.Int) ([]IRegistryGatewayInfo, error) {
	return _Registry.Contract.GetGatewaysInfo(&_Registry.CallOpts, _offset, _limit)
}

// GetGatewaysInfo is a free data retrieval call binding the contract method 0xa3190a36.
//
// Solidity: function getGatewaysInfo(uint256 _offset, uint256 _limit) view returns((address,address)[] _gatewaysInfoArr)
func (_Registry *RegistryCallerSession) GetGatewaysInfo(_offset *big.Int, _limit *big.Int) ([]IRegistryGatewayInfo, error) {
	return _Registry.Contract.GetGatewaysInfo(&_Registry.CallOpts, _offset, _limit)
}

// GetInjector is a free data retrieval call binding the contract method 0x3e3b5b19.
//
// Solidity: function getInjector() view returns(address injector_)
func (_Registry *RegistryCaller) GetInjector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getInjector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInjector is a free data retrieval call binding the contract method 0x3e3b5b19.
//
// Solidity: function getInjector() view returns(address injector_)
func (_Registry *RegistrySession) GetInjector() (common.Address, error) {
	return _Registry.Contract.GetInjector(&_Registry.CallOpts)
}

// GetInjector is a free data retrieval call binding the contract method 0x3e3b5b19.
//
// Solidity: function getInjector() view returns(address injector_)
func (_Registry *RegistryCallerSession) GetInjector() (common.Address, error) {
	return _Registry.Contract.GetInjector(&_Registry.CallOpts)
}

// GetTotalGatewaysCount is a free data retrieval call binding the contract method 0xc4822319.
//
// Solidity: function getTotalGatewaysCount() view returns(uint256)
func (_Registry *RegistryCaller) GetTotalGatewaysCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getTotalGatewaysCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalGatewaysCount is a free data retrieval call binding the contract method 0xc4822319.
//
// Solidity: function getTotalGatewaysCount() view returns(uint256)
func (_Registry *RegistrySession) GetTotalGatewaysCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalGatewaysCount(&_Registry.CallOpts)
}

// GetTotalGatewaysCount is a free data retrieval call binding the contract method 0xc4822319.
//
// Solidity: function getTotalGatewaysCount() view returns(uint256)
func (_Registry *RegistryCallerSession) GetTotalGatewaysCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalGatewaysCount(&_Registry.CallOpts)
}

// GetTotalWorkflowsCount is a free data retrieval call binding the contract method 0xe1d1dffe.
//
// Solidity: function getTotalWorkflowsCount() view returns(uint256)
func (_Registry *RegistryCaller) GetTotalWorkflowsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getTotalWorkflowsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalWorkflowsCount is a free data retrieval call binding the contract method 0xe1d1dffe.
//
// Solidity: function getTotalWorkflowsCount() view returns(uint256)
func (_Registry *RegistrySession) GetTotalWorkflowsCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalWorkflowsCount(&_Registry.CallOpts)
}

// GetTotalWorkflowsCount is a free data retrieval call binding the contract method 0xe1d1dffe.
//
// Solidity: function getTotalWorkflowsCount() view returns(uint256)
func (_Registry *RegistryCallerSession) GetTotalWorkflowsCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalWorkflowsCount(&_Registry.CallOpts)
}

// GetWorkflowDepositAssetKeys is a free data retrieval call binding the contract method 0x0bdeec8f.
//
// Solidity: function getWorkflowDepositAssetKeys(uint256 _workflowId) view returns(string[])
func (_Registry *RegistryCaller) GetWorkflowDepositAssetKeys(opts *bind.CallOpts, _workflowId *big.Int) ([]string, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowDepositAssetKeys", _workflowId)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetWorkflowDepositAssetKeys is a free data retrieval call binding the contract method 0x0bdeec8f.
//
// Solidity: function getWorkflowDepositAssetKeys(uint256 _workflowId) view returns(string[])
func (_Registry *RegistrySession) GetWorkflowDepositAssetKeys(_workflowId *big.Int) ([]string, error) {
	return _Registry.Contract.GetWorkflowDepositAssetKeys(&_Registry.CallOpts, _workflowId)
}

// GetWorkflowDepositAssetKeys is a free data retrieval call binding the contract method 0x0bdeec8f.
//
// Solidity: function getWorkflowDepositAssetKeys(uint256 _workflowId) view returns(string[])
func (_Registry *RegistryCallerSession) GetWorkflowDepositAssetKeys(_workflowId *big.Int) ([]string, error) {
	return _Registry.Contract.GetWorkflowDepositAssetKeys(&_Registry.CallOpts, _workflowId)
}

// GetWorkflowDepositAssetsInfo is a free data retrieval call binding the contract method 0xc17fc3eb.
//
// Solidity: function getWorkflowDepositAssetsInfo(uint256 _workflowId, string[] _depositAssetKeys) view returns((string,uint256)[] _depositAssetsArr)
func (_Registry *RegistryCaller) GetWorkflowDepositAssetsInfo(opts *bind.CallOpts, _workflowId *big.Int, _depositAssetKeys []string) ([]IRegistryDepositAssetInfo, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowDepositAssetsInfo", _workflowId, _depositAssetKeys)

	if err != nil {
		return *new([]IRegistryDepositAssetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRegistryDepositAssetInfo)).(*[]IRegistryDepositAssetInfo)

	return out0, err

}

// GetWorkflowDepositAssetsInfo is a free data retrieval call binding the contract method 0xc17fc3eb.
//
// Solidity: function getWorkflowDepositAssetsInfo(uint256 _workflowId, string[] _depositAssetKeys) view returns((string,uint256)[] _depositAssetsArr)
func (_Registry *RegistrySession) GetWorkflowDepositAssetsInfo(_workflowId *big.Int, _depositAssetKeys []string) ([]IRegistryDepositAssetInfo, error) {
	return _Registry.Contract.GetWorkflowDepositAssetsInfo(&_Registry.CallOpts, _workflowId, _depositAssetKeys)
}

// GetWorkflowDepositAssetsInfo is a free data retrieval call binding the contract method 0xc17fc3eb.
//
// Solidity: function getWorkflowDepositAssetsInfo(uint256 _workflowId, string[] _depositAssetKeys) view returns((string,uint256)[] _depositAssetsArr)
func (_Registry *RegistryCallerSession) GetWorkflowDepositAssetsInfo(_workflowId *big.Int, _depositAssetKeys []string) ([]IRegistryDepositAssetInfo, error) {
	return _Registry.Contract.GetWorkflowDepositAssetsInfo(&_Registry.CallOpts, _workflowId, _depositAssetKeys)
}

// GetWorkflowInfo is a free data retrieval call binding the contract method 0xdf7459f0.
//
// Solidity: function getWorkflowInfo(uint256 _workflowId) view returns(((uint256,address,bytes,uint8),string[],(string,uint256)[]))
func (_Registry *RegistryCaller) GetWorkflowInfo(opts *bind.CallOpts, _workflowId *big.Int) (IRegistryWorkflowInfo, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowInfo", _workflowId)

	if err != nil {
		return *new(IRegistryWorkflowInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryWorkflowInfo)).(*IRegistryWorkflowInfo)

	return out0, err

}

// GetWorkflowInfo is a free data retrieval call binding the contract method 0xdf7459f0.
//
// Solidity: function getWorkflowInfo(uint256 _workflowId) view returns(((uint256,address,bytes,uint8),string[],(string,uint256)[]))
func (_Registry *RegistrySession) GetWorkflowInfo(_workflowId *big.Int) (IRegistryWorkflowInfo, error) {
	return _Registry.Contract.GetWorkflowInfo(&_Registry.CallOpts, _workflowId)
}

// GetWorkflowInfo is a free data retrieval call binding the contract method 0xdf7459f0.
//
// Solidity: function getWorkflowInfo(uint256 _workflowId) view returns(((uint256,address,bytes,uint8),string[],(string,uint256)[]))
func (_Registry *RegistryCallerSession) GetWorkflowInfo(_workflowId *big.Int) (IRegistryWorkflowInfo, error) {
	return _Registry.Contract.GetWorkflowInfo(&_Registry.CallOpts, _workflowId)
}

// GetWorkflowOwner is a free data retrieval call binding the contract method 0xd69cd275.
//
// Solidity: function getWorkflowOwner(uint256 _id) view returns(address)
func (_Registry *RegistryCaller) GetWorkflowOwner(opts *bind.CallOpts, _id *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowOwner", _id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWorkflowOwner is a free data retrieval call binding the contract method 0xd69cd275.
//
// Solidity: function getWorkflowOwner(uint256 _id) view returns(address)
func (_Registry *RegistrySession) GetWorkflowOwner(_id *big.Int) (common.Address, error) {
	return _Registry.Contract.GetWorkflowOwner(&_Registry.CallOpts, _id)
}

// GetWorkflowOwner is a free data retrieval call binding the contract method 0xd69cd275.
//
// Solidity: function getWorkflowOwner(uint256 _id) view returns(address)
func (_Registry *RegistryCallerSession) GetWorkflowOwner(_id *big.Int) (common.Address, error) {
	return _Registry.Contract.GetWorkflowOwner(&_Registry.CallOpts, _id)
}

// GetWorkflowStatus is a free data retrieval call binding the contract method 0xc5dc43a7.
//
// Solidity: function getWorkflowStatus(uint256 _id) view returns(uint8)
func (_Registry *RegistryCaller) GetWorkflowStatus(opts *bind.CallOpts, _id *big.Int) (uint8, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowStatus", _id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetWorkflowStatus is a free data retrieval call binding the contract method 0xc5dc43a7.
//
// Solidity: function getWorkflowStatus(uint256 _id) view returns(uint8)
func (_Registry *RegistrySession) GetWorkflowStatus(_id *big.Int) (uint8, error) {
	return _Registry.Contract.GetWorkflowStatus(&_Registry.CallOpts, _id)
}

// GetWorkflowStatus is a free data retrieval call binding the contract method 0xc5dc43a7.
//
// Solidity: function getWorkflowStatus(uint256 _id) view returns(uint8)
func (_Registry *RegistryCallerSession) GetWorkflowStatus(_id *big.Int) (uint8, error) {
	return _Registry.Contract.GetWorkflowStatus(&_Registry.CallOpts, _id)
}

// GetWorkflowsInfo is a free data retrieval call binding the contract method 0x95f5dae4.
//
// Solidity: function getWorkflowsInfo(uint256 _offset, uint256 _limit) view returns(((uint256,address,bytes,uint8),string[],(string,uint256)[])[] _workflowsInfoArr)
func (_Registry *RegistryCaller) GetWorkflowsInfo(opts *bind.CallOpts, _offset *big.Int, _limit *big.Int) ([]IRegistryWorkflowInfo, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowsInfo", _offset, _limit)

	if err != nil {
		return *new([]IRegistryWorkflowInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRegistryWorkflowInfo)).(*[]IRegistryWorkflowInfo)

	return out0, err

}

// GetWorkflowsInfo is a free data retrieval call binding the contract method 0x95f5dae4.
//
// Solidity: function getWorkflowsInfo(uint256 _offset, uint256 _limit) view returns(((uint256,address,bytes,uint8),string[],(string,uint256)[])[] _workflowsInfoArr)
func (_Registry *RegistrySession) GetWorkflowsInfo(_offset *big.Int, _limit *big.Int) ([]IRegistryWorkflowInfo, error) {
	return _Registry.Contract.GetWorkflowsInfo(&_Registry.CallOpts, _offset, _limit)
}

// GetWorkflowsInfo is a free data retrieval call binding the contract method 0x95f5dae4.
//
// Solidity: function getWorkflowsInfo(uint256 _offset, uint256 _limit) view returns(((uint256,address,bytes,uint8),string[],(string,uint256)[])[] _workflowsInfoArr)
func (_Registry *RegistryCallerSession) GetWorkflowsInfo(_offset *big.Int, _limit *big.Int) ([]IRegistryWorkflowInfo, error) {
	return _Registry.Contract.GetWorkflowsInfo(&_Registry.CallOpts, _offset, _limit)
}

// IsWorkflowExist is a free data retrieval call binding the contract method 0x9b2bfaa3.
//
// Solidity: function isWorkflowExist(uint256 _id) view returns(bool)
func (_Registry *RegistryCaller) IsWorkflowExist(opts *bind.CallOpts, _id *big.Int) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isWorkflowExist", _id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWorkflowExist is a free data retrieval call binding the contract method 0x9b2bfaa3.
//
// Solidity: function isWorkflowExist(uint256 _id) view returns(bool)
func (_Registry *RegistrySession) IsWorkflowExist(_id *big.Int) (bool, error) {
	return _Registry.Contract.IsWorkflowExist(&_Registry.CallOpts, _id)
}

// IsWorkflowExist is a free data retrieval call binding the contract method 0x9b2bfaa3.
//
// Solidity: function isWorkflowExist(uint256 _id) view returns(bool)
func (_Registry *RegistryCallerSession) IsWorkflowExist(_id *big.Int) (bool, error) {
	return _Registry.Contract.IsWorkflowExist(&_Registry.CallOpts, _id)
}

// MaxWorkflowsPerAccount is a free data retrieval call binding the contract method 0xabad5c1a.
//
// Solidity: function maxWorkflowsPerAccount() view returns(uint16)
func (_Registry *RegistryCaller) MaxWorkflowsPerAccount(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "maxWorkflowsPerAccount")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MaxWorkflowsPerAccount is a free data retrieval call binding the contract method 0xabad5c1a.
//
// Solidity: function maxWorkflowsPerAccount() view returns(uint16)
func (_Registry *RegistrySession) MaxWorkflowsPerAccount() (uint16, error) {
	return _Registry.Contract.MaxWorkflowsPerAccount(&_Registry.CallOpts)
}

// MaxWorkflowsPerAccount is a free data retrieval call binding the contract method 0xabad5c1a.
//
// Solidity: function maxWorkflowsPerAccount() view returns(uint16)
func (_Registry *RegistryCallerSession) MaxWorkflowsPerAccount() (uint16, error) {
	return _Registry.Contract.MaxWorkflowsPerAccount(&_Registry.CallOpts)
}

// WorkflowsPerAddress is a free data retrieval call binding the contract method 0x6b699545.
//
// Solidity: function workflowsPerAddress(address ) view returns(uint256)
func (_Registry *RegistryCaller) WorkflowsPerAddress(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "workflowsPerAddress", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WorkflowsPerAddress is a free data retrieval call binding the contract method 0x6b699545.
//
// Solidity: function workflowsPerAddress(address ) view returns(uint256)
func (_Registry *RegistrySession) WorkflowsPerAddress(arg0 common.Address) (*big.Int, error) {
	return _Registry.Contract.WorkflowsPerAddress(&_Registry.CallOpts, arg0)
}

// WorkflowsPerAddress is a free data retrieval call binding the contract method 0x6b699545.
//
// Solidity: function workflowsPerAddress(address ) view returns(uint256)
func (_Registry *RegistryCallerSession) WorkflowsPerAddress(arg0 common.Address) (*big.Int, error) {
	return _Registry.Contract.WorkflowsPerAddress(&_Registry.CallOpts, arg0)
}

// ActivateWorkflows is a paid mutator transaction binding the contract method 0xeeed0b18.
//
// Solidity: function activateWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) ActivateWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "activateWorkflows", _workflowIds)
}

// ActivateWorkflows is a paid mutator transaction binding the contract method 0xeeed0b18.
//
// Solidity: function activateWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) ActivateWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// ActivateWorkflows is a paid mutator transaction binding the contract method 0xeeed0b18.
//
// Solidity: function activateWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) ActivateWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// CancelWorkflows is a paid mutator transaction binding the contract method 0xa3089ffe.
//
// Solidity: function cancelWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) CancelWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "cancelWorkflows", _workflowIds)
}

// CancelWorkflows is a paid mutator transaction binding the contract method 0xa3089ffe.
//
// Solidity: function cancelWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) CancelWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// CancelWorkflows is a paid mutator transaction binding the contract method 0xa3089ffe.
//
// Solidity: function cancelWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) CancelWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// DeployAndSetGateway is a paid mutator transaction binding the contract method 0xc5fd64d8.
//
// Solidity: function deployAndSetGateway() returns(address)
func (_Registry *RegistryTransactor) DeployAndSetGateway(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deployAndSetGateway")
}

// DeployAndSetGateway is a paid mutator transaction binding the contract method 0xc5fd64d8.
//
// Solidity: function deployAndSetGateway() returns(address)
func (_Registry *RegistrySession) DeployAndSetGateway() (*types.Transaction, error) {
	return _Registry.Contract.DeployAndSetGateway(&_Registry.TransactOpts)
}

// DeployAndSetGateway is a paid mutator transaction binding the contract method 0xc5fd64d8.
//
// Solidity: function deployAndSetGateway() returns(address)
func (_Registry *RegistryTransactorSession) DeployAndSetGateway() (*types.Transaction, error) {
	return _Registry.Contract.DeployAndSetGateway(&_Registry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x13750946.
//
// Solidity: function initialize(uint16 _maxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _maxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _maxWorkflowsPerAccount)
}

// Initialize is a paid mutator transaction binding the contract method 0x13750946.
//
// Solidity: function initialize(uint16 _maxWorkflowsPerAccount) returns()
func (_Registry *RegistrySession) Initialize(_maxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _maxWorkflowsPerAccount)
}

// Initialize is a paid mutator transaction binding the contract method 0x13750946.
//
// Solidity: function initialize(uint16 _maxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactorSession) Initialize(_maxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _maxWorkflowsPerAccount)
}

// PauseWorkflows is a paid mutator transaction binding the contract method 0xc1f9138c.
//
// Solidity: function pauseWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) PauseWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "pauseWorkflows", _workflowIds)
}

// PauseWorkflows is a paid mutator transaction binding the contract method 0xc1f9138c.
//
// Solidity: function pauseWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) PauseWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// PauseWorkflows is a paid mutator transaction binding the contract method 0xc1f9138c.
//
// Solidity: function pauseWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) PauseWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// Perform is a paid mutator transaction binding the contract method 0x7a03f9b5.
//
// Solidity: function perform(uint256 _workflowId, uint256 _workflowExecutionId, uint256 _gasAmount, bytes _data, address _target) returns()
func (_Registry *RegistryTransactor) Perform(opts *bind.TransactOpts, _workflowId *big.Int, _workflowExecutionId *big.Int, _gasAmount *big.Int, _data []byte, _target common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "perform", _workflowId, _workflowExecutionId, _gasAmount, _data, _target)
}

// Perform is a paid mutator transaction binding the contract method 0x7a03f9b5.
//
// Solidity: function perform(uint256 _workflowId, uint256 _workflowExecutionId, uint256 _gasAmount, bytes _data, address _target) returns()
func (_Registry *RegistrySession) Perform(_workflowId *big.Int, _workflowExecutionId *big.Int, _gasAmount *big.Int, _data []byte, _target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, _workflowId, _workflowExecutionId, _gasAmount, _data, _target)
}

// Perform is a paid mutator transaction binding the contract method 0x7a03f9b5.
//
// Solidity: function perform(uint256 _workflowId, uint256 _workflowExecutionId, uint256 _gasAmount, bytes _data, address _target) returns()
func (_Registry *RegistryTransactorSession) Perform(_workflowId *big.Int, _workflowExecutionId *big.Int, _gasAmount *big.Int, _data []byte, _target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, _workflowId, _workflowExecutionId, _gasAmount, _data, _target)
}

// RegisterWorkflows is a paid mutator transaction binding the contract method 0x74e90f31.
//
// Solidity: function registerWorkflows((uint256,address,bytes,bool,bool)[] _registerWorkflowInfoArr) returns()
func (_Registry *RegistryTransactor) RegisterWorkflows(opts *bind.TransactOpts, _registerWorkflowInfoArr []IRegistryRegisterWorkflowInfo) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerWorkflows", _registerWorkflowInfoArr)
}

// RegisterWorkflows is a paid mutator transaction binding the contract method 0x74e90f31.
//
// Solidity: function registerWorkflows((uint256,address,bytes,bool,bool)[] _registerWorkflowInfoArr) returns()
func (_Registry *RegistrySession) RegisterWorkflows(_registerWorkflowInfoArr []IRegistryRegisterWorkflowInfo) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflows(&_Registry.TransactOpts, _registerWorkflowInfoArr)
}

// RegisterWorkflows is a paid mutator transaction binding the contract method 0x74e90f31.
//
// Solidity: function registerWorkflows((uint256,address,bytes,bool,bool)[] _registerWorkflowInfoArr) returns()
func (_Registry *RegistryTransactorSession) RegisterWorkflows(_registerWorkflowInfoArr []IRegistryRegisterWorkflowInfo) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflows(&_Registry.TransactOpts, _registerWorkflowInfoArr)
}

// ResumeWorkflows is a paid mutator transaction binding the contract method 0xfdf1641f.
//
// Solidity: function resumeWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) ResumeWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "resumeWorkflows", _workflowIds)
}

// ResumeWorkflows is a paid mutator transaction binding the contract method 0xfdf1641f.
//
// Solidity: function resumeWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) ResumeWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// ResumeWorkflows is a paid mutator transaction binding the contract method 0xfdf1641f.
//
// Solidity: function resumeWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) ResumeWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// SetDependencies is a paid mutator transaction binding the contract method 0x69130451.
//
// Solidity: function setDependencies(address _contractsRegistryAddr, bytes ) returns()
func (_Registry *RegistryTransactor) SetDependencies(opts *bind.TransactOpts, _contractsRegistryAddr common.Address, arg1 []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setDependencies", _contractsRegistryAddr, arg1)
}

// SetDependencies is a paid mutator transaction binding the contract method 0x69130451.
//
// Solidity: function setDependencies(address _contractsRegistryAddr, bytes ) returns()
func (_Registry *RegistrySession) SetDependencies(_contractsRegistryAddr common.Address, arg1 []byte) (*types.Transaction, error) {
	return _Registry.Contract.SetDependencies(&_Registry.TransactOpts, _contractsRegistryAddr, arg1)
}

// SetDependencies is a paid mutator transaction binding the contract method 0x69130451.
//
// Solidity: function setDependencies(address _contractsRegistryAddr, bytes ) returns()
func (_Registry *RegistryTransactorSession) SetDependencies(_contractsRegistryAddr common.Address, arg1 []byte) (*types.Transaction, error) {
	return _Registry.Contract.SetDependencies(&_Registry.TransactOpts, _contractsRegistryAddr, arg1)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address _gateway) returns()
func (_Registry *RegistryTransactor) SetGateway(opts *bind.TransactOpts, _gateway common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setGateway", _gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address _gateway) returns()
func (_Registry *RegistrySession) SetGateway(_gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, _gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address _gateway) returns()
func (_Registry *RegistryTransactorSession) SetGateway(_gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, _gateway)
}

// SetInjector is a paid mutator transaction binding the contract method 0x8cb941cc.
//
// Solidity: function setInjector(address injector_) returns()
func (_Registry *RegistryTransactor) SetInjector(opts *bind.TransactOpts, injector_ common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setInjector", injector_)
}

// SetInjector is a paid mutator transaction binding the contract method 0x8cb941cc.
//
// Solidity: function setInjector(address injector_) returns()
func (_Registry *RegistrySession) SetInjector(injector_ common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetInjector(&_Registry.TransactOpts, injector_)
}

// SetInjector is a paid mutator transaction binding the contract method 0x8cb941cc.
//
// Solidity: function setInjector(address injector_) returns()
func (_Registry *RegistryTransactorSession) SetInjector(injector_ common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetInjector(&_Registry.TransactOpts, injector_)
}

// SetMaxWorkflowsPerAccount is a paid mutator transaction binding the contract method 0x44ab987d.
//
// Solidity: function setMaxWorkflowsPerAccount(uint16 _newMaxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactor) SetMaxWorkflowsPerAccount(opts *bind.TransactOpts, _newMaxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setMaxWorkflowsPerAccount", _newMaxWorkflowsPerAccount)
}

// SetMaxWorkflowsPerAccount is a paid mutator transaction binding the contract method 0x44ab987d.
//
// Solidity: function setMaxWorkflowsPerAccount(uint16 _newMaxWorkflowsPerAccount) returns()
func (_Registry *RegistrySession) SetMaxWorkflowsPerAccount(_newMaxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.SetMaxWorkflowsPerAccount(&_Registry.TransactOpts, _newMaxWorkflowsPerAccount)
}

// SetMaxWorkflowsPerAccount is a paid mutator transaction binding the contract method 0x44ab987d.
//
// Solidity: function setMaxWorkflowsPerAccount(uint16 _newMaxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactorSession) SetMaxWorkflowsPerAccount(_newMaxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.SetMaxWorkflowsPerAccount(&_Registry.TransactOpts, _newMaxWorkflowsPerAccount)
}

// UpdateWorkflowTotalSpent is a paid mutator transaction binding the contract method 0xae09340f.
//
// Solidity: function updateWorkflowTotalSpent(string _depositAssetKey, uint256 _workflowId, uint256 _workflowExecutionAmount) returns()
func (_Registry *RegistryTransactor) UpdateWorkflowTotalSpent(opts *bind.TransactOpts, _depositAssetKey string, _workflowId *big.Int, _workflowExecutionAmount *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "updateWorkflowTotalSpent", _depositAssetKey, _workflowId, _workflowExecutionAmount)
}

// UpdateWorkflowTotalSpent is a paid mutator transaction binding the contract method 0xae09340f.
//
// Solidity: function updateWorkflowTotalSpent(string _depositAssetKey, uint256 _workflowId, uint256 _workflowExecutionAmount) returns()
func (_Registry *RegistrySession) UpdateWorkflowTotalSpent(_depositAssetKey string, _workflowId *big.Int, _workflowExecutionAmount *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.UpdateWorkflowTotalSpent(&_Registry.TransactOpts, _depositAssetKey, _workflowId, _workflowExecutionAmount)
}

// UpdateWorkflowTotalSpent is a paid mutator transaction binding the contract method 0xae09340f.
//
// Solidity: function updateWorkflowTotalSpent(string _depositAssetKey, uint256 _workflowId, uint256 _workflowExecutionAmount) returns()
func (_Registry *RegistryTransactorSession) UpdateWorkflowTotalSpent(_depositAssetKey string, _workflowId *big.Int, _workflowExecutionAmount *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.UpdateWorkflowTotalSpent(&_Registry.TransactOpts, _depositAssetKey, _workflowId, _workflowExecutionAmount)
}

// RegistryGatewaySetIterator is returned from FilterGatewaySet and is used to iterate over the raw logs and unpacked data for GatewaySet events raised by the Registry contract.
type RegistryGatewaySetIterator struct {
	Event *RegistryGatewaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryGatewaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryGatewaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryGatewaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryGatewaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryGatewaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryGatewaySet represents a GatewaySet event raised by the Registry contract.
type RegistryGatewaySet struct {
	Owner   common.Address
	Gateway common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGatewaySet is a free log retrieval operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) FilterGatewaySet(opts *bind.FilterOpts) (*RegistryGatewaySetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return &RegistryGatewaySetIterator{contract: _Registry.contract, event: "GatewaySet", logs: logs, sub: sub}, nil
}

// WatchGatewaySet is a free log subscription operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) WatchGatewaySet(opts *bind.WatchOpts, sink chan<- *RegistryGatewaySet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryGatewaySet)
				if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGatewaySet is a log parse operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) ParseGatewaySet(log types.Log) (*RegistryGatewaySet, error) {
	event := new(RegistryGatewaySet)
	if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Registry contract.
type RegistryInitializedIterator struct {
	Event *RegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInitialized represents a Initialized event raised by the Registry contract.
type RegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*RegistryInitializedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RegistryInitializedIterator{contract: _Registry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInitialized)
				if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) ParseInitialized(log types.Log) (*RegistryInitialized, error) {
	event := new(RegistryInitialized)
	if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPerformanceIterator is returned from FilterPerformance and is used to iterate over the raw logs and unpacked data for Performance events raised by the Registry contract.
type RegistryPerformanceIterator struct {
	Event *RegistryPerformance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPerformanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPerformance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPerformance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPerformanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPerformanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPerformance represents a Performance event raised by the Registry contract.
type RegistryPerformance struct {
	WorkflowId          *big.Int
	WorkflowExecutionId *big.Int
	Success             bool
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterPerformance is a free log retrieval operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 workflowId, uint256 workflowExecutionId, bool success)
func (_Registry *RegistryFilterer) FilterPerformance(opts *bind.FilterOpts) (*RegistryPerformanceIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return &RegistryPerformanceIterator{contract: _Registry.contract, event: "Performance", logs: logs, sub: sub}, nil
}

// WatchPerformance is a free log subscription operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 workflowId, uint256 workflowExecutionId, bool success)
func (_Registry *RegistryFilterer) WatchPerformance(opts *bind.WatchOpts, sink chan<- *RegistryPerformance) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPerformance)
				if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePerformance is a log parse operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 workflowId, uint256 workflowExecutionId, bool success)
func (_Registry *RegistryFilterer) ParsePerformance(log types.Log) (*RegistryPerformance, error) {
	event := new(RegistryPerformance)
	if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowRegisteredIterator is returned from FilterWorkflowRegistered and is used to iterate over the raw logs and unpacked data for WorkflowRegistered events raised by the Registry contract.
type RegistryWorkflowRegisteredIterator struct {
	Event *RegistryWorkflowRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowRegistered represents a WorkflowRegistered event raised by the Registry contract.
type RegistryWorkflowRegistered struct {
	Owner common.Address
	Id    *big.Int
	Hash  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWorkflowRegistered is a free log retrieval operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) FilterWorkflowRegistered(opts *bind.FilterOpts) (*RegistryWorkflowRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowRegisteredIterator{contract: _Registry.contract, event: "WorkflowRegistered", logs: logs, sub: sub}, nil
}

// WatchWorkflowRegistered is a free log subscription operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) WatchWorkflowRegistered(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowRegistered)
				if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowRegistered is a log parse operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) ParseWorkflowRegistered(log types.Log) (*RegistryWorkflowRegistered, error) {
	event := new(RegistryWorkflowRegistered)
	if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowStatusChangedIterator is returned from FilterWorkflowStatusChanged and is used to iterate over the raw logs and unpacked data for WorkflowStatusChanged events raised by the Registry contract.
type RegistryWorkflowStatusChangedIterator struct {
	Event *RegistryWorkflowStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowStatusChanged represents a WorkflowStatusChanged event raised by the Registry contract.
type RegistryWorkflowStatusChanged struct {
	Id     *big.Int
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkflowStatusChanged is a free log retrieval operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) FilterWorkflowStatusChanged(opts *bind.FilterOpts) (*RegistryWorkflowStatusChangedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowStatusChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowStatusChangedIterator{contract: _Registry.contract, event: "WorkflowStatusChanged", logs: logs, sub: sub}, nil
}

// WatchWorkflowStatusChanged is a free log subscription operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) WatchWorkflowStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowStatusChanged) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowStatusChanged)
				if err := _Registry.contract.UnpackLog(event, "WorkflowStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowStatusChanged is a log parse operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) ParseWorkflowStatusChanged(log types.Log) (*RegistryWorkflowStatusChanged, error) {
	event := new(RegistryWorkflowStatusChanged)
	if err := _Registry.contract.UnpackLog(event, "WorkflowStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
