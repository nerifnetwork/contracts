// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRegistryGatewayInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryGatewayInfo struct {
	GatewayOwner common.Address
	Gateway      common.Address
}

// IRegistryRegisterWorkflowInfo is an auto generated low-level Go binding around an user-defined struct.
type IRegistryRegisterWorkflowInfo struct {
	Id             *big.Int
	WorkflowOwner  common.Address
	Hash           []byte
	RequireGateway bool
	DeployGateway  bool
}

// IRegistryWorkflow is an auto generated low-level Go binding around an user-defined struct.
type IRegistryWorkflow struct {
	Id         *big.Int
	Owner      common.Address
	Hash       []byte
	Status     uint8
	TotalSpent *big.Int
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"GatewaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workflowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workflowExecutionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Performance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"WorkflowRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"activateWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billingManager\",\"outputs\":[{\"internalType\":\"contractIBillingManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployAndSetGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayFactory\",\"outputs\":[{\"internalType\":\"contractIGatewayFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getGatewaysInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"gatewayOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"internalType\":\"structIRegistry.GatewayInfo[]\",\"name\":\"_gatewaysInfoArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalGatewaysCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWorkflowsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWorkflow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structIRegistry.Workflow\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWorkflowOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWorkflowStatus\",\"outputs\":[{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getWorkflows\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"enumIRegistry.WorkflowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"structIRegistry.Workflow[]\",\"name\":\"_workflowsArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMainChain\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_signerGetterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatewayFactoryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billingManagerAddr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_maxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isWorkflowExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWorkflowsPerAccount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"pauseWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_workflowExecutionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"workflowOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"requireGateway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"deployGateway\",\"type\":\"bool\"}],\"internalType\":\"structIRegistry.RegisterWorkflowInfo[]\",\"name\":\"_registerWorkflowInfoArr\",\"type\":\"tuple[]\"}],\"name\":\"registerWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_workflowIds\",\"type\":\"uint256[]\"}],\"name\":\"resumeWorkflows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGatewayFactory\",\"type\":\"address\"}],\"name\":\"setGatewayFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxWorkflowsPerAccount\",\"type\":\"uint16\"}],\"name\":\"setMaxWorkflowsPerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerGetter\",\"outputs\":[{\"internalType\":\"contractISignerAddress\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workflowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_workflowExecutionAmount\",\"type\":\"uint256\"}],\"name\":\"updateWorkflowTotalSpent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workflowsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// BillingManager is a free data retrieval call binding the contract method 0x01e6f372.
//
// Solidity: function billingManager() view returns(address)
func (_Registry *RegistryCaller) BillingManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "billingManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BillingManager is a free data retrieval call binding the contract method 0x01e6f372.
//
// Solidity: function billingManager() view returns(address)
func (_Registry *RegistrySession) BillingManager() (common.Address, error) {
	return _Registry.Contract.BillingManager(&_Registry.CallOpts)
}

// BillingManager is a free data retrieval call binding the contract method 0x01e6f372.
//
// Solidity: function billingManager() view returns(address)
func (_Registry *RegistryCallerSession) BillingManager() (common.Address, error) {
	return _Registry.Contract.BillingManager(&_Registry.CallOpts)
}

// GatewayFactory is a free data retrieval call binding the contract method 0xeefcce01.
//
// Solidity: function gatewayFactory() view returns(address)
func (_Registry *RegistryCaller) GatewayFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "gatewayFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GatewayFactory is a free data retrieval call binding the contract method 0xeefcce01.
//
// Solidity: function gatewayFactory() view returns(address)
func (_Registry *RegistrySession) GatewayFactory() (common.Address, error) {
	return _Registry.Contract.GatewayFactory(&_Registry.CallOpts)
}

// GatewayFactory is a free data retrieval call binding the contract method 0xeefcce01.
//
// Solidity: function gatewayFactory() view returns(address)
func (_Registry *RegistryCallerSession) GatewayFactory() (common.Address, error) {
	return _Registry.Contract.GatewayFactory(&_Registry.CallOpts)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _userAddr) view returns(address)
func (_Registry *RegistryCaller) GetGateway(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getGateway", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _userAddr) view returns(address)
func (_Registry *RegistrySession) GetGateway(_userAddr common.Address) (common.Address, error) {
	return _Registry.Contract.GetGateway(&_Registry.CallOpts, _userAddr)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _userAddr) view returns(address)
func (_Registry *RegistryCallerSession) GetGateway(_userAddr common.Address) (common.Address, error) {
	return _Registry.Contract.GetGateway(&_Registry.CallOpts, _userAddr)
}

// GetGatewaysInfo is a free data retrieval call binding the contract method 0xa3190a36.
//
// Solidity: function getGatewaysInfo(uint256 _offset, uint256 _limit) view returns((address,address)[] _gatewaysInfoArr)
func (_Registry *RegistryCaller) GetGatewaysInfo(opts *bind.CallOpts, _offset *big.Int, _limit *big.Int) ([]IRegistryGatewayInfo, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getGatewaysInfo", _offset, _limit)

	if err != nil {
		return *new([]IRegistryGatewayInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRegistryGatewayInfo)).(*[]IRegistryGatewayInfo)

	return out0, err

}

// GetGatewaysInfo is a free data retrieval call binding the contract method 0xa3190a36.
//
// Solidity: function getGatewaysInfo(uint256 _offset, uint256 _limit) view returns((address,address)[] _gatewaysInfoArr)
func (_Registry *RegistrySession) GetGatewaysInfo(_offset *big.Int, _limit *big.Int) ([]IRegistryGatewayInfo, error) {
	return _Registry.Contract.GetGatewaysInfo(&_Registry.CallOpts, _offset, _limit)
}

// GetGatewaysInfo is a free data retrieval call binding the contract method 0xa3190a36.
//
// Solidity: function getGatewaysInfo(uint256 _offset, uint256 _limit) view returns((address,address)[] _gatewaysInfoArr)
func (_Registry *RegistryCallerSession) GetGatewaysInfo(_offset *big.Int, _limit *big.Int) ([]IRegistryGatewayInfo, error) {
	return _Registry.Contract.GetGatewaysInfo(&_Registry.CallOpts, _offset, _limit)
}

// GetTotalGatewaysCount is a free data retrieval call binding the contract method 0xc4822319.
//
// Solidity: function getTotalGatewaysCount() view returns(uint256)
func (_Registry *RegistryCaller) GetTotalGatewaysCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getTotalGatewaysCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalGatewaysCount is a free data retrieval call binding the contract method 0xc4822319.
//
// Solidity: function getTotalGatewaysCount() view returns(uint256)
func (_Registry *RegistrySession) GetTotalGatewaysCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalGatewaysCount(&_Registry.CallOpts)
}

// GetTotalGatewaysCount is a free data retrieval call binding the contract method 0xc4822319.
//
// Solidity: function getTotalGatewaysCount() view returns(uint256)
func (_Registry *RegistryCallerSession) GetTotalGatewaysCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalGatewaysCount(&_Registry.CallOpts)
}

// GetTotalWorkflowsCount is a free data retrieval call binding the contract method 0xe1d1dffe.
//
// Solidity: function getTotalWorkflowsCount() view returns(uint256)
func (_Registry *RegistryCaller) GetTotalWorkflowsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getTotalWorkflowsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalWorkflowsCount is a free data retrieval call binding the contract method 0xe1d1dffe.
//
// Solidity: function getTotalWorkflowsCount() view returns(uint256)
func (_Registry *RegistrySession) GetTotalWorkflowsCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalWorkflowsCount(&_Registry.CallOpts)
}

// GetTotalWorkflowsCount is a free data retrieval call binding the contract method 0xe1d1dffe.
//
// Solidity: function getTotalWorkflowsCount() view returns(uint256)
func (_Registry *RegistryCallerSession) GetTotalWorkflowsCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalWorkflowsCount(&_Registry.CallOpts)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 _id) view returns((uint256,address,bytes,uint8,uint256))
func (_Registry *RegistryCaller) GetWorkflow(opts *bind.CallOpts, _id *big.Int) (IRegistryWorkflow, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflow", _id)

	if err != nil {
		return *new(IRegistryWorkflow), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryWorkflow)).(*IRegistryWorkflow)

	return out0, err

}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 _id) view returns((uint256,address,bytes,uint8,uint256))
func (_Registry *RegistrySession) GetWorkflow(_id *big.Int) (IRegistryWorkflow, error) {
	return _Registry.Contract.GetWorkflow(&_Registry.CallOpts, _id)
}

// GetWorkflow is a free data retrieval call binding the contract method 0xeec7b03c.
//
// Solidity: function getWorkflow(uint256 _id) view returns((uint256,address,bytes,uint8,uint256))
func (_Registry *RegistryCallerSession) GetWorkflow(_id *big.Int) (IRegistryWorkflow, error) {
	return _Registry.Contract.GetWorkflow(&_Registry.CallOpts, _id)
}

// GetWorkflowOwner is a free data retrieval call binding the contract method 0xd69cd275.
//
// Solidity: function getWorkflowOwner(uint256 _id) view returns(address)
func (_Registry *RegistryCaller) GetWorkflowOwner(opts *bind.CallOpts, _id *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowOwner", _id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWorkflowOwner is a free data retrieval call binding the contract method 0xd69cd275.
//
// Solidity: function getWorkflowOwner(uint256 _id) view returns(address)
func (_Registry *RegistrySession) GetWorkflowOwner(_id *big.Int) (common.Address, error) {
	return _Registry.Contract.GetWorkflowOwner(&_Registry.CallOpts, _id)
}

// GetWorkflowOwner is a free data retrieval call binding the contract method 0xd69cd275.
//
// Solidity: function getWorkflowOwner(uint256 _id) view returns(address)
func (_Registry *RegistryCallerSession) GetWorkflowOwner(_id *big.Int) (common.Address, error) {
	return _Registry.Contract.GetWorkflowOwner(&_Registry.CallOpts, _id)
}

// GetWorkflowStatus is a free data retrieval call binding the contract method 0xc5dc43a7.
//
// Solidity: function getWorkflowStatus(uint256 _id) view returns(uint8)
func (_Registry *RegistryCaller) GetWorkflowStatus(opts *bind.CallOpts, _id *big.Int) (uint8, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflowStatus", _id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetWorkflowStatus is a free data retrieval call binding the contract method 0xc5dc43a7.
//
// Solidity: function getWorkflowStatus(uint256 _id) view returns(uint8)
func (_Registry *RegistrySession) GetWorkflowStatus(_id *big.Int) (uint8, error) {
	return _Registry.Contract.GetWorkflowStatus(&_Registry.CallOpts, _id)
}

// GetWorkflowStatus is a free data retrieval call binding the contract method 0xc5dc43a7.
//
// Solidity: function getWorkflowStatus(uint256 _id) view returns(uint8)
func (_Registry *RegistryCallerSession) GetWorkflowStatus(_id *big.Int) (uint8, error) {
	return _Registry.Contract.GetWorkflowStatus(&_Registry.CallOpts, _id)
}

// GetWorkflows is a free data retrieval call binding the contract method 0x32c902cf.
//
// Solidity: function getWorkflows(uint256 _offset, uint256 _limit) view returns((uint256,address,bytes,uint8,uint256)[] _workflowsArr)
func (_Registry *RegistryCaller) GetWorkflows(opts *bind.CallOpts, _offset *big.Int, _limit *big.Int) ([]IRegistryWorkflow, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getWorkflows", _offset, _limit)

	if err != nil {
		return *new([]IRegistryWorkflow), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRegistryWorkflow)).(*[]IRegistryWorkflow)

	return out0, err

}

// GetWorkflows is a free data retrieval call binding the contract method 0x32c902cf.
//
// Solidity: function getWorkflows(uint256 _offset, uint256 _limit) view returns((uint256,address,bytes,uint8,uint256)[] _workflowsArr)
func (_Registry *RegistrySession) GetWorkflows(_offset *big.Int, _limit *big.Int) ([]IRegistryWorkflow, error) {
	return _Registry.Contract.GetWorkflows(&_Registry.CallOpts, _offset, _limit)
}

// GetWorkflows is a free data retrieval call binding the contract method 0x32c902cf.
//
// Solidity: function getWorkflows(uint256 _offset, uint256 _limit) view returns((uint256,address,bytes,uint8,uint256)[] _workflowsArr)
func (_Registry *RegistryCallerSession) GetWorkflows(_offset *big.Int, _limit *big.Int) ([]IRegistryWorkflow, error) {
	return _Registry.Contract.GetWorkflows(&_Registry.CallOpts, _offset, _limit)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistryCaller) IsMainChain(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isMainChain")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistrySession) IsMainChain() (bool, error) {
	return _Registry.Contract.IsMainChain(&_Registry.CallOpts)
}

// IsMainChain is a free data retrieval call binding the contract method 0xb834f6fb.
//
// Solidity: function isMainChain() view returns(bool)
func (_Registry *RegistryCallerSession) IsMainChain() (bool, error) {
	return _Registry.Contract.IsMainChain(&_Registry.CallOpts)
}

// IsWorkflowExist is a free data retrieval call binding the contract method 0x9b2bfaa3.
//
// Solidity: function isWorkflowExist(uint256 _id) view returns(bool)
func (_Registry *RegistryCaller) IsWorkflowExist(opts *bind.CallOpts, _id *big.Int) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isWorkflowExist", _id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWorkflowExist is a free data retrieval call binding the contract method 0x9b2bfaa3.
//
// Solidity: function isWorkflowExist(uint256 _id) view returns(bool)
func (_Registry *RegistrySession) IsWorkflowExist(_id *big.Int) (bool, error) {
	return _Registry.Contract.IsWorkflowExist(&_Registry.CallOpts, _id)
}

// IsWorkflowExist is a free data retrieval call binding the contract method 0x9b2bfaa3.
//
// Solidity: function isWorkflowExist(uint256 _id) view returns(bool)
func (_Registry *RegistryCallerSession) IsWorkflowExist(_id *big.Int) (bool, error) {
	return _Registry.Contract.IsWorkflowExist(&_Registry.CallOpts, _id)
}

// MaxWorkflowsPerAccount is a free data retrieval call binding the contract method 0xabad5c1a.
//
// Solidity: function maxWorkflowsPerAccount() view returns(uint16)
func (_Registry *RegistryCaller) MaxWorkflowsPerAccount(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "maxWorkflowsPerAccount")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MaxWorkflowsPerAccount is a free data retrieval call binding the contract method 0xabad5c1a.
//
// Solidity: function maxWorkflowsPerAccount() view returns(uint16)
func (_Registry *RegistrySession) MaxWorkflowsPerAccount() (uint16, error) {
	return _Registry.Contract.MaxWorkflowsPerAccount(&_Registry.CallOpts)
}

// MaxWorkflowsPerAccount is a free data retrieval call binding the contract method 0xabad5c1a.
//
// Solidity: function maxWorkflowsPerAccount() view returns(uint16)
func (_Registry *RegistryCallerSession) MaxWorkflowsPerAccount() (uint16, error) {
	return _Registry.Contract.MaxWorkflowsPerAccount(&_Registry.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistryCaller) SignerGetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "signerGetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistrySession) SignerGetter() (common.Address, error) {
	return _Registry.Contract.SignerGetter(&_Registry.CallOpts)
}

// SignerGetter is a free data retrieval call binding the contract method 0x5c211f88.
//
// Solidity: function signerGetter() view returns(address)
func (_Registry *RegistryCallerSession) SignerGetter() (common.Address, error) {
	return _Registry.Contract.SignerGetter(&_Registry.CallOpts)
}

// WorkflowsPerAddress is a free data retrieval call binding the contract method 0x6b699545.
//
// Solidity: function workflowsPerAddress(address ) view returns(uint256)
func (_Registry *RegistryCaller) WorkflowsPerAddress(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "workflowsPerAddress", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WorkflowsPerAddress is a free data retrieval call binding the contract method 0x6b699545.
//
// Solidity: function workflowsPerAddress(address ) view returns(uint256)
func (_Registry *RegistrySession) WorkflowsPerAddress(arg0 common.Address) (*big.Int, error) {
	return _Registry.Contract.WorkflowsPerAddress(&_Registry.CallOpts, arg0)
}

// WorkflowsPerAddress is a free data retrieval call binding the contract method 0x6b699545.
//
// Solidity: function workflowsPerAddress(address ) view returns(uint256)
func (_Registry *RegistryCallerSession) WorkflowsPerAddress(arg0 common.Address) (*big.Int, error) {
	return _Registry.Contract.WorkflowsPerAddress(&_Registry.CallOpts, arg0)
}

// ActivateWorkflows is a paid mutator transaction binding the contract method 0xeeed0b18.
//
// Solidity: function activateWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) ActivateWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "activateWorkflows", _workflowIds)
}

// ActivateWorkflows is a paid mutator transaction binding the contract method 0xeeed0b18.
//
// Solidity: function activateWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) ActivateWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// ActivateWorkflows is a paid mutator transaction binding the contract method 0xeeed0b18.
//
// Solidity: function activateWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) ActivateWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ActivateWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// CancelWorkflows is a paid mutator transaction binding the contract method 0xa3089ffe.
//
// Solidity: function cancelWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) CancelWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "cancelWorkflows", _workflowIds)
}

// CancelWorkflows is a paid mutator transaction binding the contract method 0xa3089ffe.
//
// Solidity: function cancelWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) CancelWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// CancelWorkflows is a paid mutator transaction binding the contract method 0xa3089ffe.
//
// Solidity: function cancelWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) CancelWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.CancelWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// DeployAndSetGateway is a paid mutator transaction binding the contract method 0xc5fd64d8.
//
// Solidity: function deployAndSetGateway() returns(address)
func (_Registry *RegistryTransactor) DeployAndSetGateway(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deployAndSetGateway")
}

// DeployAndSetGateway is a paid mutator transaction binding the contract method 0xc5fd64d8.
//
// Solidity: function deployAndSetGateway() returns(address)
func (_Registry *RegistrySession) DeployAndSetGateway() (*types.Transaction, error) {
	return _Registry.Contract.DeployAndSetGateway(&_Registry.TransactOpts)
}

// DeployAndSetGateway is a paid mutator transaction binding the contract method 0xc5fd64d8.
//
// Solidity: function deployAndSetGateway() returns(address)
func (_Registry *RegistryTransactorSession) DeployAndSetGateway() (*types.Transaction, error) {
	return _Registry.Contract.DeployAndSetGateway(&_Registry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xb17c9664.
//
// Solidity: function initialize(bool _isMainChain, address _signerGetterAddress, address _gatewayFactoryAddr, address _billingManagerAddr, uint16 _maxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactor) Initialize(opts *bind.TransactOpts, _isMainChain bool, _signerGetterAddress common.Address, _gatewayFactoryAddr common.Address, _billingManagerAddr common.Address, _maxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "initialize", _isMainChain, _signerGetterAddress, _gatewayFactoryAddr, _billingManagerAddr, _maxWorkflowsPerAccount)
}

// Initialize is a paid mutator transaction binding the contract method 0xb17c9664.
//
// Solidity: function initialize(bool _isMainChain, address _signerGetterAddress, address _gatewayFactoryAddr, address _billingManagerAddr, uint16 _maxWorkflowsPerAccount) returns()
func (_Registry *RegistrySession) Initialize(_isMainChain bool, _signerGetterAddress common.Address, _gatewayFactoryAddr common.Address, _billingManagerAddr common.Address, _maxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _isMainChain, _signerGetterAddress, _gatewayFactoryAddr, _billingManagerAddr, _maxWorkflowsPerAccount)
}

// Initialize is a paid mutator transaction binding the contract method 0xb17c9664.
//
// Solidity: function initialize(bool _isMainChain, address _signerGetterAddress, address _gatewayFactoryAddr, address _billingManagerAddr, uint16 _maxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactorSession) Initialize(_isMainChain bool, _signerGetterAddress common.Address, _gatewayFactoryAddr common.Address, _billingManagerAddr common.Address, _maxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.Initialize(&_Registry.TransactOpts, _isMainChain, _signerGetterAddress, _gatewayFactoryAddr, _billingManagerAddr, _maxWorkflowsPerAccount)
}

// PauseWorkflows is a paid mutator transaction binding the contract method 0xc1f9138c.
//
// Solidity: function pauseWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) PauseWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "pauseWorkflows", _workflowIds)
}

// PauseWorkflows is a paid mutator transaction binding the contract method 0xc1f9138c.
//
// Solidity: function pauseWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) PauseWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// PauseWorkflows is a paid mutator transaction binding the contract method 0xc1f9138c.
//
// Solidity: function pauseWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) PauseWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.PauseWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// Perform is a paid mutator transaction binding the contract method 0x7a03f9b5.
//
// Solidity: function perform(uint256 _workflowId, uint256 _workflowExecutionId, uint256 _gasAmount, bytes _data, address _target) returns()
func (_Registry *RegistryTransactor) Perform(opts *bind.TransactOpts, _workflowId *big.Int, _workflowExecutionId *big.Int, _gasAmount *big.Int, _data []byte, _target common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "perform", _workflowId, _workflowExecutionId, _gasAmount, _data, _target)
}

// Perform is a paid mutator transaction binding the contract method 0x7a03f9b5.
//
// Solidity: function perform(uint256 _workflowId, uint256 _workflowExecutionId, uint256 _gasAmount, bytes _data, address _target) returns()
func (_Registry *RegistrySession) Perform(_workflowId *big.Int, _workflowExecutionId *big.Int, _gasAmount *big.Int, _data []byte, _target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, _workflowId, _workflowExecutionId, _gasAmount, _data, _target)
}

// Perform is a paid mutator transaction binding the contract method 0x7a03f9b5.
//
// Solidity: function perform(uint256 _workflowId, uint256 _workflowExecutionId, uint256 _gasAmount, bytes _data, address _target) returns()
func (_Registry *RegistryTransactorSession) Perform(_workflowId *big.Int, _workflowExecutionId *big.Int, _gasAmount *big.Int, _data []byte, _target common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Perform(&_Registry.TransactOpts, _workflowId, _workflowExecutionId, _gasAmount, _data, _target)
}

// RegisterWorkflows is a paid mutator transaction binding the contract method 0x74e90f31.
//
// Solidity: function registerWorkflows((uint256,address,bytes,bool,bool)[] _registerWorkflowInfoArr) returns()
func (_Registry *RegistryTransactor) RegisterWorkflows(opts *bind.TransactOpts, _registerWorkflowInfoArr []IRegistryRegisterWorkflowInfo) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerWorkflows", _registerWorkflowInfoArr)
}

// RegisterWorkflows is a paid mutator transaction binding the contract method 0x74e90f31.
//
// Solidity: function registerWorkflows((uint256,address,bytes,bool,bool)[] _registerWorkflowInfoArr) returns()
func (_Registry *RegistrySession) RegisterWorkflows(_registerWorkflowInfoArr []IRegistryRegisterWorkflowInfo) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflows(&_Registry.TransactOpts, _registerWorkflowInfoArr)
}

// RegisterWorkflows is a paid mutator transaction binding the contract method 0x74e90f31.
//
// Solidity: function registerWorkflows((uint256,address,bytes,bool,bool)[] _registerWorkflowInfoArr) returns()
func (_Registry *RegistryTransactorSession) RegisterWorkflows(_registerWorkflowInfoArr []IRegistryRegisterWorkflowInfo) (*types.Transaction, error) {
	return _Registry.Contract.RegisterWorkflows(&_Registry.TransactOpts, _registerWorkflowInfoArr)
}

// ResumeWorkflows is a paid mutator transaction binding the contract method 0xfdf1641f.
//
// Solidity: function resumeWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactor) ResumeWorkflows(opts *bind.TransactOpts, _workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "resumeWorkflows", _workflowIds)
}

// ResumeWorkflows is a paid mutator transaction binding the contract method 0xfdf1641f.
//
// Solidity: function resumeWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistrySession) ResumeWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// ResumeWorkflows is a paid mutator transaction binding the contract method 0xfdf1641f.
//
// Solidity: function resumeWorkflows(uint256[] _workflowIds) returns()
func (_Registry *RegistryTransactorSession) ResumeWorkflows(_workflowIds []*big.Int) (*types.Transaction, error) {
	return _Registry.Contract.ResumeWorkflows(&_Registry.TransactOpts, _workflowIds)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address _gateway) returns()
func (_Registry *RegistryTransactor) SetGateway(opts *bind.TransactOpts, _gateway common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setGateway", _gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address _gateway) returns()
func (_Registry *RegistrySession) SetGateway(_gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, _gateway)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address _gateway) returns()
func (_Registry *RegistryTransactorSession) SetGateway(_gateway common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGateway(&_Registry.TransactOpts, _gateway)
}

// SetGatewayFactory is a paid mutator transaction binding the contract method 0x8422dbdc.
//
// Solidity: function setGatewayFactory(address _newGatewayFactory) returns()
func (_Registry *RegistryTransactor) SetGatewayFactory(opts *bind.TransactOpts, _newGatewayFactory common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setGatewayFactory", _newGatewayFactory)
}

// SetGatewayFactory is a paid mutator transaction binding the contract method 0x8422dbdc.
//
// Solidity: function setGatewayFactory(address _newGatewayFactory) returns()
func (_Registry *RegistrySession) SetGatewayFactory(_newGatewayFactory common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGatewayFactory(&_Registry.TransactOpts, _newGatewayFactory)
}

// SetGatewayFactory is a paid mutator transaction binding the contract method 0x8422dbdc.
//
// Solidity: function setGatewayFactory(address _newGatewayFactory) returns()
func (_Registry *RegistryTransactorSession) SetGatewayFactory(_newGatewayFactory common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetGatewayFactory(&_Registry.TransactOpts, _newGatewayFactory)
}

// SetMaxWorkflowsPerAccount is a paid mutator transaction binding the contract method 0x44ab987d.
//
// Solidity: function setMaxWorkflowsPerAccount(uint16 _newMaxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactor) SetMaxWorkflowsPerAccount(opts *bind.TransactOpts, _newMaxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setMaxWorkflowsPerAccount", _newMaxWorkflowsPerAccount)
}

// SetMaxWorkflowsPerAccount is a paid mutator transaction binding the contract method 0x44ab987d.
//
// Solidity: function setMaxWorkflowsPerAccount(uint16 _newMaxWorkflowsPerAccount) returns()
func (_Registry *RegistrySession) SetMaxWorkflowsPerAccount(_newMaxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.SetMaxWorkflowsPerAccount(&_Registry.TransactOpts, _newMaxWorkflowsPerAccount)
}

// SetMaxWorkflowsPerAccount is a paid mutator transaction binding the contract method 0x44ab987d.
//
// Solidity: function setMaxWorkflowsPerAccount(uint16 _newMaxWorkflowsPerAccount) returns()
func (_Registry *RegistryTransactorSession) SetMaxWorkflowsPerAccount(_newMaxWorkflowsPerAccount uint16) (*types.Transaction, error) {
	return _Registry.Contract.SetMaxWorkflowsPerAccount(&_Registry.TransactOpts, _newMaxWorkflowsPerAccount)
}

// UpdateWorkflowTotalSpent is a paid mutator transaction binding the contract method 0xa144597c.
//
// Solidity: function updateWorkflowTotalSpent(uint256 _workflowId, uint256 _workflowExecutionAmount) returns()
func (_Registry *RegistryTransactor) UpdateWorkflowTotalSpent(opts *bind.TransactOpts, _workflowId *big.Int, _workflowExecutionAmount *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "updateWorkflowTotalSpent", _workflowId, _workflowExecutionAmount)
}

// UpdateWorkflowTotalSpent is a paid mutator transaction binding the contract method 0xa144597c.
//
// Solidity: function updateWorkflowTotalSpent(uint256 _workflowId, uint256 _workflowExecutionAmount) returns()
func (_Registry *RegistrySession) UpdateWorkflowTotalSpent(_workflowId *big.Int, _workflowExecutionAmount *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.UpdateWorkflowTotalSpent(&_Registry.TransactOpts, _workflowId, _workflowExecutionAmount)
}

// UpdateWorkflowTotalSpent is a paid mutator transaction binding the contract method 0xa144597c.
//
// Solidity: function updateWorkflowTotalSpent(uint256 _workflowId, uint256 _workflowExecutionAmount) returns()
func (_Registry *RegistryTransactorSession) UpdateWorkflowTotalSpent(_workflowId *big.Int, _workflowExecutionAmount *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.UpdateWorkflowTotalSpent(&_Registry.TransactOpts, _workflowId, _workflowExecutionAmount)
}

// RegistryGatewaySetIterator is returned from FilterGatewaySet and is used to iterate over the raw logs and unpacked data for GatewaySet events raised by the Registry contract.
type RegistryGatewaySetIterator struct {
	Event *RegistryGatewaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryGatewaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryGatewaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryGatewaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryGatewaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryGatewaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryGatewaySet represents a GatewaySet event raised by the Registry contract.
type RegistryGatewaySet struct {
	Owner   common.Address
	Gateway common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGatewaySet is a free log retrieval operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) FilterGatewaySet(opts *bind.FilterOpts) (*RegistryGatewaySetIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return &RegistryGatewaySetIterator{contract: _Registry.contract, event: "GatewaySet", logs: logs, sub: sub}, nil
}

// WatchGatewaySet is a free log subscription operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) WatchGatewaySet(opts *bind.WatchOpts, sink chan<- *RegistryGatewaySet) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "GatewaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryGatewaySet)
				if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGatewaySet is a log parse operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address owner, address gateway)
func (_Registry *RegistryFilterer) ParseGatewaySet(log types.Log) (*RegistryGatewaySet, error) {
	event := new(RegistryGatewaySet)
	if err := _Registry.contract.UnpackLog(event, "GatewaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Registry contract.
type RegistryInitializedIterator struct {
	Event *RegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryInitialized represents a Initialized event raised by the Registry contract.
type RegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*RegistryInitializedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RegistryInitializedIterator{contract: _Registry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryInitialized)
				if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Registry *RegistryFilterer) ParseInitialized(log types.Log) (*RegistryInitialized, error) {
	event := new(RegistryInitialized)
	if err := _Registry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryPerformanceIterator is returned from FilterPerformance and is used to iterate over the raw logs and unpacked data for Performance events raised by the Registry contract.
type RegistryPerformanceIterator struct {
	Event *RegistryPerformance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryPerformanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryPerformance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryPerformance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryPerformanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryPerformanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryPerformance represents a Performance event raised by the Registry contract.
type RegistryPerformance struct {
	WorkflowId          *big.Int
	WorkflowExecutionId *big.Int
	Success             bool
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterPerformance is a free log retrieval operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 workflowId, uint256 workflowExecutionId, bool success)
func (_Registry *RegistryFilterer) FilterPerformance(opts *bind.FilterOpts) (*RegistryPerformanceIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return &RegistryPerformanceIterator{contract: _Registry.contract, event: "Performance", logs: logs, sub: sub}, nil
}

// WatchPerformance is a free log subscription operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 workflowId, uint256 workflowExecutionId, bool success)
func (_Registry *RegistryFilterer) WatchPerformance(opts *bind.WatchOpts, sink chan<- *RegistryPerformance) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "Performance")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryPerformance)
				if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePerformance is a log parse operation binding the contract event 0xc723c444dde505205b3ec0c789ed1adeade412952dc2caecb0ac55b9668e0105.
//
// Solidity: event Performance(uint256 workflowId, uint256 workflowExecutionId, bool success)
func (_Registry *RegistryFilterer) ParsePerformance(log types.Log) (*RegistryPerformance, error) {
	event := new(RegistryPerformance)
	if err := _Registry.contract.UnpackLog(event, "Performance", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowRegisteredIterator is returned from FilterWorkflowRegistered and is used to iterate over the raw logs and unpacked data for WorkflowRegistered events raised by the Registry contract.
type RegistryWorkflowRegisteredIterator struct {
	Event *RegistryWorkflowRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowRegistered represents a WorkflowRegistered event raised by the Registry contract.
type RegistryWorkflowRegistered struct {
	Owner common.Address
	Id    *big.Int
	Hash  []byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWorkflowRegistered is a free log retrieval operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) FilterWorkflowRegistered(opts *bind.FilterOpts) (*RegistryWorkflowRegisteredIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowRegisteredIterator{contract: _Registry.contract, event: "WorkflowRegistered", logs: logs, sub: sub}, nil
}

// WatchWorkflowRegistered is a free log subscription operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) WatchWorkflowRegistered(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowRegistered) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowRegistered)
				if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowRegistered is a log parse operation binding the contract event 0x475b9f0c15578f6f25825e8f4794d63cc2b5a664944bc02a1767d37784a2a69c.
//
// Solidity: event WorkflowRegistered(address owner, uint256 id, bytes hash)
func (_Registry *RegistryFilterer) ParseWorkflowRegistered(log types.Log) (*RegistryWorkflowRegistered, error) {
	event := new(RegistryWorkflowRegistered)
	if err := _Registry.contract.UnpackLog(event, "WorkflowRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryWorkflowStatusChangedIterator is returned from FilterWorkflowStatusChanged and is used to iterate over the raw logs and unpacked data for WorkflowStatusChanged events raised by the Registry contract.
type RegistryWorkflowStatusChangedIterator struct {
	Event *RegistryWorkflowStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryWorkflowStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryWorkflowStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryWorkflowStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryWorkflowStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryWorkflowStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryWorkflowStatusChanged represents a WorkflowStatusChanged event raised by the Registry contract.
type RegistryWorkflowStatusChanged struct {
	Id     *big.Int
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkflowStatusChanged is a free log retrieval operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) FilterWorkflowStatusChanged(opts *bind.FilterOpts) (*RegistryWorkflowStatusChangedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "WorkflowStatusChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryWorkflowStatusChangedIterator{contract: _Registry.contract, event: "WorkflowStatusChanged", logs: logs, sub: sub}, nil
}

// WatchWorkflowStatusChanged is a free log subscription operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) WatchWorkflowStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryWorkflowStatusChanged) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "WorkflowStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryWorkflowStatusChanged)
				if err := _Registry.contract.UnpackLog(event, "WorkflowStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkflowStatusChanged is a log parse operation binding the contract event 0x873d3c2f1a5c9ceb4708ce90cf72d574b0536ac48e1bbe0f050525d543bb24aa.
//
// Solidity: event WorkflowStatusChanged(uint256 id, uint8 status)
func (_Registry *RegistryFilterer) ParseWorkflowStatusChanged(log types.Log) (*RegistryWorkflowStatusChanged, error) {
	event := new(RegistryWorkflowStatusChanged)
	if err := _Registry.contract.UnpackLog(event, "WorkflowStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
